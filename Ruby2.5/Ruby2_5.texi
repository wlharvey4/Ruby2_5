%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%           DO NOT EDIT THIS FILE!!!!            %
% It was created by jrweave from `Ruby2_5.twjr'. %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Ruby2_5.twjr file.
% Uncomment the 1st \input line if you need the MF logo
% \input mftmac % for Metafont logo
\input texinfo   @c -*-texinfo-*-
@c %**start of header (This is for running Texinfo on a region.)
@setfilename Ruby2_5.info
@settitle Ruby2_5 Information
@c %**end of header (This is for running Texinfo on a region.)

@c Extra indices added by jrweave
@defindex cd   @c chunk definition
@defindex cr   @c chunk reference

@c Change how xref titles are quoted.
@tex
\gdef\xrefprintnodename#1{``#1''}
@end tex
@c And let braces in index entries work.
@tex
\global\usebracesinindexestrue
@end tex
@ifclear FORPRINT
@tex
\gdef\linkcolor{0.5 0.09 0.12}
@end tex
@tex
\gdef\urlcolor{0.5 0.09 0.12}
@end tex
@tex
\global\urefurlonlylinktrue
@end tex
@end ifclear


@c The following information should be updated here only!
@c This sets the edition of the document.

@c These apply across the board.
@set UPDATE-MONTH OCTOBER, 2018
@set EDITION 0.1a

@set TITLE Ruby 2.5 Information and Documentation
@set SHORTTITLE Ruby 2.5 Info

@iftex
@set DOCUMENT book
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end iftex
@ifhtml
@set DOCUMENT Web page
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end ifhtml
@ifinfo
@set DOCUMENT Info file
@set CHAPTER major node
@set APPENDIX major node
@set SECTION minor node
@set SUBSECTION node
@end ifinfo
@ifdocbook
@set DOCUMENT book
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end ifdocbook

@c some special symbols
@ifnottex
@macro ii{text}
@i{\text\}
@end macro
@end ifnottex

@c Uncomment this if you want the metafont logo.
@ignore
@ifnottex
@macro MF{}
@sc{METAFONT}
@end macro
@end ifnottex
@end ignore

@c merge the function and variable indexes into the concept index
@c do so without the code font, and in the index entries do the
@c font management ourselves.  Also merge in the chunk definition
@c and reference entries, which jrweave creates for us.
@ifnothtml
@synindex fn cp
@synindex vr cp
@synindex cd cp
@synindex cr cp
@end ifnothtml

@c If "finalout" is commented out, the printed output will show
@c black boxes that mark lines that are too long.  Thus, it is
@c unwise to comment it out when running a master in case there are
@c overfulls which are deemed okay.

@iftex
@c @finalout
@end iftex

@copying
@docbook
<para>Published by:</para>

<literallayout class="normal">Full Name
Address Line 1
Address Line 2
etc.
Email: <email>wlharvey4@@mac.com</email>
URL: <ulink url="http://www.example.com/">http://www.example.com/</ulink></literallayout>

<literallayout class="normal">Copyright &copy; 2018
wlharvey4
All Rights Reserved.</literallayout>
@end docbook

@ifnotdocbook
Copyright @copyright{} 2018 @*
wlharvey4 @*
All Rights Reserved.
@end ifnotdocbook
@sp 1
The Ruby2.5 Information and Documentation program is copyright
@copyright{} 2018 by wlharvey4. It is published under
the conditions of the GNU General Public License, version 3.
@sp 2
This is Edition @value{EDITION} of @cite{@value{TITLE}}.
@end copying

@c Uncomment this for the release.  Leaving it off saves paper
@c during editing and review.
@c @setchapternewpage odd

@c Uncomment this if it's ever printed as a real book(let).
@c @shorttitlepage @value{SHORTTITLE}

@c Let texinfo.tex give us full section titles
@xrefautomaticsectiontitle on

@c Start extra commands added by jrweave

@c For HTML, spell out email addresses, to avoid problems with
@c address harvesters for spammers.
@ifhtml
@macro EMAIL{real,spelled}
``\spelled\''
@end macro
@end ifhtml
@ifnothtml
@macro EMAIL{real,spelled}
@email{\real\}
@end macro
@end ifnothtml

@macro FIXME{text}
@strong{FIXME}: \text\
@end macro

@macro oldnum{value}
\value\
@end macro

@tex
\gdef\oldnum#1{\begingroup\oldstyle #1\endgroup}%
@end tex

@c End extra commands added by jrweave

@titlepage
@title @value{TITLE}
@subtitle @value{UPDATE-MONTH}
@author wlharvey4

@ifnotdocbook
@c Include the Distribution inside the titlepage environment so
@c that headings are turned off.  Headings on and off do not work.

@page
@vskip 0pt plus 1filll
Published by:
@sp 1
wlharvey4 @*
Address Line 1 @*
Address Line 2 @*
etc. @*
Email: @EMAIL{wlharvey4@@emac.com,wlharvey4 AT mac.com} @*
URL: @url{http://www.example.com/} @*

@insertcopying
@end ifnotdocbook
@end titlepage

@set DRAFT @i{DRAFT}

@iftex
@headings off
@evenheading @thispage @| @value{DRAFT} @| @strong{@value{SHORTTITLE}}
@oddheading  @strong{@thischapter} @| @value{DRAFT} @| @thispage
@end iftex

@ifnottex
@ifnotdocbook
@ifnotxml
@node Top
@top General Introduction
@c Preface node should come right after the Top
@c node, in `unnumbered' sections, then the introductory chapter.
@c Licensing nodes are appendices, they're not central to TexiWebJr.

This file documents Ruby 2.5, @url{https://www.ruby-lang.org}

@insertcopying
@end ifnotxml
@end ifnotdocbook
@end ifnottex

@menu
* Preface::
* Introduction::
* Documentation::
* First appendix::
* Code Chunk Summaries::
* Bibliography::
* Concept Index::

@detailmenu
 --- The Detailed Node Listing ---

Preface

* Audience::
* Overview::
* Conventions::
* Acknowledgements::

Documentation

* Installing Ruby::
* Getting Started::
* Manuals::
* Reference Documentation::
* Editors and IDEs::
* Further Reading::

Installation Methods

* Package Management Systems::
* Installers::
* Managers::
* Building From Source::

Package Management Systems

* Homebrew (OS X)::

Installers

* ruby-build::
* ruby-install::

Managers

* chruby::
* rbenv::
* RVM (``Ruby Version Manager'')::
* uru::

Building From Source

* Releases Page::
* Branches Page::
* Issue Tracking::
* Ruby Core::

Getting Started

* Try Ruby!::
* Official FAQ::
* Ruby Koans::
* Why’s (Poignant) Guide to Ruby::
* Ruby in Twenty Minutes::
* Ruby from Other Languages::
* Learning Ruby::
* Ruby Essentials::
* Learn to Program::

Code Chunk Summaries

* File Definitions::
* Code Chunk Definitions::
* Code Chunk References::

@end detailmenu
@end menu

@c @summarycontents
@contents

@c Add these to the menu if they ever get included.
@c @node Foreword
@c @unnumbered Foreword

@node Preface
@unnumbered Preface

Text here.

@menu
* Audience::
* Overview::
* Conventions::
* Acknowledgements::
@end menu

@node Audience
@unnumberedsec Intended Audience

Text here.


@node Overview
@unnumberedsec What Is Covered

Text and chapter by chapter description here.

@node Conventions
@unnumberedsec Typographical Conventions

@c Copied mostly verbatim from the gawk manual.

@cindex Texinfo document formatting language
This @value{DOCUMENT} is written in an enhanced version of
@uref{http://www.gnu.org/software/texinfo/, Texinfo},
the GNU documentation formatting language.
A single Texinfo source file is used to produce both the printed and online
versions of a program's documentation.
@ifnotinfo
Because of this, the typographical conventions
are slightly different than in other books you may have read.
@end ifnotinfo

Examples you would type at the command-line are preceded by the common
shell primary and secondary prompts, @samp{$} and @samp{>}.  Input that
you type is shown @kbd{like this}.  Output from the command is preceded
by the glyph ``@print{}''.  This typically represents the command's
standard output.  Error messages, and other output on the command's
standard error, are preceded by the glyph ``@error{}''.  For example:

@example
$ @kbd{echo hi on stdout}
@print{} hi on stdout
$ @kbd{echo hello on stderr 1>&2}
@error{} hello on stderr
@end example

@ifnotinfo
In the text, command names appear in @code{this font}, while code segments
appear in the same font and quoted, @samp{like this}.  Options look
like this: @option{-f}.  Some things are emphasized @emph{like this},
and if a point needs to be made strongly, it is done @strong{like this}.
The first occurrence of a new term is usually its @dfn{definition} and
appears in the same font as the previous occurrence of ``definition''
in this sentence.  Finally, file names are indicated like this:
@file{/path/to/our/file}.
@end ifnotinfo

@node Acknowledgements
@unnumberedsec Acknowledgements

@node Introduction
@chapter Introduction

Ruby is @dots{}

A dynamic, open source programming language with a focus on simplicity
and productivity.  It has an elegant syntax that is natural to read and
easy to write.








@c *****************************************************************************

@node Documentation
@chapter Documentation
@cindex Documentation

Here you will find pointers to manuals, tutorials and references that will come
in handy when you feel like coding in Ruby.




@c -----------------------------------------------------------------------------

@menu
* Installing Ruby::
* Getting Started::
* Manuals::
* Reference Documentation::
* Editors and IDEs::
* Further Reading::
@end menu

@node Installing Ruby
@section Installing Ruby

@subheading Installation Methods

There are several ways to install Ruby:

@itemize
@item
@b{Package Manager}: When you are on a UNIX-like operating system,
using your system’s package manager is the easiest way of getting
started. However, the packaged Ruby version usually is not the newest
one.
@item
@b{Installers}: can be used to install a specific or multiple Ruby
versions. There is also an installer for Windows.
@item
@b{Managers} help you to switch between multiple Ruby installations on
your system.
@item
@b{Source}: And finally, you can also build Ruby from source.
@end itemize

The following overview lists available installation methods for
different needs and platforms.


@c .....................................

@menu
* Package Management Systems::
* Installers::
* Managers::
* Building From Source::
@end menu

@node Package Management Systems
@subsection Package Management Systems

If you cannot compile your own Ruby, and you do not want to use a
third-party tool, you can use your system’s package manager to install
Ruby.

Certain members in the Ruby community feel very strongly that you
should never use a package manager to install Ruby and that you should
use tools instead.  While the full list of pros and cons is outside of
the scope of this page, the most basic reason is that most package
managers have older versions of Ruby in their official
repositories.  If you would like to use the newest Ruby, make sure you
use the correct package name, or use the tools described further below
instead.

@c _____________________________________

@menu
* Homebrew (OS X)::
@end menu

@node Homebrew (OS X)
@subsubsection Homebrew (OS X)

@url{http://brew.sh/, Homebrew}

On macOS (High) Sierra and OS X El Capitan, Ruby 2.0 is included.

Many people on OS X use Homebrew as a package manager.  It is really
easy to get a newer version of Ruby using Homebrew:

@example
$ brew install ruby
@end example

This should install the latest Ruby version.


@c .....................................

@node Installers
@subsection Installers
@cindex installer, third party
@cindex version managers
@cindex versions,multiple
@cindex Rubies, switch between
@cindex RVM version manager

If the version of Ruby provided by your system or package manager is
out of date, a newer one can be installed using a third-party
installer.  Some of them also allow you to install multiple versions on
the same system; associated managers can help to switch between the
different Rubies.  If you are planning to use RVM as a version manager
you do not need a separate installer, it comes with its own.

@c _____________________________________

@menu
* ruby-build::
* ruby-install::
@end menu

@node ruby-build
@subsubsection @command{ruby-build}
@cindex @command{ruby-build} plugin
@cindex @command{rbenv} version manager

@url{https://github.com/rbenv/ruby-build#readme, @command{ruby-build}}

@url{https://www.ruby-lang.org/en/documentation/installation/#rbenv,
@command{rbenv}}

@command{ruby-build} is a plugin for @command{rbenv} (@pxref{rbenv}
that allows you to compile and install different versions of Ruby into
arbitrary directories.  @command{ruby-build} can also be used as a
standalone program without @command{rbenv}.  It is available for OS X,
Linux, and other UNIX-like operating systems.

@c _____________________________________

@node ruby-install
@subsubsection @command{ruby-install}
@command{ruby-install} version manager
@command{chruby} version switcher

@url{https://github.com/postmodern/ruby-install#readme, @command{ruby-install}}

@url{https://www.ruby-lang.org/en/documentation/installation/#chruby,
@command{chruby}}

@command{ruby-install} allows you to compile and install different
versions of Ruby into arbitrary directories.  There is also a sibling,
@command{chruby} (@pxref{chruby}), which handles switching between
Ruby versions.  It is available for OS X, Linux, and other UNIX-like
operating systems.


@c .....................................

@node Managers
@subsection Managers

Many Rubyists use Ruby managers to manage multiple Rubies.  They confer
various advantages but are not officially supported.  Their respective
communities are very helpful, however.

@c _____________________________________

@menu
* chruby::
* rbenv::
* RVM (``Ruby Version Manager'')::
* uru::
@end menu

@node chruby
@subsubsection chruby
@cindex @command{chruby}
@cindex versions, switch between using @command{chruby}
@cindex manage Rubies using @command{chruby}

@command{chruby} allows you to switch between multiple Rubies.
@command{chruby} can manage Rubies installed by @command{ruby-install}
(@pxref{ruby-install}) or even built from source.

@c _____________________________________

@node rbenv
@subsubsection @command{rbenv}
@cindex @command{rbenv}
@cindex versions, multiple installations using @command{rbenv}

@url{https://github.com/rbenv/rbenv#readme, @command{rbenv}}

@url{https://www.ruby-lang.org/en/documentation/installation/#ruby-build,
@command{ruby-build}}

@command{rbenv} allows you to manage multiple installations of Ruby.
It does not support installing Ruby, but there is a popular plugin
named @command{ruby-build} (@pxref{ruby-build}) to install Ruby.  Both
tools are available for OS X, Linux, or other UNIX-like operating
systems.

@c _____________________________________

@node RVM (``Ruby Version Manager'')
@subsubsection RVM (``Ruby Version Manager'')
@cindex multiple installations, manage using RVM
@cindex gemsets, manage different using RVM

@url{http://rvm.io/, RVM}

RVM allows you to install and manage multiple installations of Ruby on
your system.  It can also manage different gemsets.  It is available for
OS X, Linux, or other UNIX-like operating systems.

@c _____________________________________

@node uru
@subsubsection @command{uru}
@cindex @command{uru}
@cindex multiple Rubies, command-line tool @command{uru}

@url{https://bitbucket.org/jonforums/uru, Uru}

Uru is a lightweight, multi-platform command line tool that helps you
to use multiple Rubies on OS X, Linux, or Windows systems.


@c .....................................

@node Building From Source
@subsection Building From Source
@cindex source, building

@url{https://www.ruby-lang.org/en/downloads/, Ruby 2.5.1}

@url{https://github.com/ruby/ruby, Ruby Github}

Of course, you can install Ruby from source.  Download and unpack a
tarball, then just do this:

@example
$ ./configure
$ make
$ sudo make install
@end example

By default, this will install Ruby into @file{/usr/local}.  To change, pass
the @option{--prefix=DIR} option to the @file{./configure} script.

Using the third-party tools or package managers might be a better
idea, though, because the installed Ruby won’t be managed by any
tools.

Installing from the source code is a great solution for when you are
comfortable enough with your platform and perhaps need specific settings for
your environment.  It’s also a good solution in the event that there are no
other premade packages for your platform.

@c _____________________________________

@menu
* Releases Page::
* Branches Page::
* Issue Tracking::
* Ruby Core::
@end menu

@node Releases Page
@subsubsection Releases Page
@cindex releases

@url{https://www.ruby-lang.org/en/downloads/releases/, Releases Page}

For more information about specific releases, particularly older
releases or previews, see the Releases page.

This page lists individual Ruby releases.

@subsubheading Ruby 2.5.1 Released

@url{https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.1.tar.gz,
ruby-2.1.5.tar.gz}

Posted by naruse on 28 Mar 2018

This release includes some bug fixes and some security fixes.

@itemize
@item
CVE-2017-17742: HTTP response splitting in WEBrick
@item
CVE-2018-6914: Unintentional file and directory creation with
directory traversal in tempfile and tmpdir
@item
CVE-2018-8777: DoS by large request in WEBrick
@item
CVE-2018-8778: Buffer under-read in String#unpack
@item
CVE-2018-8779: Unintentional socket creation by poisoned NUL byte in
UNIXServer and UNIXSocket
@item
CVE-2018-8780: Unintentional directory traversal by poisoned NUL byte
in Dir
@item
Multiple vulnerabilities in RubyGems
@end itemize

@c _____________________________________

@node Branches Page
@subsubsection Branches Page
@cindex branches page

@url{https://www.ruby-lang.org/en/downloads/branches/, Branches Page}

Information about the current maintenance status of the various Ruby branches
can be found on the Branches page.

This page lists the current maintenance status of the various Ruby branches.
This is a preliminary list of Ruby branches and their maintenance status. The
shown dates are inferred from the English versions of release posts or EOL
announcements.

The Ruby branches or release series are categorized below into the following
phases:

@itemize
@item
normal maintenance (bug fix): Branch receives general bug fixes and security
fixes.
@item
security maintenance (security fix): Only security fixes are backported to this
branch.
@item
eol (end-of-life): Branch is not supported by the ruby-core team any longer and
does not receive any fixes. No further patch release will be released.
@item
preview: Only previews or release candidates have been released for this branch
so far.
@end itemize

@subsubheading Ruby 2.6
@url{https://cache.ruby-lang.org/pub/ruby/2.6/ruby-2.6.0-preview2.tar.gz}

@noindent
ruby-2.6.0-preview2@*
status: preview@*
release date:@*

@subsubheading Ruby 2.5
@url{https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.1.tar.gz}

@noindent
status: normal maintenance@*
release date: 2017-12-25@*

@subsubheading Ruby 2.4
@url{https://cache.ruby-lang.org/pub/ruby/2.4/ruby-2.4.4.tar.gz}

@noindent
status: normal maintenance@*
release date: 2016-12-25@*

@subsubheading Ruby 2.3
@url{https://cache.ruby-lang.org/pub/ruby/2.3/ruby-2.3.7.tar.gz}

@noindent
status: security maintenance@*
release date: 2015-12-25@*
EOL date: scheduled for 2019-03-31@*

@subsubheading Ruby 2.2

status: eol@*
release date: 2014-12-25@*
EOL date: 2018-03-31@*

@c _____________________________________

@node Issue Tracking
@subsubsection Ruby Issue Tracking System
@cindex issue tracking

@url{https://bugs.ruby-lang.org, Bugs}

@subsubheading How to report a bug

@url{https://bugs.ruby-lang.org/projects/ruby/wiki/HowToReport, How To Report}

@subsubheading Ruby Trunk

@url{https://bugs.ruby-lang.org/projects/ruby-trunk, Ruby Trunk}

@url{https://bugs.ruby-lang.org/projects/ruby-trunk/issues?set_filter=1, All
Issues}

@c _____________________________________

@node Ruby Core
@subsubsection Ruby Core
@cindex core

@url{https://www.ruby-lang.org/en/community/ruby-core/, Ruby Core}

Now is a fantastic time to follow Ruby’s development.  With the increased
attention Ruby has received in the past few years, there’s a growing need for
good talent to help enhance Ruby and document its parts.  So, where do you
start?

The topics related to Ruby development covered here are:

@itemize
@item
@ref{subversion, Using Subversion to Track Ruby Development}
@item
@ref{MainRubyRepo, How to Use Git With the Main Ruby Repository}
@item
@ref{PatchByPatch, Improving Ruby, Patch by Patch}
@item
Rules for Core Developers
@end itemize

@anchor{subversion}
@subsubheading Using Subversion to Track Ruby Development
@cindex Subversion
@cindex track Ruby development
@cindex Ruby development, tracking

Getting the latest Ruby source code is a matter of an anonymous checkout from
the @url{http://subversion.apache.org/, Subversion} repository.  From your
command line:

@example
@kbd{$ svn co https://svn.ruby-lang.org/repos/ruby/trunk ruby}
@end example

The @file{ruby} directory will now contain the latest source code for the
development version of Ruby (@file{ruby-trunk}).  Currently patches applied to
the trunk are backported to the stable 2.5, 2.4, and 2.3 branches (see below).

If you’d like to follow patching of Ruby 2.5, you should use the ruby_2_5
branch when checking out:
@cindex patching of Ruby

@example
$ svn co https://svn.ruby-lang.org/repos/ruby/branches/ruby_2_5
@end example

This will check out the respective development tree into a @file{ruby_2_5}
directory. Developers working on the maintenance branches are expected to
migrate their changes to Ruby’s trunk, so often the branches are very similar,
with the exception of improvements made by Matz and Nobu to the language
itself.

If you prefer, you may browse
@url{https://svn.ruby-lang.org/cgi-bin/viewvc.cgi/, Ruby’s Subversion
repository via the web}.
@cindex Subversion repository
@cindex repository, Subversion

@anchor{MainRubyRepo}
@subsubheading How to Use Git With the Main Ruby Repository
@cindex GitHub, ruby repository
@cindex respository, GitHub

Those who prefer to use Git over Subversion can find instructions with the
@url{https://github.com/ruby/ruby, mirror on GitHub}, both for those with
commit access and @url{https://github.com/shyouhei/ruby/wiki/noncommitterhowto,
everybody else}.

@anchor{PatchByPatch}
@subsubheading Improving Ruby, Patch by Patch
@cindex issue tracker
@cindex mailing lists
@cindex Ruby Core mailing list

The core team maintains an @url{https://bugs.ruby-lang.org/, issue tracker} for
submitting patches and bug reports to Matz and the gang.  These reports also
get submitted to the
@url{https://www.ruby-lang.org/en/community/mailing-lists/, Ruby-Core mailing
list} for discussion, so you can be sure your request won’t go unnoticed.  You
can also send your patches straight to the mailing list.  Either way, you are
encouraged to take part in the discussion that ensues.

Please look over the
@url{https://www.ruby-lang.org/en/community/ruby-core/writing-patches/, Patch
Writer’s Guide} for some tips, straight from Matz, on how to get your patches
considered.
@cindex Patch Writer's Guide

@url{https://www.ruby-lang.org/en/community/ruby-core/, Steps for Building a
Patch}




@c -----------------------------------------------------------------------------

@node Getting Started
@section Getting Started


@c .....................................

@menu
* Try Ruby!::
* Official FAQ::
* Ruby Koans::
* Why’s (Poignant) Guide to Ruby::
* Ruby in Twenty Minutes::
* Ruby from Other Languages::
* Learning Ruby::
* Ruby Essentials::
* Learn to Program::
@end menu

@node Try Ruby!
@subsection Try Ruby!

@url{https://ruby.github.io/TryRuby/, Try Ruby!}

An interactive tutorial that lets you try out Ruby right in your browser.  This
15-minute tutorial is aimed at beginners who want to get a feeling of the
language.


@c .....................................

@node Official FAQ
@subsection Official FAQ

The official frequently asked questions.

@url{https://www.ruby-lang.org/en/documentation/faq/, FAQ}


@c .....................................

@node Ruby Koans
@subsection Ruby Koans

@url{http://rubykoans.com/, Ruby Koans}


@c .....................................

@node Why’s (Poignant) Guide to Ruby
@subsection Why’s (Poignant) Guide to Ruby

@url{http://mislav.uniqpath.com/poignant-guide/, Why's Guide to Ruby}

An unconventional but interesting book that will teach you Ruby through
stories, wit, and comics.  Originally created by @cite{why the lucky stiff},
this guide remains a classic for Ruby learners.


@c .....................................

@node Ruby in Twenty Minutes
@subsection Ruby in Twenty Minutes

@url{https://www.ruby-lang.org/en/documentation/quickstart/, Ruby in Twenty
Minutes}

A nice tutorial covering the basics of Ruby. From start to finish it shouldn’t
take you more than twenty minutes.


@c .....................................

@node Ruby from Other Languages
@subsection Ruby from Other Languages

@url{https://www.ruby-lang.org/en/documentation/ruby-from-other-languages/,
Ruby from Other Languages}


@c .....................................

@node Learning Ruby
@subsection Learning Ruby

@url{http://rubylearning.com/, Learning Ruby}

A thorough collection of Ruby study notes for those who are new to the language
and in search of a solid introduction to Ruby’s concepts and constructs.


@c .....................................


@node Ruby Essentials
@subsection Ruby Essentials

@url{http://www.techotopia.com/index.php/Ruby_Essentials, Ruby Essentials}


@c .....................................

@node Learn to Program
@subsection Learn to Program

@url{http://pine.fm/LearnToProgram/, Learn to Program}

A wonderful little tutorial by Chris Pine for programming newbies.  If you don’t
know how to program, start here.


@c .....................................

@url{http://ruby.learncodethehardway.org/, Learn Ruby the Hard Way}








@c -----------------------------------------------------------------------------

@node Manuals
@section Manuals








@c -----------------------------------------------------------------------------

@node Reference Documentation
@section Reference Documentation








@c -----------------------------------------------------------------------------

@node Editors and IDEs
@section Editors and IDEs








@c -----------------------------------------------------------------------------

@node Further Reading
@section Further Reading








@c -----------------------------------------------------------------------------

@node First appendix
@appendix First Appendix Title

@node Code Chunk Summaries
@appendix Code Chunk Summaries

This @value{APPENDIX} presents alphabetical lists of all the file definitions,
the code chunk definitions, and the code chunk references.

@menu
* File Definitions::
* Code Chunk Definitions::
* Code Chunk References::
@end menu

@node File Definitions
@appendixsec Source File Definitions

@table @asis
@end table

@node Code Chunk Definitions
@appendixsec Code Chunk Definitions

@table @asis
@end table

@node Code Chunk References
@appendixsec Code Chunk References

@table @asis
@end table

@node Bibliography
@unnumbered Bibliography

@node Concept Index
@unnumbered Index

@printindex cp

@bye

TODO:
