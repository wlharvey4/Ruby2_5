%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%           DO NOT EDIT THIS FILE!!!!            %
% It was created by jrweave from `Ruby2_5.twjr'. %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Ruby2_5.twjr file.
% Uncomment the 1st \input line if you need the MF logo
% \input mftmac % for Metafont logo
\input texinfo   @c -*-texinfo-*-
@c %**start of header (This is for running Texinfo on a region.)
@setfilename Ruby2_5.info
@settitle Ruby2_5 Information
@c %**end of header (This is for running Texinfo on a region.)

@c Extra indices added by jrweave
@defindex cd   @c chunk definition
@defindex cr   @c chunk reference

@c Change how xref titles are quoted.
@tex
\gdef\xrefprintnodename#1{``#1''}
@end tex
@c And let braces in index entries work.
@tex
\global\usebracesinindexestrue
@end tex
@ifclear FORPRINT
@tex
\gdef\linkcolor{0.5 0.09 0.12}
@end tex
@tex
\gdef\urlcolor{0.5 0.09 0.12}
@end tex
@tex
\global\urefurlonlylinktrue
@end tex
@end ifclear


@c The following information should be updated here only!
@c This sets the edition of the document.

@c These apply across the board.
@set UPDATE-MONTH OCTOBER, 2018
@set EDITION 0.1e

@set TITLE Ruby 2.5 Information and Documentation
@set SHORTTITLE Ruby 2.5 Info

@iftex
@set DOCUMENT book
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end iftex
@ifhtml
@set DOCUMENT Web page
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end ifhtml
@ifinfo
@set DOCUMENT Info file
@set CHAPTER major node
@set APPENDIX major node
@set SECTION minor node
@set SUBSECTION node
@end ifinfo
@ifdocbook
@set DOCUMENT book
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end ifdocbook

@c some special symbols
@ifnottex
@macro ii{text}
@i{\text\}
@end macro
@end ifnottex

@c Uncomment this if you want the metafont logo.
@ignore
@ifnottex
@macro MF{}
@sc{METAFONT}
@end macro
@end ifnottex
@end ignore

@c merge the function and variable indexes into the concept index
@c do so without the code font, and in the index entries do the
@c font management ourselves.  Also merge in the chunk definition
@c and reference entries, which jrweave creates for us.
@ifnothtml
@synindex fn cp
@synindex vr cp
@synindex cd cp
@synindex cr cp
@end ifnothtml

@c If "finalout" is commented out, the printed output will show
@c black boxes that mark lines that are too long.  Thus, it is
@c unwise to comment it out when running a master in case there are
@c overfulls which are deemed okay.

@iftex
@c @finalout
@end iftex

@copying
@docbook
<para>Published by:</para>

<literallayout class="normal">Full Name
Address Line 1
Address Line 2
etc.
Email: <email>wlharvey4@@mac.com</email>
URL: <ulink url="http://www.example.com/">http://www.example.com/</ulink></literallayout>

<literallayout class="normal">Copyright &copy; 2018
wlharvey4
All Rights Reserved.</literallayout>
@end docbook

@ifnotdocbook
Copyright @copyright{} 2018 @*
wlharvey4 @*
All Rights Reserved.
@end ifnotdocbook
@sp 1
The Ruby2.5 Information and Documentation program is copyright
@copyright{} 2018 by wlharvey4. It is published under
the conditions of the GNU General Public License, version 3.
@sp 2
This is Edition @value{EDITION} of @cite{@value{TITLE}}.
@end copying

@c Uncomment this for the release.  Leaving it off saves paper
@c during editing and review.
@c @setchapternewpage odd

@c Uncomment this if it's ever printed as a real book(let).
@c @shorttitlepage @value{SHORTTITLE}

@c Let texinfo.tex give us full section titles
@xrefautomaticsectiontitle on

@c Start extra commands added by jrweave

@c For HTML, spell out email addresses, to avoid problems with
@c address harvesters for spammers.
@ifhtml
@macro EMAIL{real,spelled}
``\spelled\''
@end macro
@end ifhtml
@ifnothtml
@macro EMAIL{real,spelled}
@email{\real\}
@end macro
@end ifnothtml

@macro FIXME{text}
@strong{FIXME}: \text\
@end macro

@macro oldnum{value}
\value\
@end macro

@tex
\gdef\oldnum#1{\begingroup\oldstyle #1\endgroup}%
@end tex

@c End extra commands added by jrweave

@titlepage
@title @value{TITLE}
@subtitle @value{UPDATE-MONTH}
@author wlharvey4

@ifnotdocbook
@c Include the Distribution inside the titlepage environment so
@c that headings are turned off.  Headings on and off do not work.

@page
@vskip 0pt plus 1filll
Published by:
@sp 1
wlharvey4 @*
Address Line 1 @*
Address Line 2 @*
etc. @*
Email: @EMAIL{wlharvey4@@emac.com,wlharvey4 AT mac.com} @*
URL: @url{http://www.example.com/} @*

@insertcopying
@end ifnotdocbook
@end titlepage

@set DRAFT @i{DRAFT}

@iftex
@headings off
@evenheading @thispage @| @value{DRAFT} @| @strong{@value{SHORTTITLE}}
@oddheading  @strong{@thischapter} @| @value{DRAFT} @| @thispage
@end iftex

@ifnottex
@ifnotdocbook
@ifnotxml
@node Top
@top General Introduction
@c Preface node should come right after the Top
@c node, in `unnumbered' sections, then the introductory chapter.
@c Licensing nodes are appendices, they're not central to TexiWebJr.

This file documents Ruby 2.5, @url{https://www.ruby-lang.org}

@insertcopying
@end ifnotxml
@end ifnotdocbook
@end ifnottex

@menu
* Preface::
* Introduction::
* Documentation::
* The Makefile::
* Code Chunk Summaries::
* Bibliography::
* Concept Index::

@detailmenu
 --- The Detailed Node Listing ---

Preface

* Audience::
* Overview::
* Conventions::
* Acknowledgements::

Documentation

* Installing Ruby::
* Developing Ruby::
* Getting Started::
* Manuals::
* Reference Documentation::
* Editors and IDEs::
* Further Reading::

Installation Methods

* Package Management Systems::
* Installers::
* Managers::
* Building From Source::

Package Management Systems

* Homebrew (OS X)::

Installers

* ruby-build::
* ruby-install::

Managers

* chruby::
* rbenv::
* RVM (``Ruby Version Manager'')::
* uru::

Building From Source

* Releases Page::
* Branches Page::
* Issue Tracking::

Getting Started

* Try Ruby!::
* Official FAQ::
* Ruby Koans::
* Why’s (Poignant) Guide to Ruby::
* Ruby in Twenty Minutes::
* Ruby from Other Languages::
* Learning Ruby::
* Ruby Essentials::
* Learn to Program::

Official FAQ

* FAQ Iterators::
* FAQ Syntax::
* FAQ Methods::
* FAQ Classes and Modules::
* FAQ Built-In Libraries::
* FAQ Extension Library::
* FAQ Other Features::

Ruby in Twenty Minutes

* Interactive Ruby::
* Defining Methods::
* Altering Classes::
* Large Class Definition::
* Run MegaGreeter::

The Makefile

* Makefile Variable Definitions::
* Makefile Default Rule::
* Makefile TWJR Rules::
* Makefile Clean Rules::

Code Chunk Summaries

* File Definitions::
* Code Chunk Definitions::
* Code Chunk References::

@end detailmenu
@end menu

@c @summarycontents
@contents

@c Add these to the menu if they ever get included.
@c @node Foreword
@c @unnumbered Foreword

@node Preface
@unnumbered Preface

Text here.

@menu
* Audience::
* Overview::
* Conventions::
* Acknowledgements::
@end menu

@node Audience
@unnumberedsec Intended Audience

Text here.


@node Overview
@unnumberedsec What Is Covered

Text and chapter by chapter description here.

@node Conventions
@unnumberedsec Typographical Conventions

@c Copied mostly verbatim from the gawk manual.

@cindex Texinfo document formatting language
This @value{DOCUMENT} is written in an enhanced version of
@uref{http://www.gnu.org/software/texinfo/, Texinfo},
the GNU documentation formatting language.
A single Texinfo source file is used to produce both the printed and online
versions of a program's documentation.
@ifnotinfo
Because of this, the typographical conventions
are slightly different than in other books you may have read.
@end ifnotinfo

Examples you would type at the command-line are preceded by the common
shell primary and secondary prompts, @samp{$} and @samp{>}.  Input that
you type is shown @kbd{like this}.  Output from the command is preceded
by the glyph ``@print{}''.  This typically represents the command's
standard output.  Error messages, and other output on the command's
standard error, are preceded by the glyph ``@error{}''.  For example:

@example
$ @kbd{echo hi on stdout}
@print{} hi on stdout
$ @kbd{echo hello on stderr 1>&2}
@error{} hello on stderr
@end example

@ifnotinfo
In the text, command names appear in @code{this font}, while code segments
appear in the same font and quoted, @samp{like this}.  Options look
like this: @option{-f}.  Some things are emphasized @emph{like this},
and if a point needs to be made strongly, it is done @strong{like this}.
The first occurrence of a new term is usually its @dfn{definition} and
appears in the same font as the previous occurrence of ``definition''
in this sentence.  Finally, file names are indicated like this:
@file{/path/to/our/file}.
@end ifnotinfo

@node Acknowledgements
@unnumberedsec Acknowledgements

@node Introduction
@chapter Introduction

Ruby is @dots{}

A dynamic, open source programming language with a focus on simplicity
and productivity.  It has an elegant syntax that is natural to read and
easy to write.








@c *****************************************************************************

@node Documentation
@chapter Documentation
@cindex Documentation

Here you will find pointers to manuals, tutorials and references that will come
in handy when you feel like coding in Ruby.




@c -----------------------------------------------------------------------------

@menu
* Installing Ruby::
* Developing Ruby::
* Getting Started::
* Manuals::
* Reference Documentation::
* Editors and IDEs::
* Further Reading::
@end menu

@node Installing Ruby
@section Installing Ruby

@subheading Installation Methods

There are several ways to install Ruby:

@itemize
@item
@b{Package Manager}: When you are on a UNIX-like operating system,
using your system’s package manager is the easiest way of getting
started. However, the packaged Ruby version usually is not the newest
one.
@item
@b{Installers}: can be used to install a specific or multiple Ruby
versions. There is also an installer for Windows.
@item
@b{Managers} help you to switch between multiple Ruby installations on
your system.
@item
@b{Source}: And finally, you can also build Ruby from source.
@end itemize

The following overview lists available installation methods for
different needs and platforms.


@c .....................................

@menu
* Package Management Systems::
* Installers::
* Managers::
* Building From Source::
@end menu

@node Package Management Systems
@subsection Package Management Systems

If you cannot compile your own Ruby, and you do not want to use a
third-party tool, you can use your system’s package manager to install
Ruby.

Certain members in the Ruby community feel very strongly that you
should never use a package manager to install Ruby and that you should
use tools instead.  While the full list of pros and cons is outside of
the scope of this page, the most basic reason is that most package
managers have older versions of Ruby in their official
repositories.  If you would like to use the newest Ruby, make sure you
use the correct package name, or use the tools described further below
instead.

@c _____________________________________

@menu
* Homebrew (OS X)::
@end menu

@node Homebrew (OS X)
@subsubsection Homebrew (OS X)

@url{http://brew.sh/, Homebrew}

On macOS (High) Sierra and OS X El Capitan, Ruby 2.0 is included.

Many people on OS X use Homebrew as a package manager.  It is really
easy to get a newer version of Ruby using Homebrew:

@example
$ brew install ruby
@end example

This should install the latest Ruby version.


@c .....................................

@node Installers
@subsection Installers
@cindex installer, third party
@cindex version managers
@cindex versions,multiple
@cindex Rubies, switch between
@cindex RVM version manager

If the version of Ruby provided by your system or package manager is
out of date, a newer one can be installed using a third-party
installer.  Some of them also allow you to install multiple versions on
the same system; associated managers can help to switch between the
different Rubies.  If you are planning to use RVM as a version manager
you do not need a separate installer, it comes with its own.

@c _____________________________________

@menu
* ruby-build::
* ruby-install::
@end menu

@node ruby-build
@subsubsection @command{ruby-build}
@cindex @command{ruby-build} plugin
@cindex @command{rbenv} version manager

@url{https://github.com/rbenv/ruby-build#readme, @command{ruby-build}}

@url{https://www.ruby-lang.org/en/documentation/installation/#rbenv,
@command{rbenv}}

@command{ruby-build} is a plugin for @command{rbenv} (@pxref{rbenv}
that allows you to compile and install different versions of Ruby into
arbitrary directories.  @command{ruby-build} can also be used as a
standalone program without @command{rbenv}.  It is available for OS X,
Linux, and other UNIX-like operating systems.

@c _____________________________________

@node ruby-install
@subsubsection @command{ruby-install}
@command{ruby-install} version manager
@command{chruby} version switcher

@url{https://github.com/postmodern/ruby-install#readme, @command{ruby-install}}

@url{https://www.ruby-lang.org/en/documentation/installation/#chruby,
@command{chruby}}

@command{ruby-install} allows you to compile and install different
versions of Ruby into arbitrary directories.  There is also a sibling,
@command{chruby} (@pxref{chruby}), which handles switching between
Ruby versions.  It is available for OS X, Linux, and other UNIX-like
operating systems.


@c .....................................

@node Managers
@subsection Managers

Many Rubyists use Ruby managers to manage multiple Rubies.  They confer
various advantages but are not officially supported.  Their respective
communities are very helpful, however.

@c _____________________________________

@menu
* chruby::
* rbenv::
* RVM (``Ruby Version Manager'')::
* uru::
@end menu

@node chruby
@subsubsection chruby
@cindex @command{chruby}
@cindex versions, switch between using @command{chruby}
@cindex manage Rubies using @command{chruby}

@command{chruby} allows you to switch between multiple Rubies.
@command{chruby} can manage Rubies installed by @command{ruby-install}
(@pxref{ruby-install}) or even built from source.

@c _____________________________________

@node rbenv
@subsubsection @command{rbenv}
@cindex @command{rbenv}
@cindex versions, multiple installations using @command{rbenv}

@url{https://github.com/rbenv/rbenv#readme, @command{rbenv}}

@url{https://www.ruby-lang.org/en/documentation/installation/#ruby-build,
@command{ruby-build}}

@command{rbenv} allows you to manage multiple installations of Ruby.
It does not support installing Ruby, but there is a popular plugin
named @command{ruby-build} (@pxref{ruby-build}) to install Ruby.  Both
tools are available for OS X, Linux, or other UNIX-like operating
systems.

@c _____________________________________

@node RVM (``Ruby Version Manager'')
@subsubsection RVM (``Ruby Version Manager'')
@cindex multiple installations, manage using RVM
@cindex gemsets, manage different using RVM

@url{http://rvm.io/, RVM}

RVM allows you to install and manage multiple installations of Ruby on
your system.  It can also manage different gemsets.  It is available for
OS X, Linux, or other UNIX-like operating systems.

@c _____________________________________

@node uru
@subsubsection @command{uru}
@cindex @command{uru}
@cindex multiple Rubies, command-line tool @command{uru}

@url{https://bitbucket.org/jonforums/uru, Uru}

Uru is a lightweight, multi-platform command line tool that helps you
to use multiple Rubies on OS X, Linux, or Windows systems.


@c .....................................

@node Building From Source
@subsection Building From Source
@cindex source, building

@url{https://www.ruby-lang.org/en/downloads/, Ruby 2.5.1}

@url{https://github.com/ruby/ruby, Ruby Github}

Of course, you can install Ruby from source.  Download and unpack a
tarball, then just do this:

@example
$ ./configure
$ make
$ sudo make install
@end example

By default, this will install Ruby into @file{/usr/local}.  To change, pass
the @option{--prefix=DIR} option to the @file{./configure} script.

Using the third-party tools or package managers might be a better
idea, though, because the installed Ruby won’t be managed by any
tools.

Installing from the source code is a great solution for when you are
comfortable enough with your platform and perhaps need specific settings for
your environment.  It’s also a good solution in the event that there are no
other premade packages for your platform.

@c _____________________________________

@menu
* Releases Page::
* Branches Page::
* Issue Tracking::
@end menu

@node Releases Page
@subsubsection Releases Page
@cindex releases

@url{https://www.ruby-lang.org/en/downloads/releases/, Releases Page}

For more information about specific releases, particularly older
releases or previews, see the Releases page.

This page lists individual Ruby releases.

@subsubheading Ruby 2.5.1 Released

@url{https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.1.tar.gz,
ruby-2.1.5.tar.gz}

Posted by naruse on 28 Mar 2018

This release includes some bug fixes and some security fixes.

@itemize
@item
CVE-2017-17742: HTTP response splitting in WEBrick
@item
CVE-2018-6914: Unintentional file and directory creation with
directory traversal in tempfile and tmpdir
@item
CVE-2018-8777: DoS by large request in WEBrick
@item
CVE-2018-8778: Buffer under-read in String#unpack
@item
CVE-2018-8779: Unintentional socket creation by poisoned NUL byte in
UNIXServer and UNIXSocket
@item
CVE-2018-8780: Unintentional directory traversal by poisoned NUL byte
in Dir
@item
Multiple vulnerabilities in RubyGems
@end itemize

@c _____________________________________

@node Branches Page
@subsubsection Branches Page
@cindex branches page

@url{https://www.ruby-lang.org/en/downloads/branches/, Branches Page}

Information about the current maintenance status of the various Ruby branches
can be found on the Branches page.

This page lists the current maintenance status of the various Ruby branches.
This is a preliminary list of Ruby branches and their maintenance status. The
shown dates are inferred from the English versions of release posts or EOL
announcements.

The Ruby branches or release series are categorized below into the following
phases:

@itemize
@item
normal maintenance (bug fix): Branch receives general bug fixes and security
fixes.
@item
security maintenance (security fix): Only security fixes are backported to this
branch.
@item
eol (end-of-life): Branch is not supported by the ruby-core team any longer and
does not receive any fixes. No further patch release will be released.
@item
preview: Only previews or release candidates have been released for this branch
so far.
@end itemize

@subsubheading Ruby 2.6
@url{https://cache.ruby-lang.org/pub/ruby/2.6/ruby-2.6.0-preview2.tar.gz}

@noindent
ruby-2.6.0-preview2@*
status: preview@*
release date:@*

@subsubheading Ruby 2.5
@url{https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.1.tar.gz}

@noindent
status: normal maintenance@*
release date: 2017-12-25@*

@subsubheading Ruby 2.4
@url{https://cache.ruby-lang.org/pub/ruby/2.4/ruby-2.4.4.tar.gz}

@noindent
status: normal maintenance@*
release date: 2016-12-25@*

@subsubheading Ruby 2.3
@url{https://cache.ruby-lang.org/pub/ruby/2.3/ruby-2.3.7.tar.gz}

@noindent
status: security maintenance@*
release date: 2015-12-25@*
EOL date: scheduled for 2019-03-31@*

@subsubheading Ruby 2.2

status: eol@*
release date: 2014-12-25@*
EOL date: 2018-03-31@*

@c _____________________________________

@node Issue Tracking
@subsubsection Ruby Issue Tracking System
@cindex issue tracking

@url{https://bugs.ruby-lang.org, Bugs}

@subsubheading How to report a bug

@url{https://bugs.ruby-lang.org/projects/ruby/wiki/HowToReport, How To Report}

@subsubheading Ruby Trunk

@url{https://bugs.ruby-lang.org/projects/ruby-trunk, Ruby Trunk}

@url{https://bugs.ruby-lang.org/projects/ruby-trunk/issues?set_filter=1, All
Issues}




@c -----------------------------------------------------------------------------

@node Developing Ruby
@section Developing Ruby
@cindex developing Ruby

@url{https://www.ruby-lang.org/en/community/ruby-core/, Ruby Core}

Now is a fantastic time to follow Ruby’s development.  With the increased
attention Ruby has received in the past few years, there’s a growing need for
good talent to help enhance Ruby and document its parts.  So, where do you
start?

@subheading Ruby Core
@cindex Ruby core

The topics related to Ruby development covered here are:

@itemize
@item
@ref{subversion, Using Subversion to Track Ruby Development}
@item
@ref{MainRubyRepo, How to Use Git With the Main Ruby Repository}
@item
@ref{PatchByPatch, Improving Ruby, Patch by Patch}
@item
Rules for Core Developers
@end itemize

@anchor{subversion}
@subsubheading Using Subversion to Track Ruby Development
@cindex Subversion
@cindex track Ruby development
@cindex Ruby development, tracking

Getting the latest Ruby source code is a matter of an anonymous checkout from
the @url{http://subversion.apache.org/, Subversion} repository.  From your
command line:

@example
@kbd{$ svn co https://svn.ruby-lang.org/repos/ruby/trunk ruby}
@end example

The @file{ruby} directory will now contain the latest source code for the
development version of Ruby (@file{ruby-trunk}).  Currently patches applied to
the trunk are backported to the stable 2.5, 2.4, and 2.3 branches (see below).

If you’d like to follow patching of Ruby 2.5, you should use the ruby_2_5
branch when checking out:
@cindex patching of Ruby

@example
$ svn co https://svn.ruby-lang.org/repos/ruby/branches/ruby_2_5
@end example

This will check out the respective development tree into a @file{ruby_2_5}
directory. Developers working on the maintenance branches are expected to
migrate their changes to Ruby’s trunk, so often the branches are very similar,
with the exception of improvements made by Matz and Nobu to the language
itself.

If you prefer, you may browse
@url{https://svn.ruby-lang.org/cgi-bin/viewvc.cgi/, Ruby’s Subversion
repository via the web}.
@cindex Subversion repository
@cindex repository, Subversion

@anchor{MainRubyRepo}
@subsubheading How to Use Git With the Main Ruby Repository
@cindex GitHub, ruby repository
@cindex respository, GitHub

Those who prefer to use Git over Subversion can find instructions with the
@url{https://github.com/ruby/ruby, mirror on GitHub}, both for those with
commit access and @url{https://github.com/shyouhei/ruby/wiki/noncommitterhowto,
everybody else}.

@anchor{PatchByPatch}
@subsubheading Improving Ruby, Patch by Patch
@cindex issue tracker
@cindex mailing lists
@cindex Ruby Core mailing list

The core team maintains an @url{https://bugs.ruby-lang.org/, issue tracker} for
submitting patches and bug reports to Matz and the gang.  These reports also
get submitted to the
@url{https://www.ruby-lang.org/en/community/mailing-lists/, Ruby-Core mailing
list} for discussion, so you can be sure your request won’t go unnoticed.  You
can also send your patches straight to the mailing list.  Either way, you are
encouraged to take part in the discussion that ensues.

Please look over the
@url{https://www.ruby-lang.org/en/community/ruby-core/writing-patches/, Patch
Writer’s Guide} for some tips, straight from Matz, on how to get your patches
considered.
@cindex Patch Writer's Guide

@url{https://www.ruby-lang.org/en/community/ruby-core/, Steps for Building a
Patch}




@c -----------------------------------------------------------------------------

@node Getting Started
@section Getting Started


@c .....................................

@menu
* Try Ruby!::
* Official FAQ::
* Ruby Koans::
* Why’s (Poignant) Guide to Ruby::
* Ruby in Twenty Minutes::
* Ruby from Other Languages::
* Learning Ruby::
* Ruby Essentials::
* Learn to Program::
@end menu

@node Try Ruby!
@subsection Try Ruby!

@url{https://ruby.github.io/TryRuby/, Try Ruby!}

An interactive tutorial that lets you try out Ruby right in your browser.  This
15-minute tutorial is aimed at beginners who want to get a feeling of the
language.


@c .....................................

@node Official FAQ
@subsection Official FAQ

The official frequently asked questions.

@url{https://www.ruby-lang.org/en/documentation/faq/, FAQ}

This document contains Frequently Asked Questions about Ruby with
answers.

This FAQ is based on
@url{http://ruby-doc.org/docs/ruby-doc-bundle/FAQ/FAQ.html, The Ruby
Language FAQ} originally compiled by Shugo Maeda and translated into
English by Kentaro Goto.  Thanks to Zachary Scott and Marcus
Stollsteimer for incorporating the FAQ into the site and for a major
overhaul of the content.

@itemize
@item
General questions
@item
How does Ruby stack up against…?
@item
Installing Ruby
@item
Variables, constants, and arguments
@item
@ref{FAQ Iterators}
@item
@ref{FAQ Syntax}
@item
Methods
@item
Classes and modules
@item
Built-in libraries
@item
Extension library
@item
Other features
@end itemize

@c _____________________________________

@menu
* FAQ Iterators::
* FAQ Syntax::
* FAQ Methods::
* FAQ Classes and Modules::
* FAQ Built-In Libraries::
* FAQ Extension Library::
* FAQ Other Features::
@end menu

@node FAQ Iterators
@subsubsection FAQ Iterators
@cindex iterators

@subheading What is an iterator?
@cindex @file{Proc} object, passed to iterator
@cindex block object, passed to iterator

An iterator is a method which accepts a block or a @file{Proc}
object.  In the source file, the block is placed immediately after the
invocation of the method.  Iterators are used to produce user-defined
control structures --- especially loops.

Let’s look at an example to see how this works.  Iterators are often
used to repeat the same action on each element of a collection, like
this:

@example
data = [1, 2, 3]
data.each do |i|
  puts i
end
@end example

The @code{each} method of the array @code{data} is passed the @code{do
@dots{} end} block, and executes it repeatedly.  On each call, the
block is passed successive elements of the array.
@cindex @code{each} method of iterator

You can define blocks with @code{@{ @dots{} @}} in place of @code{do
@dots{} end}.

@example
data = [1, 2, 3]
data.each @{ |i|
  puts i
@}
@end example

This code has the same meaning as the last example.  However, in some
cases, precedence issues cause @code{do @dots{} end} and @code{@{
@dots{} @}} to act differently.
@cindex precedence, iterators, different results
@cindex binding of @code{@{ @dots{} @}}

@example
foobar a, b do @dots{} end	# foobar is the iterator.
foobar a, b @{ @dots{} @}	# b is the iterator.
@end example

This is because @code{@{ @dots{} @}} binds more tightly to the
preceding expression than does a @code{do @dots{} end} block.  The
first example is equivalent to @samp{foobar(a, b) do @dots{} end},
while the second is @samp{foobar(a, b @{ @dots{} @})}.

@subheading How can I pass a block to an iterator?

You simply place the block after the iterator call.  You can also pass
a @file{Proc} object by prepending @kbd{&} to the variable or constant
name that refers to the @file{Proc}.

@subheading How is a block used in an iterator?
@cindex block, used in an iterator
@cindex iterator, block
@cindex @code{yield} control structor, or statement

@emph{This section or parts of it might be out-dated or in need of
confirmation.}

There are three ways to execute a block from an iterator method:

@enumerate
@item
the @code{yield} control structure;
@cindex @code{yield} control structure in iterator

The @code{yield} statement calls the block, optionally passing it one
or more arguments.

@example
def my_iterator
  yield 1, 2
end

my_iterator @{|a, b| puts a, b @}
@end example

@item
calling a @file{Proc} argument (made from a block) with @code{call};

If a method definition has a block argument (the last formal parameter
has an ampersand (@kbd{&}) prepended), it will receive the attached
block, converted to a @file{Proc} object. This may be called using
@code{prc.call(args)}.

@example
def my_iterator(&b)
  b.call(1, 2)
end

my_iterator @{|a, b| puts a, b @}
@end example

and

@item
using @code{Proc.new} followed by a @code{call}.
@cindex @code{Proc.new}, followed by @code{call}
@cindex @code{lambda} as a synonym of @file{Proc}

@code{Proc.new} (or the equivalent @code{proc} or @code{lambda}
calls), when used in an iterator definition, takes the block which is
given to the method as its argument and generates a procedure object
from it.  (@code{proc} and @code{lambda} are effectively synonyms.)

@emph{[Update needed: @code{lambda} behaves in a slightly different
way and produces a warning @samp{tried to create Proc object without a
block}.]}

@example
def my_iterator
  Proc.new.call(3, 4)
  proc.call(5, 6)
  lambda.call(7, 8)
end

my_iterator @{|a, b| puts a, b @}
@end example

Perhaps surprisingly, @code{Proc.new} and friends do not in any sense
consume the block attached to the method --- each call to
@code{Proc.new} generates a new procedure object out of the same
block.

You can tell if there is a block associated with a method by calling
@code{block_given?}.
@cindex @code{block_given?}

@end enumerate

@subheading What does Proc.new without a block do?

@code{Proc.new} without a block cannot generate a procedure object and
an error occurs.  In a method definition, however, @code{Proc.new}
without a block implies the existence of a block at the time the
method is called, and so no error will occur.

@subheading How can I run iterators in parallel?

See @url{http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/5252}

@c _____________________________________

@node FAQ Syntax
@subsubsection FAQ Syntax

List of FAQ items:

@ref{immediate value, What is the difference between an immediate
value and a reference?}

@ref{nil vs false, What is the difference between @code{nil} and
@code{false}?}

@ref{empty string, The Empty String}

@ref{symbol object, A Symbol Object}

@ref{value of symbol, How can I access the value of a symbol?}

@ref{loop, Is @code{loop} a control structure?}

@ref{post-test loop, Ruby doesn't have a post-test loop}

@ref{hash literal, Why can’t I pass a hash literal to a method @code{p @{@}}?}

@ref{pos val, I can’t get @code{def pos=(val)} to work!}

@ref{\1 and \\1, What is the difference between @code{\1} and
@code{\\1}?}

@ref{2 dots vs 3 dots, What is the difference between @code{..} and
@code{...}?}

@ref{or and, What is the difference between or and ||?}

@ref{function pointers, Does Ruby have function pointers?}

@ref{load vs require, What is the difference between load and
require?}

@ref{exception handling, Does Ruby have exception handling?}

@anchor{immediate value}
@subheading What is the difference between an immediate value and a reference?
@cindex immediate values

@code{Fixnum}, @code{true}, @code{nil}, and @code{false} are
implemented as @dfn{immediate values}.  With immediate values,
variables hold the objects themselves, rather than references to them.

Singleton methods cannot be defined for such objects.  Two
@file{Fixnums} of the same value always represent the same object
instance, so (for example) instance variables for the @file{Fixnum}
with the value 1 are shared between all the 1's in the system.  This
makes it impossible to define a singleton method for just one of
these.

@anchor{nil vs false}
@subheading What is the difference between @code{nil} and @code{false}?
@cindex @code{nil} and @code{false}, similariaties and differences
@cindex @code{false} and @code{nil}
@cindex boolean context
@cindex ``falsey'' values
@cindex ``truthy'' values

First the similarity: @code{nil} and @code{false} are the only two
objects that evaluate to @code{false} in a boolean context.  (In other
words: they are the only ``falsy'' values; all other objects are
``truthy''.)

However, @code{nil} and @code{false} are instances of different
classes (@file{NilClass} and @file{FalseClass}), and have different behavior
elsewhere.
@cindex @file{NilClass}
@cindex @file{FalseClass}

We recommend that @dfn{predicate methods} (those whose name ends with
a question mark) return @code{true} or @code{false}.  Other methods that need to
indicate failure should return @code{nil}.
@cindex predicate methods

@anchor{empty string}
@subheading The Empty String
@cindex empty string
@cindex conditional expression, @code{false} values

An empty string (@code{""}) returns @code{true} in a conditional
expression!  In Perl, it’s @code{false}.  It’s very simple: in Ruby,
only @code{nil} and @code{false} are @code{false} in conditional
contexts.

You can use @code{empty?}, compare the string to @code{""}, or compare
the string’s size or length to 0 to find out if a string is empty.

@anchor{symbol object}
@subheading A Symbol Object
@cindex Symbol object
@cindex @code{"name".to_sym}
@cindex @code{"name".intern}

What does @code{:name} mean?

A colon followed by a name generates a @dfn{Symbol object} which
corresponds one-to-one with the identifier.  During the duration of a
program's execution the same Symbol object will be created for a given
name or string.  Symbols can also be created with @code{"name".intern}
or @code{"name".to_sym}.

Symbol objects can represent identifiers for methods, variables, and
so on.  Some methods, like @code{define_method},
@code{method_missing}, or @code{trace_var}, require a symbol.  Other
methods, e.g. @code{attr_accessor}, @code{send}, or @code{autoload},
also accept a string.

Due to the fact that they are created only once, Symbols are often
used as hash keys.  String hash keys would create a new object for
every single use, thereby causing some memory overhead.  There is even
a special syntax for symbol hash keys:
@cindex symbols as hash keys

@example
person_1 = @{ :name => "John", :age => 42 @}
person_2 = @{ name: "Jane", age: 24 @}        # alternate syntax
@end example

Symbols can also be used as enumeration values or to assign unique
values to constants:
@cindex symbols as enumeration values
@cindex symbols, unique constants

@example
status = :open  # :closed, ...

NORTH = :NORTH
SOUTH = :SOUTH
@end example

@anchor{value of symbol}
@subheading How can I access the value of a symbol?
@cindex symbol, access value of
@cindex @code{symbol.to_s}
@cindex @code{"#symbol"}
@cindex @code{eval}

To get the value of the variable corresponding to a symbol, you can
use @code{symbol.to_s} or @code{"#@{symbol@}"} to get the name of the
variable, and then @code{eval} that in the scope of the symbol to get
the variable’s contents:

@example
a = "This is the content of `a'"
b = eval("#@{:a@}")
a.object_id == b.object_id  # => true
@end example

You can also use:

@example
b = binding.local_variable_get(:a)
@end example
@cindex @code{binding.local_variable_get(:symbol)}

If your symbol corresponds to the name of a method, you can use
@code{send}:
@cindex @code{send}

@example
class Demo
  def hello
    "Hello, world"
  end
end

demo = Demo.new
demo.send(:hello)
@end example

Or you can use @code{Object#method} to return a corresponding @file{Method}
object, which you may then call:

@example
m = demo.method(:hello)  # => #<Method: Demo#hello>
m.call                   # => "Hello, world"
@end example

@anchor{loop}
@subheading Is @code{loop} a control structure?
@cindex @code{loop}
@cindex @file{Kernel}

Although @code{loop} looks like a control structure, it is actually a
method defined in @file{Kernel}.  The block which follows introduces a
new scope for local variables.

@anchor{post-test loop}
@subheading Ruby doesn’t have a post-test loop
@cindex @code{do @dots{} @} while}

Ruby does not have a @code{do @{ @dots{} @} while} construct, so how
can I implement loops that test the condition at the end?

Clemens Hintze says: ``You can use a combination of Ruby’s @code{begin
@dots{} end} and the @code{while} or @code{until} statement modifiers
to achieve the same effect:

@example
i = 0
begin
  puts "i = #@{i@}"
  i += 1
end until i > 4
@end example

@anchor{hash literal}
@subheading Why can’t I pass a hash literal to a method: @code{p @{@}}?

The @code{@{@}} is parsed as a block, not a @file{Hash} constructor.
You can force the @code{@{@}} to be treated as an expression by making
the fact that it's a parameter explicit: @code{p(@{@})}.

@anchor{pos val}
@subheading I can’t get @code{def pos=(val)} to work!

I have the following code, but I cannot use the method @code{pos = 1}.

@example
def pos=(val)
  @@pos = val
  puts @@pos
end
@end example

Methods with @kbd{=} appended must be called with an explicit receiver
(without the receiver, you are just assigning to a local
variable).  Invoke it as @code{self.pos = 1}.

@anchor{\1 and \\1}
@subheading What is the difference between @code{\1} and @code{\\1}?

They have the same meaning.  In a single quoted string, only @code{\'}
and @code{\\} are transformed and other combinations remain unchanged.

However, in a double quoted string, @code{"\1"} is the byte
@code{\001} (an octal bit pattern), while @code{"\\1"} is the two
character string containing a backslash and the character @code{"1"}.

@anchor{2 dots vs 3 dots}
@subheading What is the difference between @code{..} and @code{...}?
@cindex @code{..} vs. @code{...}

@code{..}  includes the right hand side in the range, while @code{...}
does not:

@example
(5..8).to_a   # => [5, 6, 7, 8]
(5...8).to_a  # => [5, 6, 7]
@end example

@anchor{or and}
@subheading What is the difference between @code{or} and @code{||}?
@cindex precedence of @code{or}

@code{p(nil || "Hello")} prints @code{"Hello"}, while @code{p(nil or
"Hello")} gives a parse error.  Why?

@code{or} has a very low precedence; @code{p( (nil or "Hello") )} will
work.

The precedence of @code{or} is for instance also lower than that of @code{=},
whereas @code{ || } has a higher precedence:

@example
foo = nil || "Hello"  # parsed as: foo = (nil || "Hello")
foo  # => "Hello"

# but perhaps surprisingly:

foo = nil or "Hello"  # parsed as: (foo = nil) or "Hello"
foo  # => nil
@end example

@code{or} (and similarly @code{and}) is best used, not for combining
boolean expressions, but for control flow, like in:

@example
do_something  or raise "some error!"
@end example

where @code{do_something} returns @code{false} or @code{nil} when an
error occurs.

@anchor{function pointers}
@subheading Does Ruby have function pointers?
@cindex function pointers

A @file{Proc} object generated by @code{Proc.new}, @code{proc}, or
@code{lambda} can be referenced from a variable, so that variable
could be said to be a function pointer.  You can also get references to
methods within a particular object instance using @code{object.method}.

@anchor{load vs require}
@subheading What is the difference between load and require?
@cindex @command{load}
@cindex @command{require}

@command{load} will load and execute a Ruby program (@file{*.rb}).

@command{require} loads Ruby programs as well, but will also load
@dfn{binary Ruby extension modules} (shared libraries or DLLs).  In
addition, @command{require} ensures that a feature is never loaded
more than once.
@cindex binary Ruby extension modules
@cindex shared libraries
@cindex DLLs

@anchor{exception handling}
@subheading Does Ruby have exception handling?
@cindex exception handling

Ruby supports a flexible exception handling scheme:

@example
begin
  statements which may raise exceptions
rescue [exception class names]
  statements when an exception occurred
rescue [exception class names]
  statements when an exception occurred
ensure
  statements that will always run
end
@end example
@cindex @code{rescue} clause
@cindex @code{ensure} clause

If an exception occurs in the @code{begin} clause, the @code{rescue}
clause with the matching exception name is executed.  The
@code{ensure} clause is executed whether an exception occurred or not.
@code{rescue} and @code{ensure} clauses may be omitted.

If no exception class is designated for a @code{rescue} clause,
@file{StandardError} exception is implied, and exceptions which are in
a @code{is_a?} relation to @file{StandardError} are captured.

This expression returns the value of the @code{begin} clause.

The latest exception is accessed by the global variable @code{$!} (and
so its type can be determined using @code{$!.type}).

@c _____________________________________

@node FAQ Methods
@subsubsection FAQ Methods

@subheading How does Ruby choose which method to invoke?
@cindex method, invoking 

@subheading Are @code{+, -, *, ...} operators?
@cindex operators?

@subheading Where are @code{++} and @code{--} ?
@cindex @code{++} and @code{--}

@subheading What is a singleton method?
@cindex singleton method

@subheading All these objects are fine, but does Ruby have any simple functions?
@cindex simple functions?

@subheading So where do all these function-like methods come from?
@cindex function-like methods, where from?

@subheading Can I access an object’s instance variables?
@cindex instance variables, accessing

@subheading What’s the difference between @code{private} and @code{protected}?
@cindex @code{private} vs @code{protected}

@subheading How can I change the visibility of a method?
@cindex visibility, changing

@subheading Can an identifier beginning with a capital letter be a method name?
@cindex identifier with capital letter, method?

@subheading Calling @code{super} gives an @file{ArgumentError}.
@cindex @code{super} gives @file{ArgumentError}
@cindex @file{ArgumentError}, after calling @code{super}

@subheading How can I call the method of the same name two levels up?
@cindex calling method 2 levels up

@subheading How can I invoke an original built-in method after redefining it?
@cindex invoking original method after redefinition

@subheading What is a destructive method?
@cindex destructive method
@cindex method, destructive

@subheading Why can destructive methods be dangerous?
@cindex dangerous, destructive methods

@subheading Can I return multiple values from a method?
@cindex return mutliple values

@c _____________________________________

@node FAQ Classes and Modules
@subsubsection FAQ Classes and Modules

@subheading Can a class definition be repeated?
@cindex class definition, repeating

@subheading Are there class variables?
@cindex class variables?

@subheading What is a class instance variable?
@cindex class instance variable?

@subheading What is the difference between class variables and class instance variables?
@cindex class variables vs class instance variables

@subheading Does Ruby have class methods?
@cindex class methods?

@subheading What is a singleton class?
@cindex singleton class?

@subheading What is a module function?
@cindex module function?

@subheading What is the difference between a class and a module?
@cindex class vs module

@subheading Can you subclass modules?
@cindex modules, subclassing?

@subheading Give me an example of a mixin
@cindex mixin example

@subheading Why are there two ways of defining class methods?
@cindex class methods, defining, 2 ways

@subheading What is the difference between include and extend?
@cindex @code{include} vs @code{extend}

@subheading What does @code{self} mean?
@cindex @code{self}, meaning

@c _____________________________________

@node FAQ Built-In Libraries
@subsubsection FAQ Built-In Libraries

@subheading What does @code{instance_methods(false)} return?
@cindex @code{instance_methods(false)}

@subheading How do random number seeds work?
@cindex random number seeds

@subheading I read a file and changed it, but the file on disk has not changed.
@cindex files, reading vs modifying

@subheading How can I process a file and update its contents?
@cindex file, process and update contents

@subheading I wrote a file, copied it, but the end of the copy seems to be lost.
@cindex file, copy

@subheading How can I get the line number in the current input file?
@cindex file, line number
@cindex line number of input file

@subheading How can I use @command{less} to display my program’s output?
@cindex program output, display using @command{less}

@subheading What happens to a @file{File} object which is no longer referenced?
@cindex @file{File} object, no reference

@subheading I feel uneasy if I don’t close a file.
@cindex files, closing

@subheading How can I sort files by their modification time?
@cindex files, sorting by modification time

@subheading How can I count the frequency of words in a file?
@cindex files, counting words

@subheading How can I sort strings in alphabetical order?
@cindex strings, sort alphabetically

@subheading How can I expand tabs to spaces?
@cindex tabs, expand into spaces

@subheading How can I escape a backslash in a regular expression?
@cindex regular expression, escaping a backslash

@subheading What is the difference between @code{sub} and @code{sub!}?
@cindex @code{sub} vs @code{sub!}

@subheading Where does @code{\Z} match?
@cindex @code{\Z}

@subheading What is the difference between @code{thread} and @code{fork}?
@cindex @code{thread} vs @code{fork}
@cindex @code{fork} vs @code{thread}

@subheading How can I use @file{Marshal}?
@cindex @file{Marshal}

@subheading How can I use @code{trap}?
@cindex @code{trap}

@c _____________________________________

@node FAQ Extension Library
@subsubsection FAQ Extension Library

@subheading How can I use Ruby interactively?
@cindex interactively use Ruby

@subheading Is there a debugger for Ruby?
@cindex debugger for Ruby

@subheading How can I use a library written in C from Ruby?
@cindex C library, use

@subheading Can I use @file{Tcl/Tk} in Ruby?
@cindex @file{Tcl/Tk}, use

@subheading @file{Tk} won't work. Why?
@cindex @file{Tk}, won't work

@subheading Can I use @command{gtk+} or @command{xforms} interfaces in Ruby?
@cindex @command{gtk+}
@cindex @command{xforms}

@subheading How can I do date arithmetic?
@cindex arithmetic

@c _____________________________________

@node FAQ Other Features
@subsubsection FAQ Other Features

@subheading What does a ? b : c mean?
@cindex ternary operator

@subheading How can I count the number of lines in a file?
@cindex file, count lines in

@subheading What do @code{MatchData#begin} and @code{MatchData#end} return?
@cindex @code{MatchData#begin} and @code{MatchData#end}

@subheading How can I sum the elements in an array?
@cindex array, sum elements in

@subheading How can I use continuations?
@cindex continuations, using


@c .....................................

@node Ruby Koans
@subsection Ruby Koans

@url{http://rubykoans.com/, Ruby Koans}

The Koans walk you along the path to enlightenment in order to learn Ruby.  The
goal is to learn the Ruby language, syntax, structure, and some common
functions and libraries.  We also teach you culture.  


@c .....................................

@node Why’s (Poignant) Guide to Ruby
@subsection Why’s (Poignant) Guide to Ruby

@url{http://mislav.uniqpath.com/poignant-guide/, Why's Guide to Ruby}

An unconventional but interesting book that will teach you Ruby through
stories, wit, and comics.  Originally created by @cite{why the lucky stiff},
this guide remains a classic for Ruby learners.


@c .....................................

@node Ruby in Twenty Minutes
@subsection Ruby in Twenty Minutes

@url{https://www.ruby-lang.org/en/documentation/quickstart/, Ruby in Twenty
Minutes}

A nice tutorial covering the basics of Ruby. From start to finish it shouldn’t
take you more than twenty minutes.  It makes the assumption that you already
have Ruby installed.  (If you do not have Ruby on your computer install it
before you get started.)

@c _____________________________________

@menu
* Interactive Ruby::
* Defining Methods::
* Altering Classes::
* Large Class Definition::
* Run MegaGreeter::
@end menu

@node Interactive Ruby
@subsubsection Interactive Ruby
@cindex @command{irb}

Ruby comes with a program that will show the results of any Ruby statements you
feed it.  Playing with Ruby code in interactive sessions like this is a terrific
way to learn the language.

Open up @file{IRB} (which stands for Interactive Ruby).

@example
? irb
@print{} irb(main):001:0>

irb(main):001:0> "Hello World"
@result{} "Hello World"
@print{} irb(main):002:0>
@end example

The second line is just IRB’s way of telling us the result of the last
expression it evaluated.  To print:

@example
irb(main):002:0> puts "Hello World"
@print{} Hello World
@result{} nil
@print{} irb(main):003:0>
@end example

@command{puts} is the basic command to print something out in Ruby.  But then
what’s the @samp{=> nil} bit?  That’s the result of the expression.
@command{puts} always returns @code{nil}, which is Ruby’s
absolutely-positively-nothing value.

@c _____________________________________

@node Defining Methods
@subsubsection Defining Methods
@cindex methods, defining
@cindex @code{def}

Define a method:

@example
irb(main):010:0> def hi
irb(main):011:1> puts "Hello World!"
irb(main):012:1> end
=> :hi
@end example

The code @samp{def hi} starts the definition of the method.  The next line is
the body of the method.  Finally, the last line end tells Ruby we’re done
defining the method.  Ruby’s response @print{} @code{=> :hi} tells us that it
knows we're done defining the method.

Try running that method a few times:

@example
irb(main):013:0> hi
Hello World!
=> nil
irb(main):014:0> hi()
Hello World!
=> nil
@end example
@cindex method, invoking
@cindex parentheses, optional

If the method doesn't take parameters that's all you need.  You can add empty
parentheses if you’d like, but they’re not needed.

@subsubheading Define Method with a Parameter
@cindex method parameters
@cindex parameters, methods

What if we want to say hello to one person, and not the whole world? Just
redefine @code{hi} to take a name as a parameter.

@example
irb(main):015:0> def hi(name)
irb(main):016:1> puts "Hello #@{name@}!"
irb(main):017:1> end
=> :hi
irb(main):018:0> hi("Matz")
Hello Matz!
=> nil
@end example
@cindex insert code into a string

What's the @code{#@{name@}} bit?  That's Ruby's way of inserting something into
a string.  The bit between the braces is turned into a string (if it isn’t one
already) and then substituted into the outer string at that point.  You can also
use this to make sure that someone's name is properly capitalized:

@example
irb(main):019:0> def hi(name = "World")
irb(main):020:1> puts "Hello #@{name.capitalize@}!"
irb(main):021:1> end
=> :hi
irb(main):022:0> hi "chris"
Hello Chris!
=> nil
irb(main):023:0> hi
Hello World!
=> nil
@end example
@cindex parentheses, optional

A couple of other tricks to spot here.  One is that we're calling the method
without parentheses again.  If it's obvious what you’re doing, the parentheses
are optional.  The other trick is the default parameter World. What this is
saying is ``If the name isn't supplied, use the default name of "World"''.

@subheading Create a Class
@cindex class definition
@cindex @code{class} keyword

What if we want a real greeter around, one that remembers your name and
welcomes you and treats you always with respect.  You might want to use an
object for that.  Let’s create a “Greeter” class.

@example
irb(main):024:0> class Greeter
irb(main):025:1>   def initialize(name = "World")
irb(main):026:2>     @@name = name
irb(main):027:2>   end
irb(main):028:1>   def say_hi
irb(main):029:2>     puts "Hi #@{@@name@}!"
irb(main):030:2>   end
irb(main):031:1>   def say_bye
irb(main):032:2>     puts "Bye #@{@@name@}, come back soon."
irb(main):033:2>   end
irb(main):034:1> end
=> :say_bye
@end example
@cindex instance variable

The new keyword here is @code{class}.  This defines a new class called
@file{Greeter} and a bunch of methods for that class.  Also notice
@code{@@name}.  This is an instance variable, and is available to all the
methods of the class.  As you can see it’s used by @code{say_hi} and
@code{say_bye}.

@subheading Create an Object
@cindex object, create from class definition

Now let’s create a greeter object and use it:

@example
irb(main):035:0> greeter = Greeter.new("Pat")
=> #<Greeter:0x16cac @@name="Pat">
irb(main):036:0> greeter.say_hi
Hi Pat!
=> nil
irb(main):037:0> greeter.say_bye
Bye Pat, come back soon.
=> nil
@end example

@subheading Instance Variables
@cindex instance variables, encapsulation

Instance variables are hidden away inside the object.  They’re not terribly
hidden, you see them whenever you inspect the object, and there are other ways
of accessing them, but Ruby uses the good object-oriented approach of keeping
data sort-of hidden away.

So what methods do exist for Greeter objects?

@samp{Object#instance_methods}
@cindex @code{Object#instance_methods}

@example
irb(main):039:0> Greeter.instance_methods
=> [:say_hi, :say_bye, :instance_of?, :public_send,
    :instance_variable_get, :instance_variable_set,
    :instance_variable_defined?, :remove_instance_variable,
    :private_methods, :kind_of?, :instance_variables, :tap,
    :is_a?, :extend, :define_singleton_method, :to_enum,
    :enum_for, :<=>, :===, :=~, :!~, :eql?, :respond_to?,
    :freeze, :inspect, :display, :send, :object_id, :to_s,
    :method, :public_method, :singleton_method, :nil?, :hash,
    :class, :singleton_class, :clone, :dup, :itself, :taint,
    :tainted?, :untaint, :untrust, :trust, :untrusted?, :methods,
    :protected_methods, :frozen?, :public_methods, :singleton_methods,
    :!, :==, :!=, :__send__, :equal?, :instance_eval, :instance_exec, :__id__]
 @end example

We only defined two methods.  What’s going on here?  Well this is all of the
methods for Greeter objects, a complete list, including ones defined by
ancestor classes.  If we want to just list methods defined for Greeter we can
tell it to not include ancestors by passing it the parameter false, meaning we
don’t want methods defined by ancestors.

@samp{Object#instance_methods(false)}

@example
irb(main):040:0> Greeter.instance_methods(false)
=> [:say_hi, :say_bye]
@end example

So let’s see which methods our greeter object responds to:

@samp{Object#respond_to?}
@cindex @code{Object#respond_to?}

@example
irb(main):041:0> greeter.respond_to?("name")
=> false
irb(main):042:0> greeter.respond_to?("say_hi")
=> true
irb(main):043:0> greeter.respond_to?("to_s")
=> true
@end example

So, it knows @code{say_hi}, and @code{to_s} (meaning convert something to a
string, a method that's defined by default for every object), but it doesn't
know @code{name}.

@c _____________________________________

@node Altering Classes
@subsubsection Altering Classes

But what if you want to be able to view or change the name?  Ruby provides an
easy way of providing access to an object's variables.

@samp{attr_accessor :name}
@cindex @code{attr_accessor :name}

@example
irb(main):044:0> class Greeter
irb(main):045:1>   attr_accessor :name
irb(main):046:1> end
=> nil
@end example

In Ruby, you can open a class up again and modify it.  The changes will be
present in any new objects you create and even available in existing objects of
that class.  So, let’s create a new object and play with its @code{@@name}
property.
@cindex classes, modifying

@example
irb(main):047:0> greeter = Greeter.new("Andy")
=> #<Greeter:0x3c9b0 @@name="Andy">
irb(main):048:0> greeter.respond_to?("name")
=> true
irb(main):049:0> greeter.respond_to?("name=")
=> true
irb(main):050:0> greeter.say_hi
Hi Andy!
=> nil
irb(main):051:0> greeter.name="Betty"
=> "Betty"
irb(main):052:0> greeter
=> #<Greeter:0x3c9b0 @@name="Betty">
irb(main):053:0> greeter.name
=> "Betty"
irb(main):054:0> greeter.say_hi
Hi Betty!
=> nil
@end example

Using @code{attr_accessor} defined two new methods for us, @code{name} to get
the value, and @code{name=} to set it.
@cindex @code{attr_accessor}, methods defined

@c _____________________________________

@node Large Class Definition
@subsubsection Large Class Definition

What if we had some kind of MegaGreeter that could either greet the world, one
person, or a whole list of people?  Let’s write this one in a file instead of
directly in the interactive Ruby interpreter IRB.

@need 400
@anchor{ri20min-rb}
@crindex @r{<@i{MegaGreeter---Initialize Method}>}, use
@crindex @r{<@i{MegaGreeter---say_hi Method}>}, use
@crindex @r{<@i{MegaGreeter---say_bye Method}>}, use
@crindex @r{<@i{MegaGreeter---Main Script}>}, use
@cdindex @r{@{@file{ri20min.rb}@}}, definition
@noindent
@r{@{@file{ri20min.rb}@}} @equiv{}
@example
#!/usr/bin/env ruby

class MegaGreeter
  attr_accessor :names

  @r{<@i{MegaGreeter---Initialize Method}>}
  @r{<@i{MegaGreeter---say_hi Method}>}
  @r{<@i{MegaGreeter---say_bye Method}>}
end

if __FILE__ == $0
  @r{<@i{MegaGreeter---Main Script}>}
end

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
The following table lists called chunk definition points.
@multitable @columnfractions .35 .65
@headitem Chunk name @tab First definition point
@item @r{<@i{MegaGreeter---Initialize Method}>} @tab See @ref{MegaGreeter---Initialize-Method}.
@item @r{<@i{MegaGreeter---Main Script}>} @tab See @ref{MegaGreeter---Main-Script}.
@item @r{<@i{MegaGreeter---say_bye Method}>} @tab See @ref{MegaGreeter---say-bye-Method}.
@item @r{<@i{MegaGreeter---say_hi Method}>} @tab See @ref{MegaGreeter---say-hi-Method}.
@end multitable
@iftex
@textfonts @rm
@end iftex

@subsubheading Initialize Method
@cindex @code{initialize} method

@need 400
@anchor{MegaGreeter---Initialize-Method}
@cdindex @r{<@i{MegaGreeter---Initialize Method}>}, definition
@noindent
@r{<@i{MegaGreeter---Initialize Method}>} @equiv{}
@example
  # Create the object
  def initialize(names = "World")
    @@names = names
  end
  
@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{@{@file{ri20min.rb}@}}; see its first definition at @ref{ri20min-rb}.
@iftex
@textfonts @rm
@end iftex

@subheading @code{say_hi} Method
@cindex respond to message, instance variable
@cindex @code{respond_to?} method

The @code{say_hi} method has become a bit more complicated.  It now looks at
the @code{@@names} instance variable to make decisions.  If it's @code{nil}, it
just prints out three dots.  No point greeting nobody, right?

If the @code{@@names} object responds to each, it is something that you can
iterate over, so iterate over it and greet each person in turn.  Finally, if
@code{@@names} is anything else, just let it get turned into a string
automatically and do the default greeting.

@need 400
@anchor{MegaGreeter---say-hi-Method}
@cdindex @r{<@i{MegaGreeter---say_hi Method}>}, definition
@noindent
@r{<@i{MegaGreeter---say_hi Method}>} @equiv{}
@example
  # Say hi to everybody
  def say_hi
    if @@names.nil?
      puts "..."
    elsif @@names.respond_to?("each")
      # @@names is a list of some kind, iterate!
      @@names.each do |name|
        puts "Hello #@{name@}!"
      end
    else
      puts "Hello #@{@@names@}!"
    end
  end
  
@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{@{@file{ri20min.rb}@}}; see its first definition at @ref{ri20min-rb}.
@iftex
@textfonts @rm
@end iftex

@subsubheading The Iterator
@cindex iterator
@cindex block
@cindex @code{yield}

Let’s look at that iterator in more depth:

@example
@@names.each do |name|
  puts "Hello #@{name@}!"
end
@end example

@code{each} is a method that accepts a block of code then runs that block of
code for every element in a list, and the bit between @code{do} and @code{end}
is just such a block.  A @dfn{block} is like an anonymous function or lambda.
The variable between pipe characters is the parameter for this block.

What happens here is that for every entry in a list, @code{name} is bound to
that list element, and then the expression puts @samp{"Hello #@{name@}!"} is
run with that name.

Internally, the @code{each} method will essentially call @code{yield}
@samp{"Albert"}, then @code{yield} @samp{"Brenda"} and then @code{yield}
@samp{"Charles"}, and so on.

@subsubheading The Real Power of Blocks

The real power of blocks is when dealing with things that are more complicated
than lists.  Beyond handling simple housekeeping details within the method, you
can also handle setup, teardown, and errors—all hidden away from the cares of
the user.

@subheading @code{say_bye} Method
@cindex @code{join} method, respond to

The @code{say_bye} method doesn't use @code{each}; instead it checks to see if
@code{@@names} @dfn{responds} to the @code{join} method, and if so, uses
it.  Otherwise, it just prints out the variable as a string.

@subsubheading Duck Typing
@cindex duck typing

This method of not caring about the actual type of a variable, just relying on
what methods it supports is known as @dfn{Duck Typing}, as in ``if it walks like
a duck and quacks like a duck@dots{}''.  The benefit of this is that it doesn't
unnecessarily restrict the types of variables that are supported.  If someone
comes up with a new kind of list class, as long as it implements the
@code{join} method with the same semantics as other lists, everything will work
as planned.

@need 400
@anchor{MegaGreeter---say-bye-Method}
@cdindex @r{<@i{MegaGreeter---say_bye Method}>}, definition
@noindent
@r{<@i{MegaGreeter---say_bye Method}>} @equiv{}
@example
  # Say bye to everybody
  def say_bye
    if @@names.nil?
      puts "..."
    elsif @@names.respond_to?("join")
      # Join the list elements with commas
      puts "Goodbye #@{@@names.join(", ")@}.  Come back soon!"
    else
      puts "Goodbye #@{@@names@}.  Come back soon!"
    end
  end
  
@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{@{@file{ri20min.rb}@}}; see its first definition at @ref{ri20min-rb}.
@iftex
@textfonts @rm
@end iftex

@subheading MegaGreeter Main Script
@cindex @code{__FILE__} special variable
@cindex script code

There’s one final trick to notice, and that’s the line:

@example
if __FILE__ == $0
@end example

@var{__FILE__} is the magic variable that contains the name of the current
file.  $0 is the name of the file used to start the program.  This check says
``If this is the main file being used@dots{}''  This allows a file to be used
as a library, and not to execute code in that context, but if the file is being
used as an executable, then execute that code.

@need 400
@anchor{MegaGreeter---Main-Script}
@cdindex @r{<@i{MegaGreeter---Main Script}>}, definition
@noindent
@r{<@i{MegaGreeter---Main Script}>} @equiv{}
@example
  mg = MegaGreeter.new
  mg.say_hi
  mg.say_bye

  # Change name to be "Zeke"
  mg.names = "Zeke"
  mg.say_hi
  mg.say_bye

  # Change the name to an array of names
  mg.names = ["Albert", "Brenda", "Charles",
              "Dave", "Engelbert"]
  mg.say_hi
  mg.say_bye

  # Change to nil
  mg.names = nil
  mg.say_hi
  mg.say_bye

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{@{@file{ri20min.rb}@}}; see its first definition at @ref{ri20min-rb}.
@iftex
@textfonts @rm
@end iftex

@c _____________________________________

@node Run MegaGreeter
@subsubsection Run MegaGreeter

Run the program @file{ri20min.rb} as @samp{ruby ri20min.rb}.  The output should
be:

@example
Hello World!
Goodbye World.  Come back soon!
Hello Zeke!
Goodbye Zeke.  Come back soon!
Hello Albert!
Hello Brenda!
Hello Charles!
Hello Dave!
Hello Engelbert!
Goodbye Albert, Brenda, Charles, Dave, Engelbert.  Come back soon!
...
...
@end example


@c .....................................

@node Ruby from Other Languages
@subsection Ruby from Other Languages

@url{https://www.ruby-lang.org/en/documentation/ruby-from-other-languages/,
Ruby from Other Languages}


@c .....................................

@node Learning Ruby
@subsection Learning Ruby

@url{http://rubylearning.com/, Learning Ruby}

A thorough collection of Ruby study notes for those who are new to the language
and in search of a solid introduction to Ruby’s concepts and constructs.


@c .....................................


@node Ruby Essentials
@subsection Ruby Essentials

@url{http://www.techotopia.com/index.php/Ruby_Essentials, Ruby Essentials}


@c .....................................

@node Learn to Program
@subsection Learn to Program

@url{http://pine.fm/LearnToProgram/, Learn to Program}

A wonderful little tutorial by Chris Pine for programming newbies.  If you don’t
know how to program, start here.


@c .....................................

@url{http://ruby.learncodethehardway.org/, Learn Ruby the Hard Way}








@c -----------------------------------------------------------------------------

@node Manuals
@section Manuals








@c -----------------------------------------------------------------------------

@node Reference Documentation
@section Reference Documentation








@c -----------------------------------------------------------------------------

@node Editors and IDEs
@section Editors and IDEs








@c -----------------------------------------------------------------------------

@node Further Reading
@section Further Reading








@c -----------------------------------------------------------------------------

@node The Makefile
@appendix The Makefile

@need 400
@anchor{Makefile}
@crindex @r{<@i{Makefile---Variable Definitions}>}, use
@crindex @r{<@i{Makefile---Default Rule}>}, use
@crindex @r{<@i{Makefile---TWJR Rules}>}, use
@crindex @r{<@i{Makefile---Clean Rules}>}, use
@cdindex @r{@{@file{Makefile}@}}, definition
@noindent
@r{@{@file{Makefile}@}} @equiv{}
@example
@r{<@i{Makefile---Variable Definitions}>}
@r{<@i{Makefile---Default Rule}>}
@r{<@i{Makefile---TWJR Rules}>}
@r{<@i{Makefile---Clean Rules}>}
@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
The following table lists called chunk definition points.
@multitable @columnfractions .35 .65
@headitem Chunk name @tab First definition point
@item @r{<@i{Makefile---Clean Rules}>} @tab See @ref{Makefile---Clean-Rules}.
@item @r{<@i{Makefile---Default Rule}>} @tab See @ref{Makefile---Default-Rule}.
@item @r{<@i{Makefile---TWJR Rules}>} @tab See @ref{Makefile---TWJR-Rules}.
@item @r{<@i{Makefile---Variable Definitions}>} @tab See @ref{Makefile---Variable-Definitions}.
@end multitable
@iftex
@textfonts @rm
@end iftex

@menu
* Makefile Variable Definitions::
* Makefile Default Rule::
* Makefile TWJR Rules::
* Makefile Clean Rules::
@end menu

@node Makefile Variable Definitions
@appendixsec Makefile Variable Definitions

@need 400
@anchor{Makefile---Variable-Definitions}
@cdindex @r{<@i{Makefile---Variable Definitions}>}, definition
@noindent
@r{<@i{Makefile---Variable Definitions}>} @equiv{}
@example
FILE := Ruby2_5
SHELL := /bin/bash

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{@{@file{Makefile}@}}; see its first definition at @ref{Makefile}.
@iftex
@textfonts @rm
@end iftex

@node Makefile Default Rule
@appendixsec Default Rule

@need 400
@anchor{Makefile---Default-Rule}
@cdindex @r{<@i{Makefile---Default Rule}>}, definition
@noindent
@r{<@i{Makefile---Default Rule}>} @equiv{}
@example
.PHONY : default TWJR TANGLE WEAVE TEXI PDF HTML
.PHONY : twjr tangle weave texi pdf html
default : TEXI PDF HTML

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{@{@file{Makefile}@}}; see its first definition at @ref{Makefile}.
@iftex
@textfonts @rm
@end iftex

@node Makefile TWJR Rules
@appendixsec TWJR Rules

@need 400
@anchor{Makefile---TWJR-Rules}
@cdindex @r{<@i{Makefile---TWJR Rules}>}, definition
@noindent
@r{<@i{Makefile---TWJR Rules}>} @equiv{}
@example
TWJR : twjr
twjr : tangle weave

TANGLE : tangle
tangle : $(FILE).twjr
    jrtangle $(FILE).twjr

WEAVE : weave
weave : TEXI
TEXI  : texi
texi  : $(FILE).texi

$(FILE).texi : $(FILE).twjr
    jrweave $(FILE).twjr > $(FILE).texi

PDF : pdf
pdf : $(FILE).pdf
$(FILE).pdf : $(FILE).texi
    pdftexi2dvi $(FILE).texi
    make distclean
    
HTML : html
html : $(FILE)/
$(FILE)/ : $(FILE).texi
    makeinfo --html $(FILE).texi

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{@{@file{Makefile}@}}; see its first definition at @ref{Makefile}.
@iftex
@textfonts @rm
@end iftex

@node Makefile Clean Rules
@appendixsec Clean Rules

@need 400
@anchor{Makefile---Clean-Rules}
@cdindex @r{<@i{Makefile---Clean Rules}>}, definition
@noindent
@r{<@i{Makefile---Clean Rules}>} @equiv{}
@example
.PHONY : clean distclean veryclean worldclean
clean :
    rm -f *~ \#*\#

distclean : clean
    rm -f *.@{aux,log,toc,cp,cps@}

veryclean : clean
    for file in *; do [[ $$file =~ $(FILE)|Makefile ]] && : || rm -vrf $$file ; done;

worldclean : veryclean
    rm -fr $(FILE).@{texi,info,pdf@} $(FILE)/

@end example
@iftex
@smallfonts @rm
@end iftex

@noindent
This chunk is called by @r{@{@file{Makefile}@}}; see its first definition at @ref{Makefile}.
@iftex
@textfonts @rm
@end iftex

@node Code Chunk Summaries
@appendix Code Chunk Summaries

This @value{APPENDIX} presents alphabetical lists of all the file definitions,
the code chunk definitions, and the code chunk references.

@menu
* File Definitions::
* Code Chunk Definitions::
* Code Chunk References::
@end menu

@node File Definitions
@appendixsec Source File Definitions

@table @asis
@item @r{@{@file{Makefile}@}}
This chunk is defined in
@ref{Makefile}.
@item @r{@{@file{ri20min.rb}@}}
This chunk is defined in
@ref{ri20min-rb}.
@end table

@node Code Chunk Definitions
@appendixsec Code Chunk Definitions

@table @asis
@item @r{<@i{Makefile---Clean Rules}>}
This chunk is defined in
@ref{Makefile---Clean-Rules}.
@item @r{<@i{Makefile---Default Rule}>}
This chunk is defined in
@ref{Makefile---Default-Rule}.
@item @r{<@i{Makefile---TWJR Rules}>}
This chunk is defined in
@ref{Makefile---TWJR-Rules}.
@item @r{<@i{Makefile---Variable Definitions}>}
This chunk is defined in
@ref{Makefile---Variable-Definitions}.
@item @r{<@i{MegaGreeter---Initialize Method}>}
This chunk is defined in
@ref{MegaGreeter---Initialize-Method}.
@item @r{<@i{MegaGreeter---Main Script}>}
This chunk is defined in
@ref{MegaGreeter---Main-Script}.
@item @r{<@i{MegaGreeter---say_bye Method}>}
This chunk is defined in
@ref{MegaGreeter---say-bye-Method}.
@item @r{<@i{MegaGreeter---say_hi Method}>}
This chunk is defined in
@ref{MegaGreeter---say-hi-Method}.
@end table

@node Code Chunk References
@appendixsec Code Chunk References

@table @asis
@item @r{<@i{Makefile---Clean Rules}>}

@noindent
This chunk is called by @r{@{@file{Makefile}@}}; see its first definition at @ref{Makefile}.
@item @r{<@i{Makefile---Default Rule}>}

@noindent
This chunk is called by @r{@{@file{Makefile}@}}; see its first definition at @ref{Makefile}.
@item @r{<@i{Makefile---TWJR Rules}>}

@noindent
This chunk is called by @r{@{@file{Makefile}@}}; see its first definition at @ref{Makefile}.
@item @r{<@i{Makefile---Variable Definitions}>}

@noindent
This chunk is called by @r{@{@file{Makefile}@}}; see its first definition at @ref{Makefile}.
@item @r{<@i{MegaGreeter---Initialize Method}>}

@noindent
This chunk is called by @r{@{@file{ri20min.rb}@}}; see its first definition at @ref{ri20min-rb}.
@item @r{<@i{MegaGreeter---Main Script}>}

@noindent
This chunk is called by @r{@{@file{ri20min.rb}@}}; see its first definition at @ref{ri20min-rb}.
@item @r{<@i{MegaGreeter---say_bye Method}>}

@noindent
This chunk is called by @r{@{@file{ri20min.rb}@}}; see its first definition at @ref{ri20min-rb}.
@item @r{<@i{MegaGreeter---say_hi Method}>}

@noindent
This chunk is called by @r{@{@file{ri20min.rb}@}}; see its first definition at @ref{ri20min-rb}.
@end table

@node Bibliography
@unnumbered Bibliography

@node Concept Index
@unnumbered Index

@printindex cp

@bye

TODO:
