This is Ruby2_5.info, produced by makeinfo version 6.5 from
Ruby2_5.texi.

Copyright (C) 2018
wlharvey4
All Rights Reserved.

   The Ruby2.5 Information and Documentation program is copyright (C)
2018 by wlharvey4.  It is published under the conditions of the GNU
General Public License, version 3.


   This is Edition 0.5a of 'Ruby 2.5 Information and Documentation'.


File: Ruby2_5.info,  Node: Beginner Core Topics,  Prev: Methods API,  Up: API Documentation

A.1.4 Beginner Core Topics
--------------------------

Syntax
     <http://ruby-doc.org/core-2.5.1/doc/syntax_rdoc.html>
Control Expressions
     <http://ruby-doc.org/core-2.5.1/doc/syntax/control_expressions_rdoc.html>
Assignment
     <http://ruby-doc.org/core-2.5.1/doc/syntax/assignment_rdoc.html>
Methods
     <http://ruby-doc.org/core-2.5.1/doc/syntax/methods_rdoc.html>
Modules and Classes
     <http://ruby-doc.org/core-2.5.1/doc/syntax/modules_and_classes_rdoc.html>
Operator Precedence
     <http://ruby-doc.org/core-2.5.1/doc/syntax/precedence_rdoc.html>

Table A.4: Table of Core Topics


File: Ruby2_5.info,  Node: Resources,  Next: Utility Programs,  Prev: Ruby-Doc,  Up: Top

Appendix B Resources
********************

Here are some additional resources that I have found helpful.

* Menu:

* Programming Ruby by Hulan::


File: Ruby2_5.info,  Node: Programming Ruby by Hulan,  Up: Resources

B.1 Programming Ruby by Hulan
=============================

'Programming Ruby' (See item 'ProgrammingRuby' in *note Bibliography:
ProgrammingRuby.)

By Marek Hulán, Marek Jelen, Ivan Nečas, Version 0.2 September 25,
2017.

* Menu:

* Ruby Basics::
* Advanced Ruby::
* Ruby Testing::


File: Ruby2_5.info,  Node: Ruby Basics,  Next: Advanced Ruby,  Up: Programming Ruby by Hulan

B.1.1 Ruby Basics
-----------------

* Menu:

* Installation - Running - About::
* Language Conventions::
* Data Types::
* Methods and Variables::
* Conditions::
* Logical Operators::
* Regular Expressions::
* Loops::
* Methods::
* Using Code From Other Files::
* Blocks::
* Objects::
* Inheritance::
* Modules::
* Method Access::
* Duck Typing::
* Exceptions::


File: Ruby2_5.info,  Node: Installation - Running - About,  Next: Language Conventions,  Up: Ruby Basics

B.1.1.1 Installation - Running - About
......................................

Installation on Mac OS
----------------------

The simplest way to install Ruby on macOS is to use homebrew package
manager:

     $ brew install ruby

   In case there is a need to have multiple installations 'rbenv'
(*note rbenv::) is a good tool to use.  Another popular tool is called
'rvm' (*note RVM:: but nowadays they do too much magic and we
recommend using 'rbenv' instead.

Running Ruby
------------

Usually you put 'ruby' and related commands on 'PATH' so you do not
need to always specify the whole path to the executable.  With tools
like 'rbenv' this is done for you.

     $ ruby script.rb

Interactive Ruby
................

Ruby comes with an interactive interpreter called 'irb' (*note
Interactive Ruby::), which allows you to enter commands and see
results instantly.

     $ irb

About Ruby
----------

Interpreted
     The Ruby code is interpreted when the script is load, there is no
     compile phase.
Universal
     Ruby can be used for writing scripts, one-liners, web
     applications and even for mobile and desktop applications.
Fully Object oriented
     In Ruby everything is an object and you send messages to those
     objects.
Everything Is An Expression
     Everything command in Ruby has a return value.
Atomic memory management
MRI
     'MRI' is the Ruby reference implementation, with several other
     implementations like 'JRuby', 'Rubinius', 'IronRuby' or 'MagLev'.
     As well, there is ISO standard implemented in 'mruby'.
Strongly Typed
     There are some implicit conversions (e.g.  every object has
     'to_s' method to provide string representation) but in most cases
     in case you try to operate on different types Ruby will complain,
     unless such operation is explicitly provided.
Dynamically Typed
     The type of a variable is defined by the value assigned to that
     variable.  There is no explicit type information in the code.
What is written in Ruby?
        * programming languages: Ruby ('Rubinius'),
        * compilers ('LessJS')
        * web applications: Github, Gitlab, Redmine, BaseCamp
        * devops tools: Puppet/Chef/Vagrant
        * cloud platforms: OpenShift (v2)
        * cloud management: Foreman, ManageIQ
        * VIM/Emacs scripts
        * static pages generators - 'Jekyll'
        * programming tools


File: Ruby2_5.info,  Node: Language Conventions,  Next: Data Types,  Prev: Installation - Running - About,  Up: Ruby Basics

B.1.1.2 Language Conventions
............................

Class Names
...........

Class names are in "CamelCase"

File Names
..........

File names reflect class names in "snake_case" format

Method Names
............

method names are also "snake_case"

Constants
.........

constants are in UPPER_SNAKE_CASE

Indentation
...........

indent by 2 spaces

Boolean Values
..............

methods returning boolean values end with '?' (question mark)

Mutation
--------

methods mutating state end with '!' (exclamation mark)


File: Ruby2_5.info,  Node: Data Types,  Next: Methods and Variables,  Prev: Language Conventions,  Up: Ruby Basics

B.1.1.3 Data Types
..................

In Ruby everything is an object, including arrays or numbers.  However
there are special syntax shorthands to create instances of special
classes.

Strings
-------

String are create by quoting the characters.

Numbers
-------

Ruby has two basic number classes 'Fixnum' and 'Float'.

Empty Value 'nil'
-----------------

Special value that represents "nothing" is 'nil'.

   In a boolean expression, 'nil' is considered 'false', i.e.  it’s
only of two possible values that are not considered 'true'.

Boolean
-------

There is either 'true' or 'false'.

Arrays
------

An "Array" is an ordered sequence of values.  There are no
restrictions on what types can be in a single array.

     ["a", 1, true] # => ["a", 1, true]

Hashes
------

A "Hash" is a structure that maps keys to a values.

     {"a" => true, "b": false} # => {"a"=>true, :b=>false}

Hash Styles
...........

There are two approaches how to write the mapping, either "rocket"
style: 'key => value' or "json" style: 'key: value'.

'Rocket' Style Preferred
........................

However with the 'json' style the value is converted to symbol, so in
case you need to use String or some other type, or get the name of the
key from a variable, you need to use the 'rocket' style.  Several
well-known coding guidelines recommend (and enforce) using 'rockets'
everywhere.

Symbols
-------

"Symbol" is a keyword.  It always maps to the same object instance.


File: Ruby2_5.info,  Node: Methods and Variables,  Next: Conditions,  Prev: Data Types,  Up: Ruby Basics

B.1.1.4 Methods and Variables
.............................

Methods
-------

Methods are called using the "dot" operator.

   Operators are actually methods.

     3 + 3 # => 6
     3.+(3) # => 6

     [1,2][0] #=> 1
     [1,2].[](0) # => 1

Variables
---------

Global
     "Global variables" are prefixed with '$'.

Class
     Classes have "class variables" prefixed with '@@'.

     You should prefer '@instance_variables' in class-level methods,
     as they have more predicatable behavior.

Instance
     Objects have "instance variables" prefixed with '@'.

Local
     "Local variables" are simple identifiers with no prefix.

Constant
     "Constants" are in all UPPER_CASE.


File: Ruby2_5.info,  Node: Conditions,  Next: Logical Operators,  Prev: Methods and Variables,  Up: Ruby Basics

B.1.1.5 Conditions
..................

Everything is 'true' except 'false' (and 'nil').

   'if' and 'unless' ('if''s negative)

Modifier Statements
-------------------

Ruby has inline method of using conditionals called "modifier
statements".

     puts "Hello" if true
     puts "Hello" unless false

Ternary Operator
----------------

'experssion ? 'was evaluated true' : 'was evaluated false''

Case Statement
--------------

Another way to do conditions is to use 'case' statement.

     case input
       when 'q', 'e'
         quit
       when 'f'
         format
       else
         help
     end

   'case' statement can also check on a variable's 'class'.

     case var
       when String
         "it's string"
       when Class
         "it's class"
       when Number
         "it's number"
     end

   Another way to use the 'case' statement is to use it as 'if' and
'elsif'.

     case
       when a == "a"
         "a equals a"
       when b == "b"
         "b equals b"
     end


File: Ruby2_5.info,  Node: Logical Operators,  Next: Regular Expressions,  Prev: Conditions,  Up: Ruby Basics

B.1.1.6 Logical Operators
.........................

Logical Expressions
-------------------

and
     '&&' 'and'

or
     '||' 'or'

not
     '!'  'not'

Comparison Operators
--------------------

equal
     '=='

not equal
     '!='

less than
     '<'

greater than
     '>'

less than or equal
     '<='

greater than or equal
     '>='

regular expression match
     '=~'


File: Ruby2_5.info,  Node: Regular Expressions,  Next: Loops,  Prev: Logical Operators,  Up: Ruby Basics

B.1.1.7 Regular Expressions
...........................

Regular expression literals are enclosed between '/.../':
'string =~ /(.)*:(.)+/ # sets $1 a $2'.

   String has a 'match' method:
'data = string.match(/^(.):(\d+)$/) # sets data[1] and data[2]'.


File: Ruby2_5.info,  Node: Loops,  Next: Methods,  Prev: Regular Expressions,  Up: Ruby Basics

B.1.1.8 Loops
.............

'while'
     repeats as long as the condition is true.

          while a < b
            a += 1
          end

          # do loop at least once
          begin
            a += 1
          end while a < b

          a += 1 while a < b # inline loop

'until'
     repeats as long as a condition is false

          until a > b
            a += 1
          end


File: Ruby2_5.info,  Node: Methods,  Next: Using Code From Other Files,  Prev: Loops,  Up: Ruby Basics

B.1.1.9 Methods
...............

Method Return Value
-------------------

Methods always return a value.  If a method does not explicitly return
using the 'return' keyword, then the return value is the value of the
last expression.

Method Arguments
----------------

     def mth1(a, b=1) # argument default value
     end

     def meth2(*args) # accepts multiple arguments in Array args
     end

     def meth3(a, b, *args) # must have at least 2 arguments
     end


File: Ruby2_5.info,  Node: Using Code From Other Files,  Next: Blocks,  Prev: Methods,  Up: Ruby Basics

B.1.1.10 Using Code From Other Files
....................................

'require'
     Loads code from another file.  Ruby keeps track of required files
     (in the '$"' global variable) and skips loading files that would
     be loaded 2nd time.

     Files are looked up using Ruby’s "load path", which is
     represented using an array in '$LOAD_PATH' and '$:'.

'load'
     loads code from another file, but does not keep track of loaded
     files.

Allowed Extensions
------------------

The following file extensions can be omitted:

   'rb, so, o, dll, bundle, jar'


File: Ruby2_5.info,  Node: Blocks,  Next: Objects,  Prev: Using Code From Other Files,  Up: Ruby Basics

B.1.1.11 Blocks
...............

Blocks are not executed when defined, but have to be called through
the 'call' method (though the calling of the 'call' method is most of
the time hidden).

   Arrays have a method called 'each' that accepts a block and calls
the block for every single element in the array.

     arr = [1,2,3,4]
     arr.each do |el|
       puts el
     end

     # alternative syntax
     arr.each { |el| puts el }


Block Scope
-----------

Blocks have access to their enclosing environment, and create their
own scope internally.

Yield Statement
---------------

Any method can accept a block and call it using 'yield'.

     def mth
       return nil unless block_given?
       yield
     end

   This method will return 'nil' if no block was given or will call
the block without any argument and the return value of the block will
be return from the method.

Block Arguments Using Prefix '&'
--------------------------------

Method may also accept blocks using a named argument which is prefixed
by '&'.

     def mth(num, &block)
       block.call(num)
     end


File: Ruby2_5.info,  Node: Objects,  Next: Inheritance,  Prev: Blocks,  Up: Ruby Basics

B.1.1.12 Objects
................

Everything is an object.  Even a class is an instance of 'Class'.
Objects can have methods ('def') and instance variables ('@').

Attributes
----------

To allow instance variables to be accessible from outside their
defining class, define them using "attributes".

     class Hello
       attr_reader :one
       attr_writer :two
       attr_accessor :three
     end


File: Ruby2_5.info,  Node: Inheritance,  Next: Modules,  Prev: Objects,  Up: Ruby Basics

B.1.1.13 Inheritance
....................

Ruby has single "object inheritance".  All methods, including
constructors, are inherited.  Methods can be "overridden" in children.
'super' keyword is used to call the overridden method.

     class A
       def a
         "hello"
       end
     end

     puts A.new.a # => hello

     class B < A
     end

     puts B.new.a # => hello

     class C < A
       def a
         super + " world"
       end
     end

     puts C.new.a # => hello world

Class Variables
---------------

Class variables should not be used "because of some pitfalls in their
inheritance."


File: Ruby2_5.info,  Node: Modules,  Next: Method Access,  Prev: Inheritance,  Up: Ruby Basics

B.1.1.14 Modules
................

"Modules" are a way to organize your classes in a similar fashion to
namespaces.  Classes can be included into modules or into other
classes.

     class A
       class B
       end
     end

     module Some
       class Thing
       end
     end

Mixins
------

Modules are used as "mixins" to provide a form of multiple
inheritance.  When module is included in a class, all methods defined
in that module are available in the class as instance methods.

     module Helper
       def something
       end
     end

     class An
       include Helper
     end

     A.new.something

   When a module is used with 'extend', the methods are included as
class methods.

     module Helper
       def something
       end
     end

     class A
       extend Helper
     end

     A.something


File: Ruby2_5.info,  Node: Method Access,  Next: Duck Typing,  Prev: Modules,  Up: Ruby Basics

B.1.1.15 Method Access
......................

By default methods are 'public', but methods can be made explicitly
'protected' or 'private'.

     class A
       def public_method
       end

       protected

       def protected_method
       end

       private

       def private_method
       end
     end


File: Ruby2_5.info,  Node: Duck Typing,  Next: Exceptions,  Prev: Method Access,  Up: Ruby Basics

B.1.1.16 Duck Typing
....................

"Duck typing" is coding by behavior rather than identify.

     class Hunter
       def shoot(animal)
         animal.respond_to?(:quack) && bang!
       end
     end

   If an animal "quacks", then it will be shot like a duck.


File: Ruby2_5.info,  Node: Exceptions,  Prev: Duck Typing,  Up: Ruby Basics

B.1.1.17 Exceptions
...................

"Exceptions" represent a special state in the execution of a program.
When an 'exception' is raised, it will "bubble up" (rise through) the
stack until it is "caught".

'raise' And 'rescue' Exceptions
-------------------------------

Exceptions are explicitly raised using the 'raise' keyword: 'raise
"This is not expected"'.

   On the other hand when an exception needs to be caught, a code
block can be extended with a 'rescue' statement that is called when an
exception is caught and optionally with an 'ensure' block that is
called after both exceptional and non-exceptional states.  Unless an
exception class is specified explicitly after the 'rescue' keyword,
the 'StandardError' class and it’s ancestors are rescued.

     begin
       raise "This is not expected"
     rescue => e
       puts e.message
     ensure
       puts "always"
     end

Inherit From 'StandardError'
----------------------------

Don’t inherit directly from an 'Exception' class; instead, use
'StandardError'.  The direct descendants of 'Exception' are usually
exceptions one doesn't want to rescue from, such as 'SystemExit' or
'NoMemoryError'.


File: Ruby2_5.info,  Node: Advanced Ruby,  Next: Ruby Testing,  Prev: Ruby Basics,  Up: Programming Ruby by Hulan

B.1.2 Advanced Ruby
-------------------

* Menu:

* Return Values::
* Context::
* Class::
* Advanced Methods::
* Advanced Objects::


File: Ruby2_5.info,  Node: Return Values,  Next: Context,  Up: Advanced Ruby

B.1.2.1 Return Values
.....................

In Ruby everything is an expression -- it executes and returns some
value, the result of it’s execution.  For example:

     5 + 2        # => 7

     "hello"      # => "hello"

     "a" if true  # => "a"
     "a" if false # => nil

     class A; end # => ???

   What is the result of the last expression?  It could be obvious --
"we defined class A". But not really.  The fact we have defined a
class is only an effect of the expression; not the result.  A "result"
is a value returned from the expression itself.

     class A; end # => nil

   The result is simply 'nil'.  It’s similar to the expression '"a" if
false # => nil' above.  The condition is evaluated as 'false' and
there is no 'else' so there is nothing to return, so the result is
'nil'.  In this case a class was defined, but there was nothing
returned, as the body of the class was empty, so the result is 'nil'.
Let’s modify the example to return a value:

     class A; 1; end          # => 1
     class A; 1; "hello"; end # => "hello"
     class A; self; end       # => A

   It was said that "the return value of a method is the result of
it’s last expression."  It’s obvious that in this example it’s very
similar.  It can be generalized for all structures, even though
sometimes it may not be obvious on first sight:

     The return value is the result of the last expression.


File: Ruby2_5.info,  Node: Context,  Next: Class,  Prev: Return Values,  Up: Advanced Ruby

B.1.2.2 Context
...............

Context: Current Context
------------------------

In Ruby everything is executed in some context.  This "context" is
known as the "current object" and is always represented by 'self'.

     self.class # => Object

     class B
       self
     end
     # => Class

     class A
       def call
         self
       end
     end

     A.new.call # => #<A:some number>


File: Ruby2_5.info,  Node: Class,  Next: Advanced Methods,  Prev: Context,  Up: Advanced Ruby

B.1.2.3 Class
.............

Open Classes: Monkey Patching
-----------------------------

Unlike most languages, Ruby classes are open for modifications.
Developers can modify behavior of classes defined by frameworks or
Ruby itself.  This technique is called "monkey patching".

     class Clazz
       def call
         "A"
       end
     end

     class Clazz
       def call
         "B"
       end
     end

     Clazz.new.call # => "B"

What Is A Class?
----------------

Let’s start with a definition:

     Classes are instances of class 'Class'.

   Everything in Ruby is an object ... even a class.

     class A
       def self.call
         "A"
       end
     end

     B = Class.new
     def B.call
       "called"
     end

     A.call      # => "called"
     B.call      # => "called"

     A.object_id # => [some number]
     B.object_id # => [some number]

     A.class     # => Class
     B.class     # => Class

   Class 'A' was defined using the 'class' keyword and then a class
method was defined.  Class 'B' was created by creating a new instance
of the 'Class' class and the object was assigned to constant 'B'.  As
both of those classes are objects, it’s possible to check their class
and the ID of the objects.

Inheritance
-----------

In Ruby classes can inherit from each other, though Ruby has only
single-class inheritance -- it’s not possible to inherit from multiple
classes, only from one.

     class A
       def call
         "called"
       end
     end

     class B < A
     end

     C = Class.new(B)

     B.new.call # => "called"
     C.new.call # => "called"

Mixins
------

When some class needs to inherit from multiple classes, it’s not
possible, but Ruby provides a workaround through mixins.  It is
possible to include many Modules into a class; the methods defined in
those modules will become part of the lookup path as if they were
defined in the class.

     module Methods
       def call
         "called"
       end
     end

     class A
       include Methods
     end

     A.new.call # => "called"

Class Introspections
--------------------

Ruby allows many introspections on classes and many other objects.

'name'
......

There is method 'name' defined on a class that returns the name of the
current class.

     Array.name    # => "Array"

     [].class.name # => "Array"

'methods'
.........

It’s possible to list methods of an object:

     class A
       def call
       end
     end

     A.new.methods # => array of methods


File: Ruby2_5.info,  Node: Advanced Methods,  Next: Advanced Objects,  Prev: Class,  Up: Advanced Ruby

B.1.2.4 Advanced Methods
........................

As everything else in Ruby even methods are instances of class
'Method'.

Extracting Methods
------------------

Sometimes it is useful to pass around only a method instead of the
whole object.  Ruby allows extraction of a method for later usege.

     class A
       def call(arg1)
         self
       end
     end

     meth = A.new.method(:call) # => #<Method: A#call>

   In the example method 'call' from class 'A' was "extracted".  The
method is still bound to the instance of class 'A' and the method will
be evaluated in the context of the object ('self' will be the
instance).  The method can be executed by calling the 'call' method
with appropriate arguments.

     meth.call("some string") # => #<A:some_number>

Checking Method Existence
-------------------------

Because Ruby is a very dynamic language, it’s not possible to know in
advance what kind of arguments will be received.  In most cases the
developer should not care what class the argument is, but whether the
argument responds to a method.

Duck Typing
-----------

     Do not care what the object is; only care whether it behaves as
     expected.

   This technique is called "Duck typing."

     class A
       def call
       end
     end

     a = A.new
     a.respond_to?(:call) # => true
     a.respond_to?(:wtf)  # => false

Dynamic Method Calling
----------------------

Let’s define a class with a method, create an instance and call the
method.

     class A
       def call
       end
     end

     A.new.call

   The method is called, but the develeoper had to know the name of
the method beforehand ... in the time the code is written.  What if
the method name is not known and there has to be some method called.
Do not be surprised; this is a very common use-case in Ruby.

     class A
       def call(arg1)
       end
     end

     a = A.new
     a.call("some string")
     a.send(:call, "some string")

   Well, not so identical.  When you use the 'send' method on an
object, you effectively bypass the access modifiers.

Access Modifiers
----------------

Ruby has three access levels; 'public' is default, 'protected' and
'private'.

     class A
       def public_method
       end

       protected

       def protected_method
       end

       private

       def private_method
       end

     end

     a = A.new
     a.public_method           # => nil
     a.protected_method        # => NoMethodError: protected method `protected_method' called ...
     a.private_method          # => NoMethodError: private method `private_method' called ...
     a.send(:public_method)    # => nil
     a.send(:protected_method) # => nil
     a.send(:private_method)   # => nil

Defining methods programmatically
---------------------------------

The way to define methods using the 'def' keyword shown before is not
the only one.  It’s also possible to define a method in a more dynamic
way.  It makes sense.  We can inspect methods of an object, we can
extract methods of an object and also call methods of an object in a
dynamic way.  To dynamically define a method use the 'define_method'
method of a class.

   However, 'Class.define_method' is private.  To get around this
obstacle, it’s possible to use the 'send' method and bypass the access
modifier.

     class A
     end

     a = A.new

     logic = Proc.new do
       "data"
     end

     A.send(:define_method, :some_method_name, logic)
     a.some_method_name # => "data"

Missing Methods
---------------

Every object can define special 'method_missing' method that is called
whenever there is a call to undefined method on that object.

     class A
       def method_missing(name, *args, &block)
         puts "method #{name} called with args #{args.inspect}"
       end
     end

     A.new.something("a") # => method something called with args ["a"]


File: Ruby2_5.info,  Node: Advanced Objects,  Prev: Advanced Methods,  Up: Advanced Ruby

B.1.2.5 Advanced Objects
........................

Objects complement classes:

     Objects define state while classes define behavior.

   Behavior is defined as a class; then an object is created for that
class to hold the state.  Every object has to be of some class.

Creating A New Object
---------------------

To create an object of a class there is the 'new' method on respective
class.

     class Dog
     end

     dog = Dog.new

Defining Methods
----------------

In the example above many methods were defined in simple or more fancy
styles.  But let’s get back to the core and try to define a method.

     class A
       def call
       end
     end

   Here we use 'def' keyword to define a method call.  Where will
'def' define the method?  The answer is simple and complex.

     'def' defines methods into the nearest class.

   So in the previous example the nearest class is 'A'.  That is
obvious from next example where the current context is returned and
inspected:

     var = class A; self; end

     var.class # => Class
     var.name  # => "A"

   OK, so the the current context is a Class and thus it is obvious
that the nearest class is this class.  Now let’s try to define a class
method:

     class A
       def self.call
         "string"
       end
     end

   Where will Ruby define the method now??  It is a bit more
complicated.  To understand this, we have to explain something else
first.

Eigenclass
----------

To understand how Ruby works, we have to understand what
"eigenclasses" are.  Let’s start with simple definition:

     Every object in Ruby has it's own eigenclass => an instance of
     Class

   Why is this important?  Because, while the eigenclasses are
basically invisible to developers, they take an important part in
method lookups.

   When Ruby is trying to look up a method, it follows a basic chain
(will be described a bit later).  What is important is that before the
class the object is linked to, there is the one more class -- the
object’s eigenclass.  Every single object in Ruby has it’s own
eigenclass and because Classes are objects as well, eigenclasses has
their own eigenclasses as well.

     The closest class to an object is not it's class but it's
     eigenclass.

   Back to the example we were talking about:

     class A
       def self.call
         "string"
       end
     end

   To see it more clearly we can rewrite this example identically as:

     class A
     end

     def A.call
       "string"
     end

   These two expressions are identical.  To understand why it is
important to understand this:

     class A
     end

     scope = class A
       self
     end

     A == scope # => true

   But back to the original question ... where is the method going to
be defined?  In the context of the instance of the class 'A'.  The
important part in the above statement is the phrase _instance of_.
What is the closest class to an instance (object)?  As stated above
it’s its eigenclass.  Now you might have guessed that from
implementation point of view:

     There are no class methods in Ruby

   *What would be called a class method is only an instance method
defined on the eigenclass associated with object representing the
class.*

   So eigenclass is some stealth object that we can not see?  Not
really.  Ruby has ways to access eigenclasses.

     eigenclass = class << some_object
       self
     end

     eigenclass = some_object.singleton_class

   Now that we can access eigenclasses, let’s see how we could define
"class methods" (instance methods in the eigenclass).

     class A
       def self.call
         "called"
       end
     end

     class B
       class << self
         def call
           "called"
         end
       end
     end

     D = Class.new
     class << D
       def call
         "called"
       end
     end

   All those examples are identical.

Method Lookups
--------------

Now that you know where and how are methods defined, lets see how
methods are looked up.  Let’s see how the class hierarchy looks for
class:

     SomeClass -> Class -> Module -> Object -> BasicObject

   and for objects

     object -> SomeClass -> Object -> BasicObject

   Though in reality it is a bit more complex.

     Eigenclasses are not visible as classes of objects.

     o1 = Object.new

     def o1.meth
       "string"
     end

     o1.meth  # => "string"
     o1.class # => Object

     o2 = Object.new

     o2.meth  # => undefined method `meth`
     o2.class # => Object

   This example shows that having two instances of same objects.  Both
can behave differently because in the case of 'o1' the method is
stored in the eigenclass, that is not accessible by 'o2'.

     Eigenclasses are used when a specific behavior of an object is
     expected.


File: Ruby2_5.info,  Node: Ruby Testing,  Prev: Advanced Ruby,  Up: Programming Ruby by Hulan

B.1.3 Ruby Testing
------------------

Writing automated tests for code is essential.  The Ruby community
emphasizes it and most projects are well covered.  A TDD is also
popular among rubyist.

* Menu:

* Testing Frameworks::
* Minitest::


File: Ruby2_5.info,  Node: Testing Frameworks,  Next: Minitest,  Up: Ruby Testing

B.1.3.1 Testing Frameworks
..........................

Today the de facto standard is to use the Minitest
(https://github.com/seattlerb/minitest) testing framework.  You can
see RSpec (http://rspec.info) still being used too, but 'Minitest'
already offers the same capabilities and more.  Both can be easily
used for TDD. For BDD there’s the popular ecosystem called Cucumber
(https://cucumber.io) which started as a Ruby gem but quickly evolved
into a polyglot tool.


File: Ruby2_5.info,  Node: Minitest,  Prev: Testing Frameworks,  Up: Ruby Testing

B.1.3.2 Minitest
................

Th syntax you can see in tests can be in two forms.  Either something
we call 'Testunit' (aka 'junit') or 'spec' that was taken from
'Rspec'.  The internal implementation is the same for both and it’s
mostly a matter of taste.  Tests are regular ruby scripts that test
other scripts.  Test are usually to be found in the 'test/' directory,
and the file name should reflect test class defined inside, e.g.
'morse_coder_test.rb'.

'Testunit' Syntax
-----------------

     require 'minitest/autorun'
     require 'morse_coder.rb'

     class MorseCoderTest < Minitest::Test
       def setup
         @coder = MorseCoder.new(...)
       end

       def test_encode_for_single_letters
         assert_equal ".-", @coder.encode "a"
         assert_equal "-...", @coder.encode "b"
       end
     end
   'Minitest::Test'

   A test class should inherit from 'Minitest::Test' so test helpers
(assertions) are available.  Testing methods must start with 'test_'.
Other methods are regular methods that can be used from testing
methods, e.g.  to build some fixtures.

   There are a few method names with special meaning.  In the example
you can see a method with th name 'setup'.  This method gets
automatically executed before every testing method.  Similarly there’s
a 'teardown' method that get’s executed after each testing method.
It’s usually used for cleaning up any mess the testing method created.

Assertions
----------

'skip()' One testing method can contain more than one assertion.  The
first assertion failure stops the method being run and marks the test
as a failure (F). If method raises an exception the result of the test
is marked as an error (E). If all assertions defined in the method
pass, the test succeeds (.).  If you plan to implement the test later
you can skip the test by calling 'skip("Sorry, I’m lazy")'.

   The simplest assertion is one testing a boolean value:

     assert @something
   'assert' 'refute'

   This will succeed if '@something' is considered 'true', but fail
otherwise.  The negative form is 'refute', e.g.  the following would
pass: 'refute false'.

   You could obvisouly add tests like assert '@something == 'that I
expect'' but it would generate very generic messages on failures.  You
can specify custome message by passing extra argument like this:

     assert @something == 'that I expect', '@something does not match expected
     string'

   but it’s always better to use assert helper that matches the
use-case best.  The following example demonstrates how to check
equality of two values; the failure message would automatically
include information about what @something is and what it was expected
to be.

     assert_equal @something, 'that I expect'

   Useful 'assert' helpers are listed in the example below.  All of
them can be found in the Minitest documentation.
(http://docs.seattlerb.org/minitest/Minitest/Assertions.html)

'assert arg'
     'arg' is 'true'
'refute arg'
     'arg' is 'false'
'assert_equal'
     'expected, actual'
'assert_includes'
     'collection, object'
'assert_kind_of'
     'class, object'
'assert_nil'
     'object'
'assert_match'
     'expected, actual'
'assert_raises'
     'exception_class, &block'

Table B.1: Table of Assertion Helpers

Spec Syntax
-----------

'Spec' Syntax

   Subjectively better structured, less repeating, more readable and
TDD supporting syntax can be used.  See the following example.

     require 'minitest/autorun'
     require 'morse_coder.rb'

     describe MorseCoder do
       let(:coder) { MorseCoder.new(...) }

       describe 'single letters encoding' do
         let(:a) { coder.a }
         let(:b) { coder.b }

         specify { a.must_equal '.-' }
         specify { b.must_equal '-...' }
       end
     end

   'describe' block 'before' 'let' 'specify' 'must_$assert'
'wont_$assert' 'describe' block wraps logical block.  Each such block
can have it’s own 'before' (aka 'setup').  With 'let' we define a
method that can be called later within any nested block.  'let' is
lazy.  'specify' accepts a block that uses assertion helpers in form
of 'must_$assert' or 'wont_$assert'.  There are many other extensions
to this language so it reads more naturally.

   Note that since the implementation is the same, you can combine
both at the same time.

Output Of Test Run
------------------

     Run options: --seed 25127

     # Running tests:

     ..S.....F........

     Finished tests in 101.524752s, 6.4319 tests/s, 9.0618 assertions/s
     63 tests, 92 assertions, 1 failures, 0 errors, S skips

       1) Failure:
     TestConnector#test_connection [./connector.rb:5]:
       Expected: nil
       Actual: "that I expect"

   The seed is random number representing the order of test.  Note
that your tests should be order-independant.

Running Multiple Test Files
---------------------------

It’s common to have more than just one test file in project.  To run
all tests at once we can use 'Rake'.  Usually tests are put in 'test'
directory in the project tree structure.  In such setup we can easily
define test tasks in a 'Rakefile'.  'Rake' provides a built-in class
for this; we just need to configure it.  Just put following into your
'Rakefile':

     require 'rake/testtask'

     Rake::TestTask.new do |t|
       t.libs << 'test'
       t.test_files = Dir.glob('test/**/*_test.rb')
       t.verbose true
     end

   We can run 'rake test' which will load a run all ruby scripts with
'_test' suffix in the test directory including all of its
subdirectories.  If you prefer 'test' to be the default 'rake' task,
add following to the 'Rakefile':

     task :default => [ :test ]

   Now you can run all tests just by running 'rake'.

   Another common practise is to have one file that is loaded at
start, usually named 'test_helper.rb'.  This file contains everything
that is needed for all tests, like requiring additional testing
libraries.  You can also put 'require minitest/autorun' there.  Just
note that you need to 'require 'test_helper'' as first line of every
test file.


File: Ruby2_5.info,  Node: Utility Programs,  Next: Initial Setup and Post Create,  Prev: Resources,  Up: Top

Appendix C Utility Programs
***************************

Here are some utility programs that I either found or created.

* Menu:

* Ruby Eval Utility::
* API Utility::


File: Ruby2_5.info,  Node: Ruby Eval Utility,  Next: API Utility,  Up: Utility Programs

C.1 Ruby Eval Utility
=====================

*Note RubyEval::

   'eval.rb' (http://www.rubyist.net/~slagell/ruby/eval.txt)

     NOTE: This program's original name is 'eval.rb'.  However, there
     is a name conflict with 'eval'.  In order to allow this program
     to be run as an executable while sitting in the 'bin' directory,
     I need to change its name to soemthing other than 'eval'.  Of
     course, 'eval.rb' would work, but I would like a simple name
     without an extension.  Therefore, I am using 'rbeval' as a
     compromise.  This is handled by '@post_create' when creating an
     executable in the 'bin' directory.  The original file will be
     moved into 'src' with its original 'eval.rb' intact.

{'eval.rb'} ==
     #! /usr/local/bin/ruby

     #######################################################
     #
     # Ruby interactive input/eval loop
     # Written by matz           (matz@netlab.co.jp)
     # Modified by Mark Slagell  (slagell@ruby-lang.org)
     #    with suggestions for improvement from Dave Thomas
     #                           (Dave@Thomases.com)
     #
     #######################################################
     #
     # NOTE - this file has been renamed with a .txt extension to
     # allow you to view or download it without the rubyist.net
     # web server trying to run it as a CGI script.  You will
     # probably want to rename it back to eval.rb.
     #
     #######################################################

     module EvalWrapper

       <eval--EvalWrapper-Constants>

       <eval--EvalWrapper-Indentation Deltas>

       # On exit, restore normal screen colors.
       END {  print Norm,"\n" }

       ##############################################################
       # Execution starts here.
       ##############################################################

       indent=0
       while true   # Top of main loop.

         <eval--Main-Get Line>
         <eval--Main-Process Line>

       end          # Bottom of main loop
       print "\n"

     end # module

The following table lists called chunk definition points.
Chunk name                First definition point
-------------------------------------------------------------------------
<eval--EvalWrapper-Constants>See *note eval---EvalWrapper--Constants::.
<eval--EvalWrapper-IndentationSee
Deltas>                   *note eval---EvalWrapper--Indentation-Deltas::.
<eval--Main-Get Line>     See *note eval---Main--Get-Line::.
<eval--Main-Process       See *note eval---Main--Process-Line::.
Line>

* Menu:

* eval Module Code::
* eval Indentation Deltas Code::
* eval Main Get Line Code::
* eval Main Process Line Code::
* eval.rb Post Create::


File: Ruby2_5.info,  Node: eval Module Code,  Next: eval Indentation Deltas Code,  Up: Ruby Eval Utility

C.1.1 'eval.rb' Module Code
---------------------------

<eval--EvalWrapper-Constants> ==
     # Constants for ANSI screen interaction.  Adjust to your liking.

     Norm   = "\033[0m"
     PCol   = Norm           # Prompt color
     Code   = "\033[1;32m"   # yellow
     Eval   = "\033[0;36m"   # cyan
     Prompt = PCol+"ruby> "+Norm
     PrMore = PCol+"    | "+Norm
     Ispace = "   "          # Adjust length of this for indentation.
     Wipe   = "\033[A\033[K" # Move cursor up and erase line

This chunk is called by {'eval.rb'}; see its first definition at *note
eval-rb::.


File: Ruby2_5.info,  Node: eval Indentation Deltas Code,  Next: eval Main Get Line Code,  Prev: eval Module Code,  Up: Ruby Eval Utility

C.1.2 'eval.rb' Indentation Deltas Code
---------------------------------------

<eval--EvalWrapper-Indentation Deltas> ==
     # Return a pair of indentation deltas. The first applies before
     # the current line is printed, the second after.

     def EvalWrapper.indentation( code )
       case code

       when /^\s*(class|module|def|if|case|while|for|begin)\b[^_]/
         [0,1]      # increase indentation because of keyword

       when /^\s*end\b[^_]/
         [-1,0]     # decrease because of end

       when /\{\s*(\|.*\|)?\s*$/
         [0,1]      # increase because of '{'

       when /^\s*\}/
         [-1,0]     # decrease because of '}'

       when /^\s*(rescue|ensure|elsif|else)\b[^_]/
         [-1,1]     # decrease for this line, then come back

       else
         [0,0]      # we see no reason to change anything

       end # case
     end # def

This chunk is called by {'eval.rb'}; see its first definition at *note
eval-rb::.


File: Ruby2_5.info,  Node: eval Main Get Line Code,  Next: eval Main Process Line Code,  Prev: eval Indentation Deltas Code,  Up: Ruby Eval Utility

C.1.3 'eval.rb' Main Get Line Code
----------------------------------

<eval--Main-Get Line> ==
     # Print prompt, move cursor to tentative indentation level, and get
     # a line of input from the user.

     if( indent == 0 )
       expr = ''; print Prompt  # (expecting a fresh expression)

     else
       print PrMore             # (appending to previous lines)

     end

     print Ispace * indent,Code
     line = gets
     print Norm

This chunk is called by {'eval.rb'}; see its first definition at *note
eval-rb::.


File: Ruby2_5.info,  Node: eval Main Process Line Code,  Next: eval.rb Post Create,  Prev: eval Main Get Line Code,  Up: Ruby Eval Utility

C.1.4 'eval.rb' Main Process Line Code
--------------------------------------

<eval--Main-Process Line> ==
     <eval--Main-Process Line-If Not Line>

     <eval--Main-Process Line-Is Line>

This chunk is called by {'eval.rb'}; see its first definition at *note
eval-rb::.

The following table lists called chunk definition points.
Chunk name                First definition point
-------------------------------------------------------------------------
<eval--Main-Process       See
Line-If Not Line>         *note eval---Main--Process-Line-If-Not-Line::.
<eval--Main-Process       See
Line-Is Line>             *note eval---Main--Process-Line-Is-Line::.

* Menu:

* eval If Not Line Code::
* eval If Is Line Code::


File: Ruby2_5.info,  Node: eval If Not Line Code,  Next: eval If Is Line Code,  Up: eval Main Process Line Code

C.1.4.1 'eval.rb' If Not Line Code
..................................

<eval--Main-Process Line-If Not Line> ==
     if not line
       # end of input (^D) - if there is no expression, exit, else
       # reset cursor to the beginning of this line.

       if expr == '' then break else print "\r" end

This chunk is called by <eval--Main-Process Line>; see its first
definition at *note eval---Main--Process-Line::.


File: Ruby2_5.info,  Node: eval If Is Line Code,  Prev: eval If Not Line Code,  Up: eval Main Process Line Code

C.1.4.2 'eval.rb' If Is Line Code
.................................

<eval--Main-Process Line-Is Line> ==
     else

       # Append the input to whatever we had.
       expr << line

       <eval--Main-Process Line-Is Line_Indentation>

       <eval--Main-Process Line-Is Line_Worth Evaluating?>

     end # if not line

This chunk is called by <eval--Main-Process Line>; see its first
definition at *note eval---Main--Process-Line::.

The following table lists called chunk definition points.
Chunk name                First definition point
-------------------------------------------------------------------------
<eval--Main-Process       See
Line-Is                   *note eval---Main--Process-Line-Is-Line-Indentation::.
Line_Indentation>
<eval--Main-Process       See
Line-Is Line_Worth        *note eval---Main--Process-Line-Is-Line-Worth-Evaluating-::.
Evaluating?>

### Indentation ###
-------------------

<eval--Main-Process Line-Is Line_Indentation> ==
     # Determine changes in indentation, reposition this line if
     # necessary, and adjust indentation for the next prompt.

     begin
       ind1,ind2 = indentation( line )
       if( ind1 != 0 )
         indent += ind1
         print Wipe,PrMore,(Ispace*indent),Code,line,Norm
       end
       indent += ind2

     rescue      # On error, restart the main loop.
       print Eval,"ERR: Nesting violation\n",Norm
       indent = 0
       redo

     end # begin

This chunk is called by <eval--Main-Process Line-Is Line>; see its
first definition at *note eval---Main--Process-Line-Is-Line::.

### Something Worth Evaluating? ###
-----------------------------------

<eval--Main-Process Line-Is Line_Worth Evaluating?> ==
     # Okay, do we have something worth evaulating?

     if (indent == 0) && (expr.chop =~ /[^; \t\n\r\f]+/)

       begin
         result = eval(expr, TOPLEVEL_BINDING).inspect
         if $!  # no exception, but $! non-nil, means a warning
           print Eval,$!,Norm,"\n"
           $!=nil
         end
         print Eval,"   ",result,Norm,"\n"

       rescue ScriptError,StandardError
         $! = 'exception raised' if not $!
         print Eval,"ERR: ",$!,Norm,"\n"
       end

       break if not line

     end # if

This chunk is called by <eval--Main-Process Line-Is Line>; see its
first definition at *note eval---Main--Process-Line-Is-Line::.


File: Ruby2_5.info,  Node: eval.rb Post Create,  Prev: eval Main Process Line Code,  Up: Ruby Eval Utility

C.1.5 'eval.rb' Post Create
---------------------------

The following line is executed after 'jrtangle' runs.

 @post_create eval.rb chmod +x eval.rb && mv eval.rb src && ln src/eval.rb bin/rbeval


File: Ruby2_5.info,  Node: API Utility,  Prev: Ruby Eval Utility,  Up: Utility Programs

C.2 API Utility
===============

The purpose of this little utility is to assist with the construction
of the API tables; that is, it will help insert '@item' labels, and
perhaps assist with constructing URL's if I am lucky.  I am writing it
using the 'GAWK' programming language to refresh my knowledge of 'AWK'
(and get to know 'GAWK''s extra features).

{'apiutil.awk'} ==
     #! /usr/bin/env gawk -f

     <apiutil--BEGIN Block>
     <apiutil--BEGINFILE Block>
     <apiutil--MAIN Block>
     <apiutil--ENDFILE Block>
     <apiutil--END Block>


The following table lists called chunk definition points.
Chunk name                First definition point
-------------------------------------------------------------------------
<apiutil--BEGIN Block>    See *note apiutil---BEGIN-Block::.
<apiutil--BEGINFILE       See *note apiutil---BEGINFILE-Block::.
Block>
<apiutil--END Block>      See *note apiutil---END-Block::.
<apiutil--ENDFILE         See *note apiutil---ENDFILE-Block::.
Block>
<apiutil--MAIN Block>     See *note apiutil---MAIN-Block::.

* Menu:

* apiutil.awk BEGIN Block::
* apiutil.awk BEGNFILE Block::
* apiutil.awk MAIN Block::
* apiutil.awk ENDFILE Block::
* apiutil.awk END Block::
* apiutil Ord Function::
* convertsymbols() Function Definition::
* apiutil Makefile Target::


File: Ruby2_5.info,  Node: apiutil.awk BEGIN Block,  Next: apiutil.awk BEGNFILE Block,  Up: API Utility

C.2.1 'apiutil.awk' BEGIN Block
-------------------------------

<apiutil--BEGIN Block> ==
     BEGIN {
       <apiutil--BEGIN-Variable Defns>
       <apiutil--BEGIN-Ord Function Init>
     }


This chunk is called by {'apiutil.awk'}; see its first definition at
*note apiutil-awk::.

The following table lists called chunk definition points.
Chunk name                First definition point
-------------------------------------------------------------------------
<apiutil--BEGIN-Ord       See
Function Init>            *note apiutil---BEGIN--Ord-Function-Init::.
<apiutil--BEGIN-Variable  See
Defns>                    *note apiutil---BEGIN--Variable-Defns-1::.


File: Ruby2_5.info,  Node: apiutil.awk BEGNFILE Block,  Next: apiutil.awk MAIN Block,  Prev: apiutil.awk BEGIN Block,  Up: API Utility

C.2.2 'apiutil.awk' BEGINFILE BLOCK
-----------------------------------

This will allow this filename to be changed a little more easily.

<apiutil--BEGINFILE Block> ==
     BEGINFILE {
       newfile = FILENAME".new"
     }


This chunk is called by {'apiutil.awk'}; see its first definition at
*note apiutil-awk::.


File: Ruby2_5.info,  Node: apiutil.awk MAIN Block,  Next: apiutil.awk ENDFILE Block,  Prev: apiutil.awk BEGNFILE Block,  Up: API Utility

C.2.3 'apiutil.awk' MAIN Block
------------------------------

<apiutil--MAIN Block> ==
     ##############
     # MAIN BLOCK #
     ##############

     # pass through whatever is not in a target table
     started == 0 { print > newfile }

     <apiutil--MAIN Block-Main Loop>


     ########################
     # FUNCTION DEFINITIONS #
     ########################

     <apiutil--MAIN Block-Ord Function Defn>
     <apiutil--MAIN Block-Convert Symbols Function Defn>

     ##################
     # END MAIN BLOCK #
     # ################


This chunk is called by {'apiutil.awk'}; see its first definition at
*note apiutil-awk::.

The following table lists called chunk definition points.
Chunk name                First definition point
-------------------------------------------------------------------------
<apiutil--MAIN            See
Block-Convert Symbols     *note apiutil---MAIN-Block--Convert-Symbols-Function-Defn::.
Function Defn>
<apiutil--MAIN            See *note apiutil---MAIN-Block--Main-Loop::.
Block-Main Loop>
<apiutil--MAIN            See
Block-Ord Function        *note apiutil---MAIN-Block--Ord-Function-Defn-1::.
Defn>

Main Loop Variable Definitions
------------------------------

I will define the main loop variables first.  The variables 'start'
and 'end' hold regular expression strings that target the two tables I
want to process.  The variable 'started' flags whether the code is
inside a table (1) or not (0).

<apiutil--BEGIN-Variable Defns> ==
     start = "^@float Table,table:api-.*$"
     end   = "^@end table$"
     started = 0


This chunk is also defined in *note
apiutil---BEGIN--Variable-Defns-2::, *note
apiutil---BEGIN--Variable-Defns-3::, and *note
apiutil---BEGIN--Variable-Defns-4::.

This chunk is called by <apiutil--BEGIN Block>; see its first
definition at *note apiutil---BEGIN-Block::.

Main Outer Loop Definitions
---------------------------

The 'MAIN' block does two things: passes over unchanged whatever is
not inside a target table, and processes the contents of a target
table.  It uses the flag 'started' to pass through the beginning and
ending lines basically unchanged as well(1).

<apiutil--MAIN Block-Main Loop> ==
     # process whatever is in between the 'start' and 'end' of a table
     $0 ~ start, $0 ~ end {

       # Upon first entering a table, set the 'started' flag true (1)
       if (started == 0) {
         started = 1
         next
       }

       <apiutil--MAIN Block-Main Loop-Inside>
     }


This chunk is called by <apiutil--MAIN Block>; see its first
definition at *note apiutil---MAIN-Block::.

The called chunk <apiutil--MAIN Block-Main Loop-Inside> is first
defined at *note apiutil---MAIN-Block--Main-Loop-Inside-1::.

Preliminary and Post Processing of the Inside of a Table
--------------------------------------------------------

Once inside the main loop, do some preliminary processing and
checking.  Make sure '@' signs are properly escaped, and ignore the
'@table' line.  Also check for the end of the table, add a newline,
and reset the 'started' flag.

<apiutil--MAIN Block-Main Loop-Inside> ==
     # ignore the @table line
     if ($0 ~ /^@table/) {
       print $0 > newfile
       next
     }

     # at the end of a table, add an empty line for better style
     # and turn off the 'started' flag
     if ($0 ~ end) {
       print "\n"$0 > newfile
       started = 0
       next
     }

     # make sure any special symbols are properly escaped
     gsub(/@/, /@@/)


This chunk is also defined in *note
apiutil---MAIN-Block--Main-Loop-Inside-2::.

This chunk is called by <apiutil--MAIN Block-Main Loop>; see its first
definition at *note apiutil---MAIN-Block--Main-Loop::.

Main Processing Loop Definition
-------------------------------

The real work is done on lines that are in the middle of the tables.
There is first a regular expression check to make sure something that
is not a 'Texinfo' command (which begin with '@') is on the line
because some lines are empty and are just ignored;

<apiutil--MAIN Block-Main Loop-Inside> +==
     # process lines with content
     if ($0 ~ /^[CM]?[[:graph:]]+.*$/) {

       <apiutil--MAIN Block-Main Loop-Inside_Processing>
       # ignore empty lines
     } else {
       print > newfile
     }


This chunk is also defined in *note
apiutil---MAIN-Block--Main-Loop-Inside-1::.

This chunk is called by <apiutil--MAIN Block-Main Loop>; see its first
definition at *note apiutil---MAIN-Block--Main-Loop::.

The called chunk <apiutil--MAIN Block-Main Loop-Inside_Processing> is
first defined at *note
apiutil---MAIN-Block--Main-Loop-Inside-Processing-1::.

Inside the Main Processing Loop
-------------------------------

After it finds a non-empty, non-command line, 'GAWK' parses it into
the array 'arr' using the function 'match'.  This regexp is fairly
busy.  There are many parentheses because several parts of the regexp
are optional, requiring an extra set around the optional parts, and
extra parentheses are required to strip away a parenthesized word
(ironically).  The optional sections are marked by question marks
('?'s).

   The first part of each line contains a marker indicating what kind
of element the thing is.  In the 'Classes' table, the marker is either
a 'C' or an 'M'.  In the 'Methods' table, the marker is either a pair
of colons ('::') or a hash ('#').

Explanation of the main regexp
..............................

The main entry from either table is obtained by grabbing everything
that is not a right parenthesis ('(') or a space.  In the 'Class'
table, this is everything on the line.  In the 'Method' table, this is
everything up until the parenthesized class name in which the method
is defined.  Likewise, this parenthesized class is obtained by
grabbing everything up until the closing parenthesis.

   Finally, each parsed parenthesized regexp is inserted into the
array 'arr' and available for use after the parsing.

  1. 'arr[1]': Identification of either 'class' or 'method'; it will
     contain one of 'C', 'M', '::', or '#'.
  2. 'arr[2]': Main entry; it will contain the name of a class (for
     the 'Class' table, or the name of a method (for the 'Method'
     table).
  3. 'arr[3]': ignored parenthesized class (optional)
  4. 'arr[4]': a method's 'class' (optional); it will contain the name
     of the class within which a method is defined.

<apiutil--MAIN Block-Main Loop-Inside_Processing> ==
     cm = match($0, /([CM]|[:#]+)?([^( ]+)(\s\(([^)]+)\))?/, arr)

     # for debugging
     # print "1-"(arr[1])"-2-"(arr[2])"-3-"(arr[3])"-4-"(arr[4])"|"


This chunk is also defined in *note
apiutil---MAIN-Block--Main-Loop-Inside-Processing-2::, *note
apiutil---MAIN-Block--Main-Loop-Inside-Processing-3::, and *note
apiutil---MAIN-Block--Main-Loop-Inside-Processing-4::.

This chunk is called by <apiutil--MAIN Block-Main Loop-Inside>; see
its first definition at *note
apiutil---MAIN-Block--Main-Loop-Inside-1::.

Variable Definitions
--------------------

When parsing the lines of text obtained from copying the library page,
the initial letters and symbols can be translated into meaningful
words using the hash 'classmethod'.

<apiutil--BEGIN-Variable Defns> +==
     classmethod["C"]  = "Class"
     classmethod["M"]  = "Module"
     classmethod["::"] = "Class Method"
     classmethod["#"]  = "Instance Method"


This chunk is also defined in *note
apiutil---BEGIN--Variable-Defns-1::, *note
apiutil---BEGIN--Variable-Defns-3::, and *note
apiutil---BEGIN--Variable-Defns-4::.

This chunk is called by <apiutil--BEGIN Block>; see its first
definition at *note apiutil---BEGIN-Block::.

   Additionally, a method's designator can be used to help form URL's
pointing to the method definition.

<apiutil--BEGIN-Variable Defns> +==
     methid["::"] = "-c-"
     methid["#"]  = "-i-"


This chunk is also defined in *note
apiutil---BEGIN--Variable-Defns-1::, *note
apiutil---BEGIN--Variable-Defns-2::, and *note
apiutil---BEGIN--Variable-Defns-4::.

This chunk is called by <apiutil--BEGIN Block>; see its first
definition at *note apiutil---BEGIN-Block::.

Stitching Together the Parts
----------------------------

Once the parsing has been completed, the parts are stitched together
and printed with appropriate commands surrounding them, i.e., '@item'
or '@code', etc.

   The variable 'itemurl' will be used to stitch together the URL that
will be the main '@item' content; it begins with the base url as
defined in the BEGIN block:

<apiutil--BEGIN-Variable Defns> +==
     baseurl = "http://ruby-doc.org/core-2.5.1/"


This chunk is also defined in *note
apiutil---BEGIN--Variable-Defns-1::, *note
apiutil---BEGIN--Variable-Defns-2::, and *note
apiutil---BEGIN--Variable-Defns-3::.

This chunk is called by <apiutil--BEGIN Block>; see its first
definition at *note apiutil---BEGIN-Block::.

   'baseurl' starts the 'itemurl' definition:

<apiutil--MAIN Block-Main Loop-Inside_Processing> +==
     itemurl = (baseurl)


This chunk is also defined in *note
apiutil---MAIN-Block--Main-Loop-Inside-Processing-1::, *note
apiutil---MAIN-Block--Main-Loop-Inside-Processing-3::, and *note
apiutil---MAIN-Block--Main-Loop-Inside-Processing-4::.

This chunk is called by <apiutil--MAIN Block-Main Loop-Inside>; see
its first definition at *note
apiutil---MAIN-Block--Main-Loop-Inside-1::.

Processing the 'arr' Array
..........................

The additional parts of the array 'arr' will be added to 'itemurl' to
create a complete and linkable URL into Ruby's core library pages.

   The code now continues processing the 'arr' array parts.  If
'arr[4])' exists, then the code is currently processing the 'Method'
table, and since the parts are different than the 'Class' table, it
must differentiate between them.

   'arr[4]' will be empty for a 'Class' table element, and so it can
be reformatted somewhat for a 'Method' table element by placing its
contents inside a '@code' format.

   The 'Method' links require most symbols to be hexadecimal
equivalents of their ASCII code number.  Therefore, I made a function
called 'convertsymbols()' that will iterate over a method name and
convert any symbols (with the exception of the underscore) into
hexadecimal ASCII, separated by dashes.  When this name is inserted
into the URL, it links directly to the proper method inside the class
documentation.

<apiutil--MAIN Block-Main Loop-Inside_Processing> +==
     if (length(arr[4]) > 0) {

       #process the Method table
       method = arr[2]
       class  = arr[4]
       gsub(/::/, "/", class)
       methwsymbols = convertsymbols(method)

       itemurl = "@item @url{"(itemurl)(class)".html#method"(methid[arr[1]])(methwsymbols)","(method)"}"
       detail  = "@code{"(class)(arr[1])(method)"} ("(classmethod[arr[1]])")"

     } else {
       # process the Class table
       class = arr[2]

       itemurl = "@item @url{"(itemurl)(class)".html,"(arr[2])"}"
       detail  = (classmethod[arr[1]])
     }


This chunk is also defined in *note
apiutil---MAIN-Block--Main-Loop-Inside-Processing-1::, *note
apiutil---MAIN-Block--Main-Loop-Inside-Processing-2::, and *note
apiutil---MAIN-Block--Main-Loop-Inside-Processing-4::.

This chunk is called by <apiutil--MAIN Block-Main Loop-Inside>; see
its first definition at *note
apiutil---MAIN-Block--Main-Loop-Inside-1::.

Printing the Table Items
........................

The code is printing a '@table' element, and it contains both an
'@item' column and a detail column.

<apiutil--MAIN Block-Main Loop-Inside_Processing> +==
     print itemurl > newfile
     print detail  > newfile


This chunk is also defined in *note
apiutil---MAIN-Block--Main-Loop-Inside-Processing-1::, *note
apiutil---MAIN-Block--Main-Loop-Inside-Processing-2::, and *note
apiutil---MAIN-Block--Main-Loop-Inside-Processing-3::.

This chunk is called by <apiutil--MAIN Block-Main Loop-Inside>; see
its first definition at *note
apiutil---MAIN-Block--Main-Loop-Inside-1::.

   ---------- Footnotes ----------

   (1) In fact one line is added at the end of the table to account
for better style


File: Ruby2_5.info,  Node: apiutil.awk ENDFILE Block,  Next: apiutil.awk END Block,  Prev: apiutil.awk MAIN Block,  Up: API Utility

C.2.4 'apiutil.awk' ENDFILE Block
---------------------------------

<apiutil--ENDFILE Block> ==
     ENDFILE {
       system("mv -v "FILENAME" "FILENAME".bak && mv -vi "FILENAME".new "FILENAME)
     }


This chunk is called by {'apiutil.awk'}; see its first definition at
*note apiutil-awk::.


File: Ruby2_5.info,  Node: apiutil.awk END Block,  Next: apiutil Ord Function,  Prev: apiutil.awk ENDFILE Block,  Up: API Utility

C.2.5 'apiutil.awk' END Block
-----------------------------

<apiutil--END Block> ==
     END {
       print "All done"
     }

This chunk is called by {'apiutil.awk'}; see its first definition at
*note apiutil-awk::.


File: Ruby2_5.info,  Node: apiutil Ord Function,  Next: convertsymbols() Function Definition,  Prev: apiutil.awk END Block,  Up: API Utility

C.2.6 'apiutil' Ord Function
----------------------------

I need to turn symbols (like '=' and '+') into their hexadecimal
numbers inside 'Method' URL links.  I found this 'ord' function in
'GAWK''s documentation.  *Note (gawk)Ordinal Functions::.  It consists
of an initialization segment, in which a hash of symbols and their
corresponding ASCII codes is assembled, and a function that, given
either an 'ord' number or a 'char' symbol, returns the opposite.  I
will put the initialization code into the 'BEGIN' segment, and the
function definition into the 'MAIN' block.

The 'ord' Function Initialization Segments
------------------------------------------

The '_ord_init()' initialization function is called from the BEGIN
block, but is defined at the bottom of the MAIN block along with the
other 'ord' functions.

<apiutil--BEGIN-Ord Function Init> ==
     # initialize the _ord_ and _chr_ function's ASCII symbol table
     _ord_init()


This chunk is called by <apiutil--BEGIN Block>; see its first
definition at *note apiutil---BEGIN-Block::.

<apiutil--MAIN Block-Ord Function Defn> ==
     # initialize the ASCII symbol table
     #
     function _ord_init(       low, high, i, t) {
       low = 0
       high = 127
       for (i = low; i <= high; i++) {
         t = sprintf("%c", i)
         _ord_[t] = i
       }
     }


This chunk is also defined in *note
apiutil---MAIN-Block--Ord-Function-Defn-2::.

This chunk is called by <apiutil--MAIN Block>; see its first
definition at *note apiutil---MAIN-Block::.

The 'ord()' and 'chr()' Function Definitions
--------------------------------------------

<apiutil--MAIN Block-Ord Function Defn> +==
     # the 'ord()' function: given a symbol, return its ASCII number
     #
     function ord(str,       c) {
       c = substr(str, 1, 1)
       return _ord_[c]
     }

     # the 'chr()' function: given an ASCII number, return its symbol
     #
     function chr(c) {
       return sprintf("%c", c + 0)
     }


This chunk is also defined in *note
apiutil---MAIN-Block--Ord-Function-Defn-1::.

This chunk is called by <apiutil--MAIN Block>; see its first
definition at *note apiutil---MAIN-Block::.


File: Ruby2_5.info,  Node: convertsymbols() Function Definition,  Next: apiutil Makefile Target,  Prev: apiutil Ord Function,  Up: API Utility

C.2.7 'convertsymbols()' Function Definition
--------------------------------------------

This function, 'convertsymbols()', takes a method name and converts
all symbols in the following ranges into their hexadecimal
equivalents:

   * ASCII 0x20 (<SP>) and ASCII 0x2f ('/')
   * ASCII 0x3a (':') and ASCII 0x40 ('@')
   * ASCII 0x5b ('[') and ASCII 0x5e ('^')
   * ASCII 0x7b ('{') and ASCII 0x7e ('~')

<apiutil--MAIN Block-Convert Symbols Function Defn> ==
     # the 'convertsymbol()' function: given a method name, convert symbols
     # into hexadecimal separated by dashes
     #
     function convertsymbols(meth,\
       converted, low1, high1, low2, high2, low3, high3, low4, high4, c, f, i, o) {

       # ASCII ranges to look for
       low1  = 0x20 # SP
       high1 = 0x2f # /
       low2  = 0x3a # :
       high2 = 0x40 # @
       low3  = 0x5b # [
       high3 = 0x5e # ^ (leave _ alone)
       low4  = 0x7b # {
       high4 = 0x7e # ~

       # this flag places dashes between symbols
       dash = 0
       f[1] = "-"

       # this will hold the converted name
       converted = ""

       # iterate over the characters in 'meth', converting the symbols
       for (i = 1; i <= length(meth); i++) {
         c = substr(meth, i, 1)

         # this is a decimal number internally, but is converted to hexadecimal
         # by the "%x" format string
         o = ord(c)

         if ( (o >= low1 && o <= high1) ||
              (o >= low2 && o <= high2) ||
              (o >= low3 && o <= high3) ||
              (o >= low4 && o <= high4) ) {

           # do not place a dash if a symbol is the first character
           converted = (converted)(sprintf("%s%X", f[dash], o))

         } else {
           converted = (converted)(c)
         }

         if (dash == 0) { dash = 1 }
       }

       return converted
     }


This chunk is called by <apiutil--MAIN Block>; see its first
definition at *note apiutil---MAIN-Block::.


File: Ruby2_5.info,  Node: apiutil Makefile Target,  Prev: convertsymbols() Function Definition,  Up: API Utility

C.2.8 apiutil Makefile Target
-----------------------------

Add a target for running 'apiutil.awk' in the Makefile.  Note that the
directory './bin' is created in the '@initial_setup' environment
(*note Initial Setup::) and is made executable by a '@post_create'
command (*note Post Create::), both of which were added by the
'TexiwebJR' program.

<Makefile--Utility Targets> ==
     # apiutil.awk
     #############
     .PHONY : apiutil
     apiutil :
         bin/apiutil.awk Ruby2_5.twjr


This chunk is also defined in *note Makefile---Utility-Targets-2::.

This chunk is called by {'Makefile'}; see its first definition at
*note Makefile::.


File: Ruby2_5.info,  Node: Initial Setup and Post Create,  Next: The Makefile,  Prev: Utility Programs,  Up: Top

Appendix D Initial Setup and Post Create
****************************************

TexiwebJr has a couple of new utility commands for working with files:

   * '@initial_setup'
   * '@post_create'

* Menu:

* Initial Setup::
* Post Create::


File: Ruby2_5.info,  Node: Initial Setup,  Next: Post Create,  Up: Initial Setup and Post Create

D.1 Initial Setup
=================

TexiwebJR added a new command '@initial_setup' that executes some
commands in the shell prior to 'jrtangle' or 'jrweave' processing a
file.  This can be used to create directories into which the command
'@post_create' can move specified files (*note Post Create::).

   Since these commands do not show up in a woven document, I have
placed them into a little '@example' environment here:

     @initial_setup
     mkdir -p src
     mkdir -p bin
     @end initial_setup

   Set up some directories into which files can be moved, and add a
little shell script to add './bin' to 'PATH' (but it can only be run
from the command line as 'source setpath.sh').

{'setpath.sh'} ==
     #! /usr/bin/env bash
     # setpath.sh USAGE 'source setpath.sh'

     export PATH=./bin:$PATH



File: Ruby2_5.info,  Node: Post Create,  Prev: Initial Setup,  Up: Initial Setup and Post Create

D.2 Post Create
===============

Make 'apiutil.awk' executable and move it into 'bin'.  It can be run
either by executing the 'make' target 'apiutil' (as 'make apiutil') or
by running the command from the './bin' directory.  Note that there is
a little shell script that will add './bin' to the 'path' environment
variable, which must be run "by hand" as 'source setpath.sh'.

 @post_create apiutil.awk chmod -v +x apiutil.awk && mv apiutil.awk src && ln -vf src/apiutil.awk bin/apiutil


File: Ruby2_5.info,  Node: The Makefile,  Next: Code Chunk Summaries,  Prev: Initial Setup and Post Create,  Up: Top

Appendix E The Makefile
***********************

{'Makefile'} ==
     # MAKEFILE FILE CHUNKS
     ######################

     <Makefile--Variable Definitions>

     <Makefile--Default Target>

     <Makefile--TWJR Targets>

     <Makefile--Utility Targets>

     <Makefile--Clean Targets>


The following table lists called chunk definition points.
Chunk name                First definition point
-------------------------------------------------------------------------
<Makefile--Clean          See *note Makefile---Clean-Targets::.
Targets>
<Makefile--Default        See *note Makefile---Default-Target::.
Target>
<Makefile--TWJR           See *note Makefile---TWJR-Targets::.
Targets>
<Makefile--Utility        See *note Makefile---Utility-Targets-1::.
Targets>
<Makefile--Variable       See *note Makefile---Variable-Definitions::.
Definitions>

* Menu:

* Makefile Variable Definitions::
* Makefile Default Rule::
* Makefile TWJR Targets::
* Makefile Utility Targets::
* Makefile Clean Targets::


File: Ruby2_5.info,  Node: Makefile Variable Definitions,  Next: Makefile Default Rule,  Up: The Makefile

E.1 Makefile Variable Definitions
=================================

<Makefile--Variable Definitions> ==
     # VARIABLE DEFINITIONS
     ######################
     FILE := Ruby2_5
     SHELL := /bin/bash


This chunk is called by {'Makefile'}; see its first definition at
*note Makefile::.


File: Ruby2_5.info,  Node: Makefile Default Rule,  Next: Makefile TWJR Targets,  Prev: Makefile Variable Definitions,  Up: The Makefile

E.2 Default Rule
================

The 'default' rule is to create a PDF document and all HTML files.
This assumes that the TEXI file has been generated and updated by hand
first.  Therefore, the target 'TWJR' will run both 'jrtangle' and
'jrweave', while the target 'WEAVE' or alternatively 'TEXI' will run
just 'jrweave' on the '.twjr' file.  Thereafter, you can update the
'.texi' file and run the 'default'.

<Makefile--Default Target> ==
     # DEFAULT Target
     ################
     .PHONY : default TWJR TANGLE WEAVE TEXI INFO PDF HTML
     .PHONY : twjr tangle weave texi info pdf html
     default : INFO PDF HTML


This chunk is called by {'Makefile'}; see its first definition at
*note Makefile::.


File: Ruby2_5.info,  Node: Makefile TWJR Targets,  Next: Makefile Utility Targets,  Prev: Makefile Default Rule,  Up: The Makefile

E.3 TWJR Targets
================

<Makefile--TWJR Targets> ==
     # TWJR TARGETS
     ##############
     TWJR : twjr
     twjr : tangle weave

     TANGLE : tangle
     tangle : $(FILE).twjr
         jrtangle $(FILE).twjr

     WEAVE : weave
     weave : TEXI
     TEXI  : texi
     texi  : $(FILE).texi
     $(FILE).texi : $(FILE).twjr
         jrweave $(FILE).twjr > $(FILE).texi

     INFO : info
     info : $(FILE).info
     $(FILE).info : $(FILE).texi
         makeinfo $(FILE).texi
     openinfo : INFO
         emacs $(FILE).info

     PDF : pdf
     pdf : $(FILE).pdf
     $(FILE).pdf : $(FILE).texi
         pdftexi2dvi --build=tidy --build-dir=build --quiet $(FILE).texi
     openpdf : PDF
         open $(FILE).pdf

     HTML : html
     html : $(FILE)/index.html
     $(FILE)/index.html : $(FILE).texi
         makeinfo --html $(FILE).texi
     openhtml : HTML
         open $(FILE)/index.html


This chunk is called by {'Makefile'}; see its first definition at
*note Makefile::.


File: Ruby2_5.info,  Node: Makefile Utility Targets,  Next: Makefile Clean Targets,  Prev: Makefile TWJR Targets,  Up: The Makefile

E.4 Utility Targets
===================

<Makefile--Utility Targets> +==
     # UTILITY TARGETS
     #################

This chunk is also defined in *note Makefile---Utility-Targets-1::.

This chunk is called by {'Makefile'}; see its first definition at
*note Makefile::.


File: Ruby2_5.info,  Node: Makefile Clean Targets,  Prev: Makefile Utility Targets,  Up: The Makefile

E.5 Clean Targets
=================

<Makefile--Clean Targets> ==
     # CLEAN TARGETS
     ###############
     .PHONY : clean veryclean dirclean distclean worldclean
     clean :
         rm -vf *~ .*~ \#*\#

     # clean tex detritus
     texclean : clean
         rm -vf *.{dvi,aux,log,toc,cp,cps,pg,pgs}

     # remove all dirs except HTML; remove *.{rb,sh} files from toplevel
     dirclean : clean
         for file in *; do [ -d $$file ] && [ $${file##$(FILE)*} ] && rm -vfr $$file; done;\
         rm -vf *.{rb,sh}

     # remove everything except .twjr, .texi, and Makefile
     distclean : dirclean
         for file in *; do [[ $$file =~ twjr|texi|Makefile ]] && : || rm -vrf $$file ; done;

     worldclean : distclean
         rm -fr $(FILE).{texi,info*,pdf} $(FILE)/


This chunk is called by {'Makefile'}; see its first definition at
*note Makefile::.


File: Ruby2_5.info,  Node: Code Chunk Summaries,  Next: Bibliography,  Prev: The Makefile,  Up: Top

Appendix F Code Chunk Summaries
*******************************

This major node presents alphabetical lists of all the file
definitions, the code chunk definitions, and the code chunk
references.

* Menu:

* File Definitions::
* Code Chunk Definitions::
* Code Chunk References::


File: Ruby2_5.info,  Node: File Definitions,  Next: Code Chunk Definitions,  Up: Code Chunk Summaries

F.1 Source File Definitions
===========================

{'Makefile'}
     This chunk is defined in *note Makefile::.
{'apiutil.awk'}
     This chunk is defined in *note apiutil-awk::.
{'eval.rb'}
     This chunk is defined in *note eval-rb::.
{'fact.rb'}
     This chunk is defined in *note fact-rb::.
{'guess.rb'}
     This chunk is defined in *note guess-rb::.
{'regx.rb'}
     This chunk is defined in *note regx-rb::.
{'ri20min.rb'}
     This chunk is defined in *note ri20min-rb::.
{'setpath.sh'}
     This chunk is defined in *note setpath-sh::.


File: Ruby2_5.info,  Node: Code Chunk Definitions,  Next: Code Chunk References,  Prev: File Definitions,  Up: Code Chunk Summaries

F.2 Code Chunk Definitions
==========================

<Makefile--Clean Targets>
     This chunk is defined in *note Makefile---Clean-Targets::.
<Makefile--Default Target>
     This chunk is defined in *note Makefile---Default-Target::.
<Makefile--TWJR Targets>
     This chunk is defined in *note Makefile---TWJR-Targets::.
<Makefile--Utility Targets>
     Multiple definitions occur in *note
     Makefile---Utility-Targets-1::, and *note
     Makefile---Utility-Targets-2::.

<Makefile--Variable Definitions>
     This chunk is defined in *note Makefile---Variable-Definitions::.
<MegaGreeter--Initialize Method>
     This chunk is defined in *note MegaGreeter---Initialize-Method::.
<MegaGreeter--Main Script>
     This chunk is defined in *note MegaGreeter---Main-Script::.
<MegaGreeter--say_bye Method>
     This chunk is defined in *note MegaGreeter---say-bye-Method::.
<MegaGreeter--say_hi Method>
     This chunk is defined in *note MegaGreeter---say-hi-Method::.
<apiutil--BEGIN Block>
     This chunk is defined in *note apiutil---BEGIN-Block::.
<apiutil--BEGIN-Ord Function Init>
     This chunk is defined in *note
     apiutil---BEGIN--Ord-Function-Init::.
<apiutil--BEGIN-Variable Defns>
     Multiple definitions occur in *note
     apiutil---BEGIN--Variable-Defns-1::, *note
     apiutil---BEGIN--Variable-Defns-2::, *note
     apiutil---BEGIN--Variable-Defns-3::, and *note
     apiutil---BEGIN--Variable-Defns-4::.

<apiutil--BEGINFILE Block>
     This chunk is defined in *note apiutil---BEGINFILE-Block::.
<apiutil--END Block>
     This chunk is defined in *note apiutil---END-Block::.
<apiutil--ENDFILE Block>
     This chunk is defined in *note apiutil---ENDFILE-Block::.
<apiutil--MAIN Block>
     This chunk is defined in *note apiutil---MAIN-Block::.
<apiutil--MAIN Block-Convert Symbols Function Defn>
     This chunk is defined in *note
     apiutil---MAIN-Block--Convert-Symbols-Function-Defn::.
<apiutil--MAIN Block-Main Loop>
     This chunk is defined in *note apiutil---MAIN-Block--Main-Loop::.
<apiutil--MAIN Block-Main Loop-Inside>
     Multiple definitions occur in *note
     apiutil---MAIN-Block--Main-Loop-Inside-1::, and *note
     apiutil---MAIN-Block--Main-Loop-Inside-2::.

<apiutil--MAIN Block-Main Loop-Inside_Processing>
     Multiple definitions occur in *note
     apiutil---MAIN-Block--Main-Loop-Inside-Processing-1::, *note
     apiutil---MAIN-Block--Main-Loop-Inside-Processing-2::, *note
     apiutil---MAIN-Block--Main-Loop-Inside-Processing-3::, and *note
     apiutil---MAIN-Block--Main-Loop-Inside-Processing-4::.

<apiutil--MAIN Block-Ord Function Defn>
     Multiple definitions occur in *note
     apiutil---MAIN-Block--Ord-Function-Defn-1::, and *note
     apiutil---MAIN-Block--Ord-Function-Defn-2::.

<eval--EvalWrapper-Constants>
     This chunk is defined in *note eval---EvalWrapper--Constants::.
<eval--EvalWrapper-Indentation Deltas>
     This chunk is defined in *note
     eval---EvalWrapper--Indentation-Deltas::.
<eval--Main-Get Line>
     This chunk is defined in *note eval---Main--Get-Line::.
<eval--Main-Process Line>
     This chunk is defined in *note eval---Main--Process-Line::.
<eval--Main-Process Line-If Not Line>
     This chunk is defined in *note
     eval---Main--Process-Line-If-Not-Line::.
<eval--Main-Process Line-Is Line>
     This chunk is defined in *note
     eval---Main--Process-Line-Is-Line::.
<eval--Main-Process Line-Is Line_Indentation>
     This chunk is defined in *note
     eval---Main--Process-Line-Is-Line-Indentation::.
<eval--Main-Process Line-Is Line_Worth Evaluating?>
     This chunk is defined in *note
     eval---Main--Process-Line-Is-Line-Worth-Evaluating-::.


File: Ruby2_5.info,  Node: Code Chunk References,  Prev: Code Chunk Definitions,  Up: Code Chunk Summaries

F.3 Code Chunk References
=========================

<Makefile--Clean Targets>

     This chunk is called by {'Makefile'}; see its first definition at
     *note Makefile::.
<Makefile--Default Target>

     This chunk is called by {'Makefile'}; see its first definition at
     *note Makefile::.
<Makefile--TWJR Targets>

     This chunk is called by {'Makefile'}; see its first definition at
     *note Makefile::.
<Makefile--Utility Targets>

     This chunk is called by {'Makefile'}; see its first definition at
     *note Makefile::.
<Makefile--Variable Definitions>

     This chunk is called by {'Makefile'}; see its first definition at
     *note Makefile::.
<MegaGreeter--Initialize Method>

     This chunk is called by {'ri20min.rb'}; see its first definition
     at *note ri20min-rb::.
<MegaGreeter--Main Script>

     This chunk is called by {'ri20min.rb'}; see its first definition
     at *note ri20min-rb::.
<MegaGreeter--say_bye Method>

     This chunk is called by {'ri20min.rb'}; see its first definition
     at *note ri20min-rb::.
<MegaGreeter--say_hi Method>

     This chunk is called by {'ri20min.rb'}; see its first definition
     at *note ri20min-rb::.
<apiutil--BEGIN Block>

     This chunk is called by {'apiutil.awk'}; see its first definition
     at *note apiutil-awk::.
<apiutil--BEGIN-Ord Function Init>

     This chunk is called by <apiutil--BEGIN Block>; see its first
     definition at *note apiutil---BEGIN-Block::.
<apiutil--BEGIN-Variable Defns>

     This chunk is called by <apiutil--BEGIN Block>; see its first
     definition at *note apiutil---BEGIN-Block::.
<apiutil--BEGINFILE Block>

     This chunk is called by {'apiutil.awk'}; see its first definition
     at *note apiutil-awk::.
<apiutil--END Block>

     This chunk is called by {'apiutil.awk'}; see its first definition
     at *note apiutil-awk::.
<apiutil--ENDFILE Block>

     This chunk is called by {'apiutil.awk'}; see its first definition
     at *note apiutil-awk::.
<apiutil--MAIN Block>

     This chunk is called by {'apiutil.awk'}; see its first definition
     at *note apiutil-awk::.
<apiutil--MAIN Block-Convert Symbols Function Defn>

     This chunk is called by <apiutil--MAIN Block>; see its first
     definition at *note apiutil---MAIN-Block::.
<apiutil--MAIN Block-Main Loop>

     This chunk is called by <apiutil--MAIN Block>; see its first
     definition at *note apiutil---MAIN-Block::.
<apiutil--MAIN Block-Main Loop-Inside>

     This chunk is called by <apiutil--MAIN Block-Main Loop>; see its
     first definition at *note apiutil---MAIN-Block--Main-Loop::.
<apiutil--MAIN Block-Main Loop-Inside_Processing>

     This chunk is called by <apiutil--MAIN Block-Main Loop-Inside>;
     see its first definition at *note
     apiutil---MAIN-Block--Main-Loop-Inside-1::.
<apiutil--MAIN Block-Ord Function Defn>

     This chunk is called by <apiutil--MAIN Block>; see its first
     definition at *note apiutil---MAIN-Block::.
<eval--EvalWrapper-Constants>

     This chunk is called by {'eval.rb'}; see its first definition at
     *note eval-rb::.
<eval--EvalWrapper-Indentation Deltas>

     This chunk is called by {'eval.rb'}; see its first definition at
     *note eval-rb::.
<eval--Main-Get Line>

     This chunk is called by {'eval.rb'}; see its first definition at
     *note eval-rb::.
<eval--Main-Process Line>

     This chunk is called by {'eval.rb'}; see its first definition at
     *note eval-rb::.
<eval--Main-Process Line-If Not Line>

     This chunk is called by <eval--Main-Process Line>; see its first
     definition at *note eval---Main--Process-Line::.
<eval--Main-Process Line-Is Line>

     This chunk is called by <eval--Main-Process Line>; see its first
     definition at *note eval---Main--Process-Line::.
<eval--Main-Process Line-Is Line_Indentation>

     This chunk is called by <eval--Main-Process Line-Is Line>; see
     its first definition at *note
     eval---Main--Process-Line-Is-Line::.
<eval--Main-Process Line-Is Line_Worth Evaluating?>

     This chunk is called by <eval--Main-Process Line-Is Line>; see
     its first definition at *note
     eval---Main--Process-Line-Is-Line::.


File: Ruby2_5.info,  Node: Bibliography,  Next: List of Tables,  Prev: Code Chunk Summaries,  Up: Top

Bibliography
************

'ProgrammingRuby --'

     Marek Hulan, Marek Jalen, Ivan Necas, 'Programming Ruby', Version
     0.2, September 25, 2017.


File: Ruby2_5.info,  Node: List of Tables,  Next: Concept Index,  Prev: Bibliography,  Up: Top

List of Tables
**************

* Menu:

* Table 2.1: table:variable-identifiers. List of Variable ...
* Table 2.2: table:global-variables.     List of Major System ...
* Table 2.3: table:accessor-shortcuts.   List of Accessor Shortcuts
* Table A.1: table:api.                  Core API
* Table A.2: table:api-classes-and-modules.
                                         List of Classes and ...
* Table A.3: table:api-methods.          List of API Methods
* Table A.4: table:core-topics.          Table of Core Topics
* Table B.1: AssertionHelpers.           Table of Assertion Helpers


File: Ruby2_5.info,  Node: Concept Index,  Next: Program Index,  Prev: List of Tables,  Up: Top

Index
*****

 [index ]
* Menu:

* "#symbol":                             FAQ Syntax.        (line 115)
* "falsey" values:                       FAQ Syntax.        (line  59)
* "name".intern:                         FAQ Syntax.        (line  83)
* "name".to_sym:                         FAQ Syntax.        (line  83)
* "truthy" values:                       FAQ Syntax.        (line  59)
* $!:                                    Ruby User's Guide On Exception Processing And rescue.
                                                            (line  78)
* $::                                    Using Code From Other Files.
                                                            (line   6)
* $LOAD_PATH:                            Using Code From Other Files.
                                                            (line   6)
* ++ and --:                             FAQ Methods.       (line  15)
* .. vs. ...:                            FAQ Syntax.        (line 203)
* :: operator:                           Ruby User's Guide On Modules.
                                                            (line  27)
* <apiutil--BEGIN Block>, definition:    apiutil.awk BEGIN Block.
                                                            (line   6)
* <apiutil--BEGIN Block>, use:           API Utility.       (line  12)
* <apiutil--BEGIN-Ord Function Init>, definition: apiutil Ord Function.
                                                            (line  22)
* <apiutil--BEGIN-Ord Function Init>, use: apiutil.awk BEGIN Block.
                                                            (line   6)
* <apiutil--BEGIN-Variable Defns>, definition: apiutil.awk MAIN Block.
                                                            (line  52)
* <apiutil--BEGIN-Variable Defns>, definition <1>: apiutil.awk MAIN Block.
                                                            (line 217)
* <apiutil--BEGIN-Variable Defns>, definition <2>: apiutil.awk MAIN Block.
                                                            (line 235)
* <apiutil--BEGIN-Variable Defns>, definition <3>: apiutil.awk MAIN Block.
                                                            (line 259)
* <apiutil--BEGIN-Variable Defns>, use:  apiutil.awk BEGIN Block.
                                                            (line   6)
* <apiutil--BEGINFILE Block>, definition: apiutil.awk BEGNFILE Block.
                                                            (line   8)
* <apiutil--BEGINFILE Block>, use:       API Utility.       (line  12)
* <apiutil--END Block>, definition:      apiutil.awk END Block.
                                                            (line   6)
* <apiutil--END Block>, use:             API Utility.       (line  12)
* <apiutil--ENDFILE Block>, definition:  apiutil.awk ENDFILE Block.
                                                            (line   6)
* <apiutil--ENDFILE Block>, use:         API Utility.       (line  12)
* <apiutil--MAIN Block-Convert Symbols Function Defn>, definition: convertsymbols() Function Definition.
                                                            (line  15)
* <apiutil--MAIN Block-Convert Symbols Function Defn>, use: apiutil.awk MAIN Block.
                                                            (line   6)
* <apiutil--MAIN Block-Main Loop-Inside>, definition: apiutil.awk MAIN Block.
                                                            (line 102)
* <apiutil--MAIN Block-Main Loop-Inside>, definition <1>: apiutil.awk MAIN Block.
                                                            (line 135)
* <apiutil--MAIN Block-Main Loop-Inside>, use: apiutil.awk MAIN Block.
                                                            (line  74)
* <apiutil--MAIN Block-Main Loop-Inside_Processing>, definition: apiutil.awk MAIN Block.
                                                            (line 194)
* <apiutil--MAIN Block-Main Loop-Inside_Processing>, definition <1>: apiutil.awk MAIN Block.
                                                            (line 273)
* <apiutil--MAIN Block-Main Loop-Inside_Processing>, definition <2>: apiutil.awk MAIN Block.
                                                            (line 309)
* <apiutil--MAIN Block-Main Loop-Inside_Processing>, definition <3>: apiutil.awk MAIN Block.
                                                            (line 345)
* <apiutil--MAIN Block-Main Loop-Inside_Processing>, use: apiutil.awk MAIN Block.
                                                            (line 135)
* <apiutil--MAIN Block-Main Loop>, definition: apiutil.awk MAIN Block.
                                                            (line  74)
* <apiutil--MAIN Block-Main Loop>, use:  apiutil.awk MAIN Block.
                                                            (line   6)
* <apiutil--MAIN Block-Ord Function Defn>, definition: apiutil Ord Function.
                                                            (line  30)
* <apiutil--MAIN Block-Ord Function Defn>, definition <1>: apiutil Ord Function.
                                                            (line  52)
* <apiutil--MAIN Block-Ord Function Defn>, use: apiutil.awk MAIN Block.
                                                            (line   6)
* <apiutil--MAIN Block>, definition:     apiutil.awk MAIN Block.
                                                            (line   6)
* <apiutil--MAIN Block>, use:            API Utility.       (line  12)
* <eval--EvalWrapper-Constants>, definition: eval Module Code.
                                                            (line   6)
* <eval--EvalWrapper-Constants>, use:    Ruby Eval Utility. (line  20)
* <eval--EvalWrapper-Indentation Deltas>, definition: eval Indentation Deltas Code.
                                                            (line   6)
* <eval--EvalWrapper-Indentation Deltas>, use: Ruby Eval Utility.
                                                            (line  20)
* <eval--Main-Get Line>, definition:     eval Main Get Line Code.
                                                            (line   6)
* <eval--Main-Get Line>, use:            Ruby Eval Utility. (line  20)
* <eval--Main-Process Line-If Not Line>, definition: eval If Not Line Code.
                                                            (line   6)
* <eval--Main-Process Line-If Not Line>, use: eval Main Process Line Code.
                                                            (line   6)
* <eval--Main-Process Line-Is Line>, definition: eval If Is Line Code.
                                                            (line   6)
* <eval--Main-Process Line-Is Line>, use: eval Main Process Line Code.
                                                            (line   6)
* <eval--Main-Process Line-Is Line_Indentation>, definition: eval If Is Line Code.
                                                            (line  34)
* <eval--Main-Process Line-Is Line_Indentation>, use: eval If Is Line Code.
                                                            (line   6)
* <eval--Main-Process Line-Is Line_Worth Evaluating?>, definition: eval If Is Line Code.
                                                            (line  59)
* <eval--Main-Process Line-Is Line_Worth Evaluating?>, use: eval If Is Line Code.
                                                            (line   6)
* <eval--Main-Process Line>, definition: eval Main Process Line Code.
                                                            (line   6)
* <eval--Main-Process Line>, use:        Ruby Eval Utility. (line  20)
* <Makefile--Clean Targets>, definition: Makefile Clean Targets.
                                                            (line   6)
* <Makefile--Clean Targets>, use:        The Makefile.      (line   6)
* <Makefile--Default Target>, definition: Makefile Default Rule.
                                                            (line  13)
* <Makefile--Default Target>, use:       The Makefile.      (line   6)
* <Makefile--TWJR Targets>, definition:  Makefile TWJR Targets.
                                                            (line   6)
* <Makefile--TWJR Targets>, use:         The Makefile.      (line   6)
* <Makefile--Utility Targets>, definition: apiutil Makefile Target.
                                                            (line  12)
* <Makefile--Utility Targets>, definition <1>: Makefile Utility Targets.
                                                            (line   6)
* <Makefile--Utility Targets>, use:      The Makefile.      (line   6)
* <Makefile--Variable Definitions>, definition: Makefile Variable Definitions.
                                                            (line   6)
* <Makefile--Variable Definitions>, use: The Makefile.      (line   6)
* <MegaGreeter--Initialize Method>, definition: Large Class Definition.
                                                            (line  41)
* <MegaGreeter--Initialize Method>, use: Large Class Definition.
                                                            (line  10)
* <MegaGreeter--Main Script>, definition: Large Class Definition.
                                                            (line 162)
* <MegaGreeter--Main Script>, use:       Large Class Definition.
                                                            (line  10)
* <MegaGreeter--say_bye Method>, definition: Large Class Definition.
                                                            (line 131)
* <MegaGreeter--say_bye Method>, use:    Large Class Definition.
                                                            (line  10)
* <MegaGreeter--say_hi Method>, definition: Large Class Definition.
                                                            (line  63)
* <MegaGreeter--say_hi Method>, use:     Large Class Definition.
                                                            (line  10)
* == vs equals():                        To Ruby From Java. (line  59)
* ===:                                   Ruby User's Guide On Control Structures.
                                                            (line  33)
* =begin:                                Block Ruby Comments.
                                                            (line   6)
* =end:                                  Block Ruby Comments.
                                                            (line   6)
* =~ matching operator:                  Ruby User's Guide on Regular Expressions.
                                                            (line 130)
* @post_create eval.rb:                  eval.rb Post Create.
                                                            (line   6)
* \Z:                                    FAQ Built-In Libraries.
                                                            (line  54)
* __FILE__ special variable:             Large Class Definition.
                                                            (line 151)
* {apiutil.awk}, definition:             API Utility.       (line  12)
* {eval.rb}, definition:                 Ruby Eval Utility. (line  20)
* {fact.rb}, definition:                 Ruby User's Guide On Simple Examples.
                                                            (line  17)
* {guess.rb}, definition:                Ruby User's Guide On Puzzle Program.
                                                            (line   6)
* {Makefile}, definition:                The Makefile.      (line   6)
* {regx.rb}, definition:                 Ruby User's Guide on Regular Expressions.
                                                            (line  31)
* {ri20min.rb}, definition:              Large Class Definition.
                                                            (line  10)
* {setpath.sh}, definition:              Initial Setup.     (line  23)
* access control:                        To Ruby From Java. (line  36)
* access control <1>:                    Ruby User's Guide On Access Control.
                                                            (line   6)
* access modifier scope:                 Access modifiers are Methods.
                                                            (line   6)
* access modifiers public, private, protected: Access modifiers are Methods.
                                                            (line   6)
* accessors:                             Ruby User's Guide On Accessors.
                                                            (line   6)
* accessors, using shortcuts:            Ruby User's Guide On Accessors.
                                                            (line  92)
* active variable:                       Ruby User's Guide On Global Variables.
                                                            (line  22)
* advanced:                              Advanced Ruby.     (line   6)
* Algol and Ruby:                        Ruby User's Guide On Simple Examples.
                                                            (line  54)
* and:                                   Logical Operators. (line   9)
* Andrew Hunt:                           Pragmatic Programmer's Guide.
                                                            (line   6)
* anonymous procedure objects:           Ruby User's Guide On Procedure Objects.
                                                            (line  56)
* API, classes and modules:              Classes And Modules API.
                                                            (line   6)
* api, files:                            Files API.         (line   6)
* argument lists, variable length:       Ruby User's Guide On Object Initialization.
                                                            (line  65)
* argument values, setting default values: Ruby User's Guide On Object Initialization.
                                                            (line  16)
* ArgumentError, after calling super:    FAQ Methods.       (line  61)
* arguments:                             Methods.           (line  16)
* arguments to a method:                 Ruby User's Guide on Methods.
                                                            (line  59)
* arithmetic:                            FAQ Extension Library.
                                                            (line  26)
* Array:                                 To Ruby From C and C++.
                                                            (line 155)
* array literals in brackets:            To Ruby From C and C++.
                                                            (line 114)
* array type:                            Data Types.        (line  36)
* array, converting to and from string:  Ruby User's Guide On Arrays And Hashes.
                                                            (line  29)
* array, creating:                       Ruby User's Guide On Arrays And Hashes.
                                                            (line   9)
* array, referring to elements:          Ruby User's Guide On Arrays And Hashes.
                                                            (line  23)
* array, sum elements in:                FAQ Other Features.
                                                            (line  18)
* arrays:                                Ruby User's Guide On Arrays And Hashes.
                                                            (line   6)
* arrays are dynamic and mutable:        To Ruby From C and C++.
                                                            (line 116)
* arrays, adding:                        To Ruby From C and C++.
                                                            (line 119)
* arrays, concatenating:                 Ruby User's Guide On Arrays And Hashes.
                                                            (line  16)
* arrays, repeating:                     Ruby User's Guide On Arrays And Hashes.
                                                            (line  16)
* assertions:                            Minitest.          (line  46)
* associative array:                     Ruby User's Guide On Arrays And Hashes.
                                                            (line  36)
* attribute accessors:                   Ruby User's Guide On Accessors.
                                                            (line   6)
* attributes:                            To Ruby From C and C++.
                                                            (line 137)
* attributes <1>:                        Ruby User's Guide On Accessors.
                                                            (line   6)
* attributes <2>:                        Objects.           (line  12)
* attr_accessor:                         Objects.           (line  12)
* attr_accessor :name:                   Altering Classes.  (line   9)
* attr_accessor, methods defined:        Altering Classes.  (line  41)
* attr_reader:                           Objects.           (line  12)
* attr_writer:                           Objects.           (line  12)
* basics:                                Ruby Basics.       (line   6)
* behavior:                              Advanced Methods.  (line  34)
* behavior, class:                       Advanced Objects.  (line   6)
* binary Ruby extension modules:         FAQ Syntax.        (line 249)
* binding of { ... }:                    FAQ Iterators.     (line  36)
* binding.local_variable_get(:symbol):   FAQ Syntax.        (line 127)
* block:                                 Large Class Definition.
                                                            (line  85)
* block <1>:                             To Ruby From C and C++.
                                                            (line 106)
* block for iterator:                    To Ruby From C and C++.
                                                            (line 154)
* block object, passed to iterator:      FAQ Iterators.     (line   9)
* block ruby comments:                   Block Ruby Comments.
                                                            (line   6)
* block scope:                           Blocks.            (line  25)
* block, used in an iterator:            FAQ Iterators.     (line  56)
* blocks:                                Blocks are Objects.
                                                            (line   6)
* blocks <1>:                            Blocks.            (line   6)
* block_given?:                          FAQ Iterators.     (line 112)
* boolean context:                       FAQ Syntax.        (line  59)
* boolean false:                         Data Types.        (line  23)
* boolean type:                          Data Types.        (line  31)
* braces, none:                          To Ruby From C and C++.
                                                            (line 101)
* branches page:                         Branches Page.     (line   6)
* break:                                 Ruby User's Guide On Control Structures.
                                                            (line  74)
* break statement:                       Ruby User's Guide on Regular Expressions.
                                                            (line  54)
* buffering:                             Ruby User's Guide On Puzzle Program.
                                                            (line  84)
* C library, use:                        FAQ Extension Library.
                                                            (line  15)
* call method:                           Ruby User's Guide On Procedure Objects.
                                                            (line  18)
* call method <1>:                       Blocks.            (line   6)
* calling method 2 levels up:            FAQ Methods.       (line  64)
* case conventions, enforced:            To Ruby From C and C++.
                                                            (line 144)
* case statement:                        Conditions.        (line  27)
* cast:                                  To Ruby From C and C++.
                                                            (line 149)
* casting, none:                         To Ruby From Java. (line  49)
* chop:                                  Ruby User's Guide on Regular Expressions.
                                                            (line  83)
* chop!:                                 Ruby User's Guide on Regular Expressions.
                                                            (line  83)
* chruby:                                chruby.            (line   6)
* Class:                                 Class.             (line  32)
* class constants:                       Ruby User's Guide On Class Constants.
                                                            (line   6)
* class constants in modules:            Ruby User's Guide On Class Constants.
                                                            (line  34)
* class constants, access to:            Ruby User's Guide On Class Constants.
                                                            (line  15)
* class definition:                      Defining Methods.  (line  70)
* class definition <1>:                  Ruby User's Guide on Classes.
                                                            (line  13)
* class definition, repeating:           FAQ Classes and Modules.
                                                            (line   6)
* class instance variable?:              FAQ Classes and Modules.
                                                            (line  12)
* class keyword:                         Defining Methods.  (line  70)
* class keyword <1>:                     Ruby User's Guide on Classes.
                                                            (line  13)
* class method:                          Advanced Objects.  (line  49)
* class method <1>:                      Advanced Objects.  (line 122)
* class methods:                         FAQ Classes and Modules.
                                                            (line  18)
* class methods, defining, 2 ways:       FAQ Classes and Modules.
                                                            (line  62)
* class variable:                        Methods and Variables.
                                                            (line  22)
* class variable @@:                     Naming conventions.
                                                            (line   9)
* class variables:                       Inheritance.       (line  34)
* class variables vs class instance variables: FAQ Classes and Modules.
                                                            (line  15)
* class variables?:                      FAQ Classes and Modules.
                                                            (line   9)
* class vs module:                       FAQ Classes and Modules.
                                                            (line  53)
* classes:                               Ruby User's Guide on Classes.
                                                            (line   6)
* classes and methods faq:               FAQ Classes and Modules.
                                                            (line   6)
* classes api:                           Classes And Modules API.
                                                            (line   6)
* classes, modifying:                    Altering Classes.  (line  19)
* classes, open:                         Classes are open.  (line   6)
* CLOS:                                  Ruby User's Guide On Singleton Methods.
                                                            (line  17)
* closures, proc objects:                Ruby User's Guide On Local Variables.
                                                            (line  57)
* cloud management:                      Installation - Running - About.
                                                            (line  70)
* cloud platforms:                       Installation - Running - About.
                                                            (line  69)
* collect:                               Pointers on Iteration.
                                                            (line  17)
* collection, looping over a range of values using for: Ruby User's Guide On Control Structures.
                                                            (line 114)
* collection, looping over elements using for: Ruby User's Guide On Control Structures.
                                                            (line 104)
* command line arguments in ARGV:        Ruby User's Guide On Simple Examples.
                                                            (line  35)
* comment block markers:                 Block Ruby Comments.
                                                            (line   6)
* comment markup format:                 Writing Documentation.
                                                            (line  32)
* comments:                              Ruby User's Guide On Nuts And Bolts.
                                                            (line  21)
* comments, multi-line:                  Block Ruby Comments.
                                                            (line   6)
* comparison operators:                  Logical Operators. (line  21)
* compilers in Ruby:                     Installation - Running - About.
                                                            (line  65)
* conditional expression, false values:  FAQ Syntax.        (line  73)
* constant:                              Variable Scope.    (line   6)
* constant <1>:                          Methods and Variables.
                                                            (line  22)
* constant naming convention:            Naming conventions.
                                                            (line   9)
* constant, class:                       Ruby User's Guide On Class Constants.
                                                            (line   6)
* constructor:                           To Ruby From C and C++.
                                                            (line 131)
* constructor <1>:                       To Ruby From Java. (line  52)
* container types:                       To Ruby From C and C++.
                                                            (line 155)
* context:                               Context.           (line   6)
* continuations, using:                  FAQ Other Features.
                                                            (line  20)
* control structures:                    Ruby User's Guide On Control Structures.
                                                            (line   6)
* control structures retry and redo:     Ruby User's Guide On Iterators.
                                                            (line  58)
* conventions:                           Language Conventions.
                                                            (line   6)
* conventions, naming:                   Naming conventions.
                                                            (line   6)
* core:                                  Ruby-Doc.          (line   6)
* Core API:                              Ruby-Doc.          (line   6)
* core api:                              Ruby-Doc.          (line  10)
* core reference:                        Ruby-Doc.          (line   6)
* current context:                       Advanced Objects.  (line  40)
* current object:                        Context.           (line   6)
* dangerous, destructive methods:        FAQ Methods.       (line  73)
* data types:                            Data Types.        (line   6)
* David Thomas:                          Pragmatic Programmer's Guide.
                                                            (line   6)
* debugger:                              Ruby Debugger.     (line   6)
* debugger for Ruby:                     FAQ Extension Library.
                                                            (line  12)
* def:                                   Defining Methods.  (line   6)
* def keyword:                           Ruby User's Guide on Classes.
                                                            (line  13)
* default argument values:               Ruby User's Guide On Object Initialization.
                                                            (line  16)
* define a method programatically:       Advanced Methods.  (line 119)
* defined? method:                       Variable Scope.    (line  20)
* defined? operator:                     Ruby User's Guide On Local Variables.
                                                            (line  24)
* define_method:                         Advanced Methods.  (line 119)
* destructive method:                    FAQ Methods.       (line  70)
* destructive method vs nondestructive method: Ruby User's Guide on Regular Expressions.
                                                            (line  83)
* developing Ruby:                       Developing Ruby.   (line   6)
* devops tools:                          Installation - Running - About.
                                                            (line  68)
* dictionary:                            Ruby User's Guide On Arrays And Hashes.
                                                            (line  36)
* differential programming:              Ruby User's Guide on Inheritance.
                                                            (line  67)
* directives:                            Writing Documentation.
                                                            (line  38)
* DLLs:                                  FAQ Syntax.        (line 249)
* do ... } while:                        FAQ Syntax.        (line 156)
* do keyword:                            To Ruby From C and C++.
                                                            (line 103)
* doc tools:                             To Ruby From Perl. (line  30)
* doc tools <1>:                         To Ruby From Python.
                                                            (line  29)
* Documentation:                         Documentation.     (line   6)
* documentation coverage report:         Writing Documentation.
                                                            (line  48)
* documentation tool:                    To Ruby From Java. (line  23)
* documentation, generating:             Generating Documention.
                                                            (line   6)
* dot:                                   Methods and Variables.
                                                            (line   6)
* dot notation:                          Ruby User's Guide on Methods.
                                                            (line  22)
* downloads, ruby-doc resources:         Ruby-Doc.          (line  24)
* duck typing:                           Large Class Definition.
                                                            (line 123)
* duck typing <1>:                       Duck Typing.       (line   6)
* duck typing <2>:                       Advanced Methods.  (line  42)
* Dylan:                                 Ruby User's Guide On Singleton Methods.
                                                            (line  17)
* dynamicly typed:                       To Ruby From C and C++.
                                                            (line  28)
* each:                                  Pointers on Iteration.
                                                            (line  17)
* each equivalent to for:                Ruby User's Guide On Control Structures.
                                                            (line 128)
* each method:                           Blocks.            (line  10)
* each method of iterator:               FAQ Iterators.     (line  25)
* each_byte:                             Ruby User's Guide On Iterators.
                                                            (line  26)
* each_line:                             Ruby User's Guide On Iterators.
                                                            (line  36)
* Eiffel and Ruby:                       Ruby User's Guide On Simple Examples.
                                                            (line  54)
* eigenclass:                            Advanced Objects.  (line  66)
* eigenclass <1>:                        Advanced Objects.  (line 124)
* eigenclass <2>:                        Advanced Objects.  (line 178)
* eigenclass <3>:                        Advanced Objects.  (line 198)
* eigenclass, access:                    Advanced Objects.  (line 137)
* Emacs:                                 Installation - Running - About.
                                                            (line  71)
* empty string:                          FAQ Syntax.        (line  73)
* empty value:                           Data Types.        (line  23)
* end keyword:                           Ruby User's Guide on Classes.
                                                            (line  13)
* ensure:                                Ruby User's Guide On Exception Processing and ensure.
                                                            (line   6)
* ensure <1>:                            Exceptions.        (line  16)
* ensure clause:                         FAQ Syntax.        (line 265)
* equal:                                 Logical Operators. (line  21)
* equivalence vs the same:               To Ruby From Java. (line  59)
* errors in OO:                          Ruby User's Guide on Methods.
                                                            (line  51)
* eval:                                  FAQ Syntax.        (line 115)
* eval.rb:                               Ruby User's Guide On Simple Examples.
                                                            (line 102)
* Exception class:                       Exceptions.        (line  34)
* exception handling:                    FAQ Syntax.        (line 254)
* exception processing:                  Ruby User's Guide On Exception Processing And rescue.
                                                            (line   6)
* exception processing <1>:              Ruby User's Guide On Exception Processing and ensure.
                                                            (line   6)
* exceptions:                            Files API.         (line  49)
* exceptions <1>:                        Exceptions.        (line   6)
* expression vs statement:               Ruby User's Guide On Simple Examples.
                                                            (line 124)
* extend:                                Modules.           (line  38)
* extension modules:                     To Ruby From C and C++.
                                                            (line  36)
* extensions that can be omitted:        Using Code From Other Files.
                                                            (line  21)
* factorial in Ruby:                     Ruby User's Guide On Simple Examples.
                                                            (line   9)
* false:                                 Data Types.        (line  23)
* false and nil:                         FAQ Syntax.        (line  59)
* FalseClass:                            FAQ Syntax.        (line  64)
* File object, no reference:             FAQ Built-In Libraries.
                                                            (line  30)
* file, copy:                            FAQ Built-In Libraries.
                                                            (line  21)
* file, count lines in:                  FAQ Other Features.
                                                            (line  12)
* file, line number:                     FAQ Built-In Libraries.
                                                            (line  24)
* file, process and update contents:     FAQ Built-In Libraries.
                                                            (line  18)
* files api:                             Files API.         (line   6)
* files, closing:                        FAQ Built-In Libraries.
                                                            (line  33)
* files, counting words:                 FAQ Built-In Libraries.
                                                            (line  39)
* files, reading vs modifying:           FAQ Built-In Libraries.
                                                            (line  15)
* files, sorting by modification time:   FAQ Built-In Libraries.
                                                            (line  36)
* find:                                  Pointers on Iteration.
                                                            (line  17)
* flush standard output:                 Ruby User's Guide On Puzzle Program.
                                                            (line  84)
* for equivalent to each:                Ruby User's Guide On Control Structures.
                                                            (line 128)
* for loop:                              Ruby User's Guide On Control Structures.
                                                            (line 104)
* for statement:                         Ruby User's Guide On Control Structures.
                                                            (line 104)
* fork vs thread:                        FAQ Built-In Libraries.
                                                            (line  57)
* function pointers:                     FAQ Syntax.        (line 237)
* function-like methods, where from?:    FAQ Methods.       (line  46)
* FXRuby:                                To Ruby From Java. (line  31)
* garbage collector:                     To Ruby From Java. (line  18)
* gemsets, manage different using RVM:   RVM.               (line   6)
* getting started:                       Ruby-Doc.          (line  20)
* GitHub, ruby repository:               Developing Ruby.   (line  54)
* global variable:                       Methods and Variables.
                                                            (line  22)
* global variable $:                     Naming conventions.
                                                            (line   9)
* global variable $!:                    Ruby User's Guide On Exception Processing And rescue.
                                                            (line  78)
* global variable, tracing:              Ruby User's Guide On Global Variables.
                                                            (line  22)
* global variables:                      Ruby User's Guide On Global Variables.
                                                            (line   6)
* global variables, predefined:          Variable Scope.    (line  38)
* globals:                               Files API.         (line  19)
* greater than, greater than or equal:   Logical Operators. (line  21)
* green threads vs native threads:       To Ruby From C and C++.
                                                            (line 160)
* gsub method:                           Ruby User's Guide on Regular Expressions.
                                                            (line 113)
* gtk+:                                  FAQ Extension Library.
                                                            (line  24)
* guess.chop!:                           Ruby User's Guide On Puzzle Program.
                                                            (line  49)
* GUI toolkits:                          To Ruby From Java. (line  31)
* Hash:                                  To Ruby From C and C++.
                                                            (line 155)
* hash:                                  Ruby User's Guide On Arrays And Hashes.
                                                            (line  36)
* hash styles:                           Data Types.        (line  51)
* hash type:                             Data Types.        (line  44)
* heap:                                  To Ruby From C and C++.
                                                            (line  89)
* help tools:                            Help Tools.        (line   6)
* identifier with capital letter, method?: FAQ Methods.     (line  58)
* if modifier:                           Ruby User's Guide on Regular Expressions.
                                                            (line  61)
* immediate values:                      FAQ Syntax.        (line  46)
* import:                                To Ruby From Java. (line  34)
* include:                               Ruby User's Guide On Nuts And Bolts.
                                                            (line 119)
* include a module, mixin:               Ruby User's Guide On Modules.
                                                            (line  50)
* include statement:                     Ruby User's Guide On Modules.
                                                            (line  27)
* include vs extend:                     FAQ Classes and Modules.
                                                            (line  81)
* inheritance:                           Ruby User's Guide on Inheritance.
                                                            (line   6)
* inheritance <1>:                       Inheritance.       (line   6)
* inheritance <2>:                       Class.             (line  65)
* initialization of objects:             Ruby User's Guide On Object Initialization.
                                                            (line   6)
* initialize method:                     Large Class Definition.
                                                            (line  41)
* initialize method <1>:                 Ruby User's Guide On Object Initialization.
                                                            (line   6)
* initialize, constructor:               To Ruby From Java. (line  52)
* inject:                                Pointers on Iteration.
                                                            (line  17)
* inline conditional:                    Conditions.        (line  13)
* insert code into a string:             Defining Methods.  (line  43)
* inspect method:                        Ruby User's Guide On Accessors.
                                                            (line  59)
* install on macOS:                      Installation - Running - About.
                                                            (line   9)
* installer, third party:                Installers.        (line   6)
* instance of a class:                   Ruby User's Guide on Classes.
                                                            (line   6)
* instance variabes, as attributes:      Ruby User's Guide On Accessors.
                                                            (line   6)
* instance variable:                     Defining Methods.  (line  86)
* instance variable <1>:                 Methods and Variables.
                                                            (line  22)
* instance variable @:                   Naming conventions.
                                                            (line   9)
* instance variables:                    Ruby User's Guide On Instance Variables.
                                                            (line   6)
* instance variables, accessing:         FAQ Methods.       (line  49)
* instance variables, encapsulation:     Defining Methods.  (line 109)
* instance_methods(false):               FAQ Built-In Libraries.
                                                            (line   9)
* instantiating a class:                 Ruby User's Guide on Classes.
                                                            (line  33)
* Interactive Ruby (IRB):                Interactive Ruby Execution.
                                                            (line   6)
* interactively use Ruby:                FAQ Extension Library.
                                                            (line   9)
* interfaces, none, use mixins:          To Ruby From Java. (line  53)
* introspection:                         Class.             (line 107)
* invoke method:                         Ruby User's Guide on Methods.
                                                            (line  22)
* invoking original method after redefinition: FAQ Methods. (line  67)
* irb:                                   Interactive Ruby.  (line   6)
* irb <1>:                               To Ruby From Python.
                                                            (line  13)
* irb <2>:                               Installation - Running - About.
                                                            (line  31)
* irb tool:                              Interactive Ruby Execution.
                                                            (line   6)
* IronRuby:                              Installation - Running - About.
                                                            (line  53)
* issue tracker:                         Developing Ruby.   (line  62)
* issue tracking:                        Issue Tracking.    (line   6)
* iteration:                             To Ruby From C and C++.
                                                            (line 154)
* iteration <1>:                         Pointers on Iteration.
                                                            (line   6)
* iterator:                              Large Class Definition.
                                                            (line  85)
* iterator as substitute for for loop:   Ruby User's Guide On Control Structures.
                                                            (line 128)
* iterator method:                       To Ruby From C and C++.
                                                            (line 154)
* iterator, block:                       FAQ Iterators.     (line  56)
* iterator, defining:                    Ruby User's Guide On Iterators.
                                                            (line  17)
* iterators:                             FAQ Iterators.     (line   6)
* iterators of String class:             Ruby User's Guide On Iterators.
                                                            (line  24)
* iterators, Ruby User's Guide:          Ruby User's Guide On Iterators.
                                                            (line   6)
* javadoc:                               To Ruby From Java. (line  23)
* Jekyll:                                Installation - Running - About.
                                                            (line  72)
* join:                                  Ruby User's Guide On Arrays And Hashes.
                                                            (line  29)
* join method, respond to:               Large Class Definition.
                                                            (line 116)
* JRuby:                                 Installation - Running - About.
                                                            (line  53)
* json style hash:                       Data Types.        (line  51)
* Kernel:                                FAQ Syntax.        (line 149)
* key, for hash:                         Ruby User's Guide On Arrays And Hashes.
                                                            (line  36)
* keyword def:                           Ruby User's Guide on Classes.
                                                            (line  13)
* keyword new:                           Ruby User's Guide on Classes.
                                                            (line  33)
* keywords:                              Files API.         (line  22)
* keywords class and end:                Ruby User's Guide on Classes.
                                                            (line  13)
* lambda as a synonym of Proc:           FAQ Iterators.     (line  87)
* lambda method:                         Blocks are Objects.
                                                            (line  19)
* less than, less than or equal:         Logical Operators. (line  21)
* LessJS compiler:                       Installation - Running - About.
                                                            (line  65)
* line number of input file:             FAQ Built-In Libraries.
                                                            (line  24)
* load:                                  FAQ Syntax.        (line 245)
* load <1>:                              Ruby User's Guide On Nuts And Bolts.
                                                            (line 119)
* load <2>:                              Using Code From Other Files.
                                                            (line  14)
* load path:                             Using Code From Other Files.
                                                            (line   6)
* local variable:                        Methods and Variables.
                                                            (line  22)
* local variable scope:                  Ruby User's Guide On Local Variables.
                                                            (line  15)
* local variables:                       Ruby User's Guide On Local Variables.
                                                            (line   6)
* logical expressions:                   Logical Operators. (line   9)
* logical operators:                     Logical Operators. (line   6)
* loop:                                  FAQ Syntax.        (line 149)
* loop interrupts:                       Ruby User's Guide On Control Structures.
                                                            (line  74)
* loop, for:                             Ruby User's Guide On Control Structures.
                                                            (line 104)
* loops:                                 Loops.             (line   6)
* loops using while:                     Ruby User's Guide On Control Structures.
                                                            (line  53)
* loopup path:                           Class.             (line  86)
* macOS, install:                        Installation - Running - About.
                                                            (line   9)
* MagLev:                                Installation - Running - About.
                                                            (line  53)
* mailing lists:                         Developing Ruby.   (line  62)
* manage Rubies using chruby:            chruby.            (line   6)
* Markdown:                              Writing Documentation.
                                                            (line  32)
* markup directives:                     Markup Directives. (line   6)
* Marshal:                               FAQ Built-In Libraries.
                                                            (line  60)
* match method:                          Regular Expressions.
                                                            (line   6)
* match, regular expression:             Logical Operators. (line  21)
* MatchData#begin and MatchData#end:     FAQ Other Features.
                                                            (line  15)
* matching operator:                     Ruby User's Guide on Regular Expressions.
                                                            (line 130)
* member variables, access to:           To Ruby From C and C++.
                                                            (line 137)
* memory management:                     To Ruby From Java. (line  18)
* messages to objects:                   Ruby User's Guide on Methods.
                                                            (line   9)
* metaclass:                             FAQ Classes and Modules.
                                                            (line  21)
* metaprogram methods:                   Writing Documentation.
                                                            (line  38)
* method access:                         Method Access.     (line   6)
* method definition:                     Ruby User's Guide on Classes.
                                                            (line  13)
* method invocation:                     Ruby User's Guide on Methods.
                                                            (line  22)
* method lookup:                         Advanced Objects.  (line  72)
* method lookups:                        Advanced Objects.  (line 166)
* method overloading:                    Ruby User's Guide On Object Initialization.
                                                            (line  65)
* method parameters:                     Defining Methods.  (line  33)
* method redefinition:                   Ruby User's Guide on Redefinition Of Methods.
                                                            (line   6)
* method, define:                        Advanced Objects.  (line  27)
* method, destructive:                   FAQ Methods.       (line  70)
* method, invoking:                      FAQ Methods.       (line   9)
* method, invoking <1>:                  Defining Methods.  (line  26)
* methods:                               Ruby User's Guide on Methods.
                                                            (line   6)
* methods <1>:                           Methods and Variables.
                                                            (line   6)
* methods <2>:                           Class.             (line 122)
* methods <3>:                           Advanced Methods.  (line   6)
* methods api:                           Files API.         (line  55)
* methods api <1>:                       Methods API.       (line   6)
* methods are virtual:                   To Ruby From C and C++.
                                                            (line 132)
* methods, calling:                      Files API.         (line  44)
* methods, class:                        FAQ Classes and Modules.
                                                            (line  18)
* methods, defining:                     Defining Methods.  (line   6)
* methods, return value:                 Methods.           (line   6)
* method_missing:                        Advanced Methods.  (line 145)
* method_missing method:                 Missing methods.   (line   6)
* Minitest:                              Minitest.          (line   6)
* mixin:                                 Ruby User's Guide On Modules.
                                                            (line  43)
* mixin example:                         FAQ Classes and Modules.
                                                            (line  59)
* mixin technique:                       Ruby User's Guide On Modules.
                                                            (line  50)
* mixins:                                To Ruby From C and C++.
                                                            (line 142)
* mixins <1>:                            To Ruby From Java. (line  53)
* mixins <2>:                            Modules.           (line  23)
* mixins <3>:                            Class.             (line  86)
* modifier statements:                   Conditions.        (line  13)
* Module:                                Class.             (line  86)
* module function?:                      FAQ Classes and Modules.
                                                            (line  50)
* modules:                               Ruby User's Guide On Modules.
                                                            (line   6)
* modules <1>:                           Modules.           (line   6)
* modules api:                           Classes And Modules API.
                                                            (line   6)
* modules, class constants:              Ruby User's Guide On Class Constants.
                                                            (line  34)
* modules, subclassing?:                 FAQ Classes and Modules.
                                                            (line  56)
* monkey patching:                       Class.             (line   9)
* MRI:                                   Installation - Running - About.
                                                            (line  53)
* mruby:                                 Installation - Running - About.
                                                            (line  53)
* multiple inherance using mixins:       Modules.           (line  23)
* multiple inheritance:                  To Ruby From C and C++.
                                                            (line 142)
* multiple inheritance <1>:              Ruby User's Guide On Modules.
                                                            (line  43)
* multiple installations, manage using RVM: RVM.            (line   6)
* multiple Rubies, command-line tool uru: uru.              (line   6)
* multithreading:                        To Ruby From C and C++.
                                                            (line 160)
* name:                                  Class.             (line 112)
* negated conditions:                    Ruby User's Guide On Control Structures.
                                                            (line  68)
* new keyword:                           Ruby User's Guide on Classes.
                                                            (line  33)
* new method:                            Advanced Objects.  (line  16)
* NewtonScript:                          Ruby User's Guide On Singleton Methods.
                                                            (line  17)
* next:                                  Ruby User's Guide On Control Structures.
                                                            (line  74)
* nil:                                   Data Types.        (line  23)
* nil and false, similariaties and differences: FAQ Syntax. (line  59)
* nil vs null:                           To Ruby From Java. (line  55)
* NilClass:                              FAQ Syntax.        (line  64)
* not:                                   Logical Operators. (line   9)
* not equal:                             Logical Operators. (line  21)
* null vs nil:                           To Ruby From Java. (line  55)
* number classes:                        Data Types.        (line  18)
* object inheritance:                    Inheritance.       (line   6)
* object reference is self:              To Ruby From C and C++.
                                                            (line 138)
* Object#instance_methods:               Defining Methods.  (line 116)
* Object#respond_to?:                    Defining Methods.  (line 146)
* object, create:                        Advanced Objects.  (line  16)
* object, create from class definition:  Defining Methods.  (line  95)
* objects:                               Advanced Objects.  (line   6)
* objects, everything including numbers: To Ruby From Java. (line  40)
* objects, strongly and dynamically typed: To Ruby From C and C++.
                                                            (line 129)
* objects, strongly typed:               To Ruby From Java. (line  19)
* object_id methods:                     Symbols are not lightweight Strings.
                                                            (line  21)
* OpenShift cloud platform:              Installation - Running - About.
                                                            (line  69)
* operators?:                            FAQ Methods.       (line  12)
* or:                                    Logical Operators. (line   9)
* overridden method:                     Inheritance.       (line   6)
* p method:                              Ruby User's Guide On Accessors.
                                                            (line  78)
* parameters, methods:                   Defining Methods.  (line  33)
* parentheses, none for condition expressions: To Ruby From C and C++.
                                                            (line  98)
* parentheses, optional:                 Defining Methods.  (line  26)
* parentheses, optional <1>:             Defining Methods.  (line  60)
* parentheses, optional for method calls: To Ruby From C and C++.
                                                            (line 100)
* parentheses, optional in method calls: To Ruby From Java. (line  38)
* Patch Writer's Guide:                  Developing Ruby.   (line  73)
* patching of Ruby:                      Developing Ruby.   (line  38)
* polymorphism:                          Ruby User's Guide on Methods.
                                                            (line  37)
* Pragmatic Programmer's Guide:          Pragmatic Programmer's Guide.
                                                            (line   6)
* precedence:                            Files API.         (line  64)
* precedence of or:                      FAQ Syntax.        (line 211)
* precedence, iterators, different results: FAQ Iterators.  (line  36)
* predicate method:                      Ruby User's Guide on Regular Expressions.
                                                            (line 106)
* predicate method naming convention:    Ruby User's Guide on Regular Expressions.
                                                            (line 106)
* predicate methods:                     FAQ Syntax.        (line  68)
* private:                               Method Access.     (line   6)
* private vs protected:                  FAQ Methods.       (line  52)
* Proc:                                  Blocks are Objects.
                                                            (line   6)
* proc:                                  Ruby User's Guide On Procedure Objects.
                                                            (line   6)
* Proc as method argument:               Ruby User's Guide On Procedure Objects.
                                                            (line  26)
* Proc object, passed to iterator:       FAQ Iterators.     (line   9)
* proc, execute:                         Ruby User's Guide On Procedure Objects.
                                                            (line  18)
* Proc, invoke:                          Ruby User's Guide On Procedure Objects.
                                                            (line  18)
* Proc.new, followed by call:            FAQ Iterators.     (line  87)
* procedure objects:                     Ruby User's Guide On Procedure Objects.
                                                            (line   6)
* Procs:                                 Ruby User's Guide On Procedure Objects.
                                                            (line   6)
* program output, display using less:    FAQ Built-In Libraries.
                                                            (line  27)
* Programming Ruby:                      Pragmatic Programmer's Guide.
                                                            (line   6)
* Programming Ruby by Hulan:             Programming Ruby by Hulan.
                                                            (line   6)
* protected:                             Method Access.     (line   6)
* prototype-based languages:             Ruby User's Guide On Singleton Methods.
                                                            (line  17)
* pseudo-variables self and nil:         Ruby User's Guide On Variables.
                                                            (line  32)
* public:                                Method Access.     (line   6)
* puts:                                  Ruby User's Guide On Puzzle Program.
                                                            (line  57)
* Qt:                                    To Ruby From Java. (line  31)
* raise:                                 Exceptions.        (line  13)
* raise <1>:                             Exceptions.        (line  13)
* raise an error:                        Ruby User's Guide on Methods.
                                                            (line  51)
* raise exception:                       Ruby User's Guide On Exception Processing And rescue.
                                                            (line  78)
* random number seeds:                   FAQ Built-In Libraries.
                                                            (line  12)
* range expression:                      Ruby User's Guide On Control Structures.
                                                            (line  26)
* range operators .. vs ...:             FAQ Syntax.        (line 203)
* rbenv:                                 rbenv.             (line   6)
* rbenv <1>:                             Installation - Running - About.
                                                            (line  22)
* rbenv version manager:                 ruby-build.        (line   6)
* rbeval:                                Ruby Eval Utility. (line  10)
* RD:                                    Writing Documentation.
                                                            (line  32)
* RDoc:                                  Help Tools.        (line   6)
* rdoc:                                  Help Tools.        (line   6)
* RDoc <1>:                              RDoc.              (line   6)
* rdoc <1>:                              RDoc.              (line   6)
* rdoc <2>:                              Generating Documention.
                                                            (line   6)
* RDoc <2>:                              To Ruby From Java. (line  23)
* rdoc <3>:                              To Ruby From Java. (line  23)
* rdoc <4>:                              To Ruby From Perl. (line  30)
* rdoc <5>:                              To Ruby From Python.
                                                            (line  29)
* RDoc::Markup:                          Writing Documentation.
                                                            (line  32)
* RDoc::Markup@Directives:               Writing Documentation.
                                                            (line  38)
* RDoc::Parser::Ruby:                    Writing Documentation.
                                                            (line  38)
* read one line from standard input:     Ruby User's Guide On Puzzle Program.
                                                            (line  39)
* reader accessor:                       Ruby User's Guide On Accessors.
                                                            (line   6)
* redefine a method:                     Ruby User's Guide on Redefinition Of Methods.
                                                            (line   6)
* redo:                                  Ruby User's Guide On Control Structures.
                                                            (line  74)
* redo <1>:                              Ruby User's Guide On Iterators.
                                                            (line  58)
* reference implementation, MRI:         Installation - Running - About.
                                                            (line  53)
* reference, core:                       Ruby-Doc.          (line   6)
* reference, standard library:           Ruby-Doc.          (line   6)
* reflection:                            Ruby User's Guide On Object Initialization.
                                                            (line  65)
* regexes:                               To Ruby From Perl. (line  17)
* regular expression match:              Logical Operators. (line  21)
* regular expression, escaping a backslash: FAQ Built-In Libraries.
                                                            (line  48)
* regular expressions:                   Ruby User's Guide on Regular Expressions.
                                                            (line   6)
* regular expressions <1>:               Regular Expressions.
                                                            (line   6)
* regular expressions at work:           Ruby User's Guide on Regular Expressions.
                                                            (line 113)
* relationship operator ===:             Ruby User's Guide On Control Structures.
                                                            (line  33)
* releases:                              Releases Page.     (line   6)
* repository, Subversion:                Developing Ruby.   (line  49)
* require:                               FAQ Syntax.        (line 245)
* require <1>:                           To Ruby From Java. (line  34)
* require <2>:                           Ruby User's Guide On Nuts And Bolts.
                                                            (line 119)
* require <3>:                           Using Code From Other Files.
                                                            (line   6)
* rescue:                                Ruby User's Guide On Exception Processing And rescue.
                                                            (line   6)
* rescue <1>:                            Exceptions.        (line  16)
* rescue clause:                         FAQ Syntax.        (line 265)
* resources, getting started:            Ruby-Doc.          (line  20)
* respond to message, instance variable: Large Class Definition.
                                                            (line  54)
* respond_to? method:                    Large Class Definition.
                                                            (line  54)
* response to method:                    Advanced Methods.  (line  34)
* respository, GitHub:                   Developing Ruby.   (line  54)
* result:                                Return Values.     (line  18)
* retry:                                 Ruby User's Guide On Iterators.
                                                            (line  58)
* retry <1>:                             Ruby User's Guide On Exception Processing And rescue.
                                                            (line  62)
* return:                                Ruby User's Guide On Control Structures.
                                                            (line  74)
* return keyword:                        Methods.           (line   6)
* return mutliple values:                FAQ Methods.       (line  75)
* return statement unnecessary:          Ruby User's Guide On Simple Examples.
                                                            (line  54)
* return values:                         Return Values.     (line   6)
* ri:                                    Help Tools.        (line   6)
* ri <1>:                                ri.                (line   6)
* ri <2>:                                Pointers on Iteration.
                                                            (line  24)
* rocket style hash:                     Data Types.        (line  51)
* Rubies, switch between:                Installers.        (line   6)
* Rubinius:                              Installation - Running - About.
                                                            (line  53)
* Ruby 2.5.1. API:                       API Documentation. (line   6)
* Ruby core:                             Developing Ruby.   (line  16)
* Ruby Core mailing list:                Developing Ruby.   (line  62)
* Ruby development, tracking:            Developing Ruby.   (line  26)
* Ruby Documentation:                    Help Tools.        (line   6)
* Ruby Documentation <1>:                Ruby-Doc.          (line   6)
* Ruby Index:                            Help Tools.        (line   6)
* Ruby Index ri:                         ri.                (line   6)
* Ruby Interactive:                      Help Tools.        (line   6)
* Ruby Interactive <1>:                  ri.                (line   6)
* Ruby Tk:                               To Ruby From Java. (line  31)
* Ruby, what it is:                      Ruby User's Guide On What Ruby IS.
                                                            (line   7)
* ruby-build plugin:                     ruby-build.        (line   6)
* Ruby-Doc:                              Ruby-Doc.          (line   6)
* Ruby-GNOME2:                           To Ruby From Java. (line  31)
* RVM version manager:                   Installers.        (line   6)
* scope of local variable:               Ruby User's Guide On Local Variables.
                                                            (line  15)
* scope, access modifiers:               Access modifiers are Methods.
                                                            (line   6)
* scope, determine programmatically:     Variable Scope.    (line  20)
* scope, variables:                      Variable Scope.    (line   6)
* script code:                           Large Class Definition.
                                                            (line 151)
* self:                                  Ruby User's Guide on Methods.
                                                            (line  66)
* Self:                                  Ruby User's Guide On Singleton Methods.
                                                            (line  17)
* self, meaning:                         FAQ Classes and Modules.
                                                            (line  84)
* self, object reference:                To Ruby From C and C++.
                                                            (line 138)
* send:                                  FAQ Syntax.        (line 129)
* send method:                           Advanced Methods.  (line  83)
* setup:                                 Minitest.          (line  37)
* shared libraries:                      FAQ Syntax.        (line 249)
* simple functions?:                     FAQ Methods.       (line  43)
* singleton class?:                      FAQ Classes and Modules.
                                                            (line  47)
* singleton method:                      FAQ Methods.       (line  15)
* singleton method <1>:                  FAQ Classes and Modules.
                                                            (line  21)
* singleton methods:                     Singleton methods. (line   6)
* singleton methods <1>:                 Ruby User's Guide On Singleton Methods.
                                                            (line   6)
* sort:                                  Pointers on Iteration.
                                                            (line  17)
* source, building:                      Building From Source.
                                                            (line   6)
* specificationm, ruby:                  Ruby-Doc.          (line  27)
* split:                                 Ruby User's Guide On Arrays And Hashes.
                                                            (line  29)
* standard input object STDIN:           Ruby User's Guide On Puzzle Program.
                                                            (line  39)
* standard lib:                          Ruby-Doc.          (line   6)
* standard library:                      Ruby-Doc.          (line   6)
* standard library <1>:                  Files API.         (line  34)
* Standard Library API:                  Ruby-Doc.          (line   6)
* standard library api:                  Ruby-Doc.          (line  15)
* Standard Library reference:            Ruby-Doc.          (line   6)
* StandardError class:                   Exceptions.        (line  34)
* StandarError class:                    Exceptions.        (line  16)
* state, object:                         Advanced Objects.  (line   6)
* statement delimiters:                  Ruby User's Guide On Nuts And Bolts.
                                                            (line   9)
* statement vs expression:               Ruby User's Guide On Simple Examples.
                                                            (line 124)
* static checking, none:                 To Ruby From Java. (line  41)
* static page generators:                Installation - Running - About.
                                                            (line  72)
* statically typed:                      To Ruby From C and C++.
                                                            (line  28)
* STDIN:                                 Ruby User's Guide On Puzzle Program.
                                                            (line  39)
* STDIN.gets:                            Ruby User's Guide On Puzzle Program.
                                                            (line  39)
* string + and *:                        Ruby User's Guide on Strings.
                                                            (line  20)
* string class, creating:                Data Types.        (line  13)
* String or Symbol:                      Symbols are not lightweight Strings.
                                                            (line  34)
* Strings:                               Ruby User's Guide on Strings.
                                                            (line   6)
* strings, quoting syntax and semantics: Ruby User's Guide on Strings.
                                                            (line   9)
* strings, sort alphabetically:          FAQ Built-In Libraries.
                                                            (line  42)
* strongly typed objects:                To Ruby From C and C++.
                                                            (line  80)
* sub vs sub!:                           FAQ Built-In Libraries.
                                                            (line  51)
* subclass:                              Ruby User's Guide on Inheritance.
                                                            (line   6)
* Subversion:                            Developing Ruby.   (line  26)
* Subversion repository:                 Developing Ruby.   (line  49)
* super:                                 Ruby User's Guide on Redefinition Of Methods.
                                                            (line  35)
* super <1>:                             Inheritance.       (line   6)
* super gives ArgumentError:             FAQ Methods.       (line  61)
* superclass:                            Ruby User's Guide on Inheritance.
                                                            (line   6)
* sygils in Ruby:                        To Ruby From Perl. (line  41)
* Symbol:                                Symbols are not lightweight Strings.
                                                            (line  26)
* Symbol object:                         FAQ Syntax.        (line  83)
* Symbol or String:                      Symbols are not lightweight Strings.
                                                            (line  34)
* symbol type:                           Data Types.        (line  66)
* symbol, access value of:               FAQ Syntax.        (line 115)
* symbol.to_s:                           FAQ Syntax.        (line 115)
* symbols:                               Symbols are not lightweight Strings.
                                                            (line   6)
* symbols as enumeration values:         FAQ Syntax.        (line 105)
* symbols as hash keys:                  FAQ Syntax.        (line  99)
* symbols, unique constants:             FAQ Syntax.        (line 105)
* syntax:                                Files API.         (line  37)
* syntax, Testunit:                      Minitest.          (line  17)
* tabs, expand into spaces:              FAQ Built-In Libraries.
                                                            (line  45)
* Tcl/Tk, use:                           FAQ Extension Library.
                                                            (line  18)
* TDD:                                   Minitest.          (line 103)
* teardown:                              Minitest.          (line  37)
* templates:                             To Ruby From C and C++.
                                                            (line 149)
* ternary operator:                      FAQ Other Features.
                                                            (line   9)
* test syntax forms:                     Minitest.          (line   6)
* testing:                               Ruby Testing.      (line   6)
* testing frameworks:                    Testing Frameworks.
                                                            (line   6)
* Testunit:                              Minitest.          (line  17)
* Texinfo document formatting language:  Conventions.       (line   6)
* thread vs fork:                        FAQ Built-In Libraries.
                                                            (line  57)
* threads, native vs green:              To Ruby From C and C++.
                                                            (line 160)
* Tk, won't work:                        FAQ Extension Library.
                                                            (line  21)
* TomDoc:                                Writing Documentation.
                                                            (line  32)
* tools, help:                           Help Tools.        (line   6)
* to_i method:                           Ruby User's Guide On Simple Examples.
                                                            (line  35)
* to_s method:                           Ruby User's Guide On Accessors.
                                                            (line  78)
* track Ruby development:                Developing Ruby.   (line  26)
* trap:                                  FAQ Built-In Libraries.
                                                            (line  62)
* trap method, and Proc:                 Ruby User's Guide On Procedure Objects.
                                                            (line  40)
* truth values:                          To Ruby From C and C++.
                                                            (line 111)
* type conversions:                      To Ruby From C and C++.
                                                            (line 157)
* type declarations, none:               To Ruby From Java. (line  46)
* typed dynamically:                     Installation - Running - About.
                                                            (line  60)
* typed strongly:                        Installation - Running - About.
                                                            (line  55)
* unit testing lib:                      To Ruby From C and C++.
                                                            (line 161)
* unless:                                Ruby User's Guide On Control Structures.
                                                            (line  68)
* until:                                 Ruby User's Guide On Control Structures.
                                                            (line  68)
* until <1>:                             Loops.             (line   6)
* uru:                                   uru.               (line   6)
* utility programs:                      Utility Programs.  (line   6)
* value, everthing has one:              Everything has a value.
                                                            (line   6)
* variable scope:                        Variable Scope.    (line   6)
* variable, active:                      Ruby User's Guide On Global Variables.
                                                            (line  22)
* variable, class @@:                    Naming conventions.
                                                            (line   9)
* variable, instance:                    Ruby User's Guide On Instance Variables.
                                                            (line   6)
* variable, instance @:                  Naming conventions.
                                                            (line   9)
* variable, local:                       Ruby User's Guide On Local Variables.
                                                            (line   6)
* variable-length argument lists:        Ruby User's Guide On Object Initialization.
                                                            (line  65)
* variables:                             Methods and Variables.
                                                            (line   6)
* variables, 4 types:                    Variable Scope.    (line   6)
* variables, description:                Ruby User's Guide On Variables.
                                                            (line   6)
* variables, global:                     Ruby User's Guide On Global Variables.
                                                            (line   6)
* varible, global $:                     Naming conventions.
                                                            (line   9)
* version managers:                      Installers.        (line   6)
* versions, multiple installations using rbenv: rbenv.      (line   6)
* versions, switch between using chruby: chruby.            (line   6)
* versions,multiple:                     Installers.        (line   6)
* visibility features:                   To Ruby From Java. (line  20)
* visibility, changing:                  FAQ Methods.       (line  55)
* web applications:                      Installation - Running - About.
                                                            (line  67)
* while:                                 Ruby User's Guide On Puzzle Program.
                                                            (line  27)
* while <1>:                             Loops.             (line   6)
* while statement:                       Ruby User's Guide On Control Structures.
                                                            (line  53)
* writer accessor:                       Ruby User's Guide On Accessors.
                                                            (line   6)
* writing documentation:                 Writing Documentation.
                                                            (line   6)
* WxRuby:                                To Ruby From Java. (line  31)
* xforms:                                FAQ Extension Library.
                                                            (line  24)
* XML vs YAML:                           To Ruby From Java. (line  54)
* YAML vs XML:                           To Ruby From Java. (line  54)
* yield:                                 Large Class Definition.
                                                            (line  85)
* yield <1>:                             Blocks are Objects.
                                                            (line   6)
* yield <2>:                             Ruby User's Guide On Iterators.
                                                            (line  65)
* yield <3>:                             Blocks.            (line  31)
* yield control structor, or statement:  FAQ Iterators.     (line  56)
* yield control structure in iterator:   FAQ Iterators.     (line  61)


File: Ruby2_5.info,  Node: Program Index,  Prev: Concept Index,  Up: Top

Program Index
*************

 [index ]
* Menu:

* eval.rb:                               Ruby Eval Utility.  (line  6)
* fact.rb:                               Ruby User's Guide On Simple Examples.
                                                             (line  9)
* guess.rb:                              Ruby User's Guide On Puzzle Program.
                                                             (line  6)
* Makefile:                              The Makefile.       (line  6)
* regx.rb:                               Ruby User's Guide on Regular Expressions.
                                                             (line 31)

