This is Ruby2_5.info, produced by makeinfo version 6.5 from
Ruby2_5.texi.

Copyright (C) 2018
wlharvey4
All Rights Reserved.

   The Ruby2.5 Information and Documentation program is copyright (C)
2018 by wlharvey4.  It is published under the conditions of the GNU
General Public License, version 3.


   This is Edition 0.4e of 'Ruby 2.5 Information and Documentation'.


File: Ruby2_5.info,  Node: Top,  Next: Preface,  Up: (dir)

General Introduction
********************

From The Top: This file documents Ruby 2.5,
<https://www.ruby-lang.org>

   Copyright (C) 2018
wlharvey4
All Rights Reserved.

   The Ruby2.5 Information and Documentation program is copyright (C)
2018 by wlharvey4.  It is published under the conditions of the GNU
General Public License, version 3.


   This is Edition 0.4e of 'Ruby 2.5 Information and Documentation'.

* Menu:

* Preface::
* Introduction::
* Documentation::
* List of Tables::
* Ruby-Doc::
* RDoc::
* Utility Programs::
* Initial Setup and Post Create::
* The Makefile::
* Code Chunk Summaries::
* Bibliography::
* Concept Index::
* Program Index::

 -- The Detailed Node Listing --

Preface

* Audience::
* Overview::
* Conventions::
* Acknowledgements::

Documentation

* Installing Ruby::
* Developing Ruby::
* Getting Started::
* Manuals::
* Editors and IDEs::
* Further Reading::

Installation Methods

* Package Management Systems::
* Installers::
* Managers::
* Building From Source::

Package Management Systems

* Homebrew (OS X)::

Installers

* ruby-build::
* ruby-install::

Managers

* chruby::
* rbenv::
* RVM (``Ruby Version Manager'')::
* uru::

Building From Source

* Releases Page::
* Branches Page::
* Issue Tracking::

Getting Started

* Try Ruby!::
* Official FAQ::
* Ruby Koans::
* Why’s (Poignant) Guide to Ruby::
* Ruby in Twenty Minutes::
* Ruby from Other Languages::
* Important Language Features::
* Learning Ruby::
* Ruby Essentials::
* Learn to Program::

Official FAQ

* FAQ Iterators::
* FAQ Syntax::
* FAQ Methods::
* FAQ Classes and Modules::
* FAQ Built-In Libraries::
* FAQ Extension Library::
* FAQ Other Features::

Ruby in Twenty Minutes

* Interactive Ruby::
* Defining Methods::
* Altering Classes::
* Large Class Definition::
* Run MegaGreeter::

Ruby from Other Languages

* To Ruby From C and C++::
* To Ruby From Java::
* To Ruby From Perl::
* To Ruby From PHP::
* To Ruby From Python::

Important Language Features

* Pointers on Iteration::
* Everything has a value::
* Symbols are not lightweight Strings::
* Everything is an Object::
* Variable Constants::
* Naming conventions::
* Keyword arguments::
* The universal truth::
* Access modifiers are Methods::
* Method access::
* Classes are open::
* Funny method names::
* Singleton methods::
* Missing methods::
* Message passing --- not function calls::
* Blocks are Objects::
* Operators are syntactic sugar::

Ruby Essentials

* Interactive Ruby Execution::
* Block Ruby Comments::
* Variable Scope::

Manuals

* Ruby User's Guide::
* Ruby Programming Wikibook::
* Programming Ruby::

Ruby User's Guide

* Ruby User's Guide On What Ruby IS::
* Ruby User's Guide On Simple Examples::
* Ruby User's Guide on Strings::
* Ruby User's Guide On Puzzle Program::
* Ruby User's Guide on Regular Expressions::
* Ruby User's Guide On Arrays And Hashes::
* Ruby User's Guide On Control Structures::
* Ruby User's Guide On Iterators::
* Ruby User's Guide On Object-Oriented Thinking::
* Ruby User's Guide on Methods::
* Ruby User's Guide on Classes::
* Ruby User's Guide on Inheritance::
* Ruby User's Guide on Redefinition Of Methods::
* Ruby User's Guide On Access Control::
* Ruby User's Guide On Singleton Methods::
* Ruby User's Guide On Modules::
* Ruby User's Guide On Procedure Objects::
* Ruby User's Guide On Variables::
* Ruby User's Guide On Global Variables::
* Ruby User's Guide On Instance Variables::
* Ruby User's Guide On Local Variables::
* Ruby User's Guide On Class Constants::
* Ruby User's Guide On Exception Processing And rescue::
* Ruby User's Guide On Exception Processing and ensure::
* Ruby User's Guide On Accessors::
* Ruby User's Guide On Object Initialization::
* Ruby User's Guide On Nuts And Bolts::

Ruby-Doc

* API Documentation::

API Documentation

* Files API::
* Classes And Modules API::
* Methods API::
* Beginner Core Topics::

RDoc -- Ruby Documentation System

* Generating Documention::
* Writing Documentation::

Documentation Coverage Report

* Markup Directives::

Utility Programs

* Ruby Eval Utility::
* API Utility::

Ruby Eval Utility

* eval Module Code::
* eval Indentation Deltas Code::
* eval Main Get Line Code::
* eval Main Process Line Code::
* eval.rb Post Create::

'eval.rb' Main Process Line Code

* eval If Not Line Code::
* eval If Is Line Code::

API Utility

* apiutil.awk BEGIN Block::
* apiutil.awk BEGNFILE Block::
* apiutil.awk MAIN Block::
* apiutil.awk ENDFILE Block::
* apiutil.awk END Block::
* apiutil Ord Function::
* convertsymbols() Function Definition::
* apiutil Makefile Target::

Initial Setup and Post Create

* Initial Setup::
* Post Create::

The Makefile

* Makefile Variable Definitions::
* Makefile Default Rule::
* Makefile TWJR Targets::
* Makefile Utility Targets::
* Makefile Clean Targets::

Code Chunk Summaries

* File Definitions::
* Code Chunk Definitions::
* Code Chunk References::



File: Ruby2_5.info,  Node: Preface,  Next: Introduction,  Prev: Top,  Up: Top

Preface
*******

_Think think think think ..._

* Menu:

* Audience::
* Overview::
* Conventions::
* Acknowledgements::


File: Ruby2_5.info,  Node: Audience,  Next: Overview,  Up: Preface

Intended Audience
=================

     The combination of the power of a pure object-oriented language
     with the convenience of a scripting language makes Ruby a
     favorite tool of intelligent, forward-thinking programmers.
   'Programming Ruby', by Dave Thomas and Chad Fowler and _Andy Hunt_


File: Ruby2_5.info,  Node: Overview,  Next: Conventions,  Prev: Audience,  Up: Preface

What Is Covered
===============

Text and chapter by chapter description here.


File: Ruby2_5.info,  Node: Conventions,  Next: Acknowledgements,  Prev: Overview,  Up: Preface

Typographical Conventions
=========================

This Info file is written in an enhanced version of Texinfo
(http://www.gnu.org/software/texinfo/), the GNU documentation
formatting language.  A single Texinfo source file is used to produce
both the printed and online versions of a program's documentation.

   Examples you would type at the command-line are preceded by the
common shell primary and secondary prompts, '$' and '>'.  Input that
you type is shown 'like this'.  Output from the command is preceded by
the glyph "-|".  This typically represents the command's standard
output.  Error messages, and other output on the command's standard
error, are preceded by the glyph "error->".  For example:

     $ echo hi on stdout
     -| hi on stdout
     $ echo hello on stderr 1>&2
     error-> hello on stderr


File: Ruby2_5.info,  Node: Acknowledgements,  Prev: Conventions,  Up: Preface

Acknowledgements
================


File: Ruby2_5.info,  Node: Introduction,  Next: Documentation,  Prev: Preface,  Up: Top

1 Introduction
**************

Ruby is ...

   A dynamic, open source programming language with a focus on
simplicity and productivity.  It has an elegant syntax that is natural
to read and easy to write.


File: Ruby2_5.info,  Node: Documentation,  Next: List of Tables,  Prev: Introduction,  Up: Top

2 Documentation
***************

Here you will find pointers to manuals, tutorials and references that
will come in handy when you feel like coding in Ruby.

   *note Ruby-Doc::

* Menu:

* Installing Ruby::
* Developing Ruby::
* Getting Started::
* Manuals::
* Editors and IDEs::
* Further Reading::


File: Ruby2_5.info,  Node: Installing Ruby,  Next: Developing Ruby,  Up: Documentation

2.1 Installing Ruby
===================

Installation Methods
--------------------

There are several ways to install Ruby:

   * Package Manager: When you are on a UNIX-like operating system,
     using your system’s package manager is the easiest way of getting
     started.  However, the packaged Ruby version usually is not the
     newest one.
   * Installers: can be used to install a specific or multiple Ruby
     versions.  There is also an installer for Windows.
   * Managers help you to switch between multiple Ruby installations
     on your system.
   * Source: And finally, you can also build Ruby from source.

   The following overview lists available installation methods for
different needs and platforms.

* Menu:

* Package Management Systems::
* Installers::
* Managers::
* Building From Source::


File: Ruby2_5.info,  Node: Package Management Systems,  Next: Installers,  Up: Installing Ruby

2.1.1 Package Management Systems
--------------------------------

If you cannot compile your own Ruby, and you do not want to use a
third-party tool, you can use your system’s package manager to install
Ruby.

   Certain members in the Ruby community feel very strongly that you
should never use a package manager to install Ruby and that you should
use tools instead.  While the full list of pros and cons is outside of
the scope of this page, the most basic reason is that most package
managers have older versions of Ruby in their official repositories.
If you would like to use the newest Ruby, make sure you use the
correct package name, or use the tools described further below
instead.

* Menu:

* Homebrew (OS X)::


File: Ruby2_5.info,  Node: Homebrew (OS X),  Up: Package Management Systems

2.1.1.1 Homebrew (OS X)
.......................

Homebrew (http://brew.sh/)

   On macOS (High) Sierra and OS X El Capitan, Ruby 2.0 is included.

   Many people on OS X use Homebrew as a package manager.  It is
really easy to get a newer version of Ruby using Homebrew:

     $ brew install ruby

   This should install the latest Ruby version.


File: Ruby2_5.info,  Node: Installers,  Next: Managers,  Prev: Package Management Systems,  Up: Installing Ruby

2.1.2 Installers
----------------

If the version of Ruby provided by your system or package manager is
out of date, a newer one can be installed using a third-party
installer.  Some of them also allow you to install multiple versions
on the same system; associated managers can help to switch between the
different Rubies.  If you are planning to use RVM as a version manager
you do not need a separate installer, it comes with its own.

* Menu:

* ruby-build::
* ruby-install::


File: Ruby2_5.info,  Node: ruby-build,  Next: ruby-install,  Up: Installers

2.1.2.1 'ruby-build'
....................

'ruby-build' (https://github.com/rbenv/ruby-build#readme)

   'rbenv'
(https://www.ruby-lang.org/en/documentation/installation/#rbenv)

   'ruby-build' is a plugin for 'rbenv' (*note rbenv:: that allows you
to compile and install different versions of Ruby into arbitrary
directories.  'ruby-build' can also be used as a standalone program
without 'rbenv'.  It is available for OS X, Linux, and other UNIX-like
operating systems.


File: Ruby2_5.info,  Node: ruby-install,  Prev: ruby-build,  Up: Installers

2.1.2.2 'ruby-install'
......................

'ruby-install' version manager 'chruby' version switcher

   'ruby-install' (https://github.com/postmodern/ruby-install#readme)

   'chruby'
(https://www.ruby-lang.org/en/documentation/installation/#chruby)

   'ruby-install' allows you to compile and install different versions
of Ruby into arbitrary directories.  There is also a sibling, 'chruby'
(*note chruby::), which handles switching between Ruby versions.  It
is available for OS X, Linux, and other UNIX-like operating systems.


File: Ruby2_5.info,  Node: Managers,  Next: Building From Source,  Prev: Installers,  Up: Installing Ruby

2.1.3 Managers
--------------

Many Rubyists use Ruby managers to manage multiple Rubies.  They
confer various advantages but are not officially supported.  Their
respective communities are very helpful, however.

* Menu:

* chruby::
* rbenv::
* RVM (``Ruby Version Manager'')::
* uru::


File: Ruby2_5.info,  Node: chruby,  Next: rbenv,  Up: Managers

2.1.3.1 chruby
..............

'chruby' allows you to switch between multiple Rubies.  'chruby' can
manage Rubies installed by 'ruby-install' (*note ruby-install::) or
even built from source.


File: Ruby2_5.info,  Node: rbenv,  Next: RVM (``Ruby Version Manager''),  Prev: chruby,  Up: Managers

2.1.3.2 'rbenv'
...............

'rbenv' (https://github.com/rbenv/rbenv#readme)

   'ruby-build'
(https://www.ruby-lang.org/en/documentation/installation/#ruby-build)

   'rbenv' allows you to manage multiple installations of Ruby.  It
does not support installing Ruby, but there is a popular plugin named
'ruby-build' (*note ruby-build::) to install Ruby.  Both tools are
available for OS X, Linux, or other UNIX-like operating systems.


File: Ruby2_5.info,  Node: RVM (``Ruby Version Manager''),  Next: uru,  Prev: rbenv,  Up: Managers

2.1.3.3 RVM ("Ruby Version Manager")
....................................

RVM (http://rvm.io/)

   RVM allows you to install and manage multiple installations of Ruby
on your system.  It can also manage different gemsets.  It is
available for OS X, Linux, or other UNIX-like operating systems.


File: Ruby2_5.info,  Node: uru,  Prev: RVM (``Ruby Version Manager''),  Up: Managers

2.1.3.4 'uru'
.............

Uru (https://bitbucket.org/jonforums/uru)

   Uru is a lightweight, multi-platform command line tool that helps
you to use multiple Rubies on OS X, Linux, or Windows systems.


File: Ruby2_5.info,  Node: Building From Source,  Prev: Managers,  Up: Installing Ruby

2.1.4 Building From Source
--------------------------

Ruby 2.5.1 (https://www.ruby-lang.org/en/downloads/)

   Ruby Github (https://github.com/ruby/ruby)

   Of course, you can install Ruby from source.  Download and unpack a
tarball, then just do this:

     $ ./configure
     $ make
     $ sudo make install

   By default, this will install Ruby into '/usr/local'.  To change,
pass the '--prefix=DIR' option to the './configure' script.

   Using the third-party tools or package managers might be a better
idea, though, because the installed Ruby won’t be managed by any
tools.

   Installing from the source code is a great solution for when you
are comfortable enough with your platform and perhaps need specific
settings for your environment.  It’s also a good solution in the event
that there are no other premade packages for your platform.

* Menu:

* Releases Page::
* Branches Page::
* Issue Tracking::


File: Ruby2_5.info,  Node: Releases Page,  Next: Branches Page,  Up: Building From Source

2.1.4.1 Releases Page
.....................

Releases Page (https://www.ruby-lang.org/en/downloads/releases/)

   For more information about specific releases, particularly older
releases or previews, see the Releases page.

   This page lists individual Ruby releases.

Ruby 2.5.1 Released
...................

ruby-2.1.5.tar.gz
(https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.1.tar.gz)

   Posted by naruse on 28 Mar 2018

   This release includes some bug fixes and some security fixes.

   * CVE-2017-17742: HTTP response splitting in WEBrick
   * CVE-2018-6914: Unintentional file and directory creation with
     directory traversal in tempfile and tmpdir
   * CVE-2018-8777: DoS by large request in WEBrick
   * CVE-2018-8778: Buffer under-read in String#unpack
   * CVE-2018-8779: Unintentional socket creation by poisoned NUL byte
     in UNIXServer and UNIXSocket
   * CVE-2018-8780: Unintentional directory traversal by poisoned NUL
     byte in Dir
   * Multiple vulnerabilities in RubyGems


File: Ruby2_5.info,  Node: Branches Page,  Next: Issue Tracking,  Prev: Releases Page,  Up: Building From Source

2.1.4.2 Branches Page
.....................

Branches Page (https://www.ruby-lang.org/en/downloads/branches/)

   Information about the current maintenance status of the various
Ruby branches can be found on the Branches page.

   This page lists the current maintenance status of the various Ruby
branches.  This is a preliminary list of Ruby branches and their
maintenance status.  The shown dates are inferred from the English
versions of release posts or EOL announcements.

   The Ruby branches or release series are categorized below into the
following phases:

   * normal maintenance (bug fix): Branch receives general bug fixes
     and security fixes.
   * security maintenance (security fix): Only security fixes are
     backported to this branch.
   * eol (end-of-life): Branch is not supported by the ruby-core team
     any longer and does not receive any fixes.  No further patch
     release will be released.
   * preview: Only previews or release candidates have been released
     for this branch so far.

Ruby 2.6
........

<https://cache.ruby-lang.org/pub/ruby/2.6/ruby-2.6.0-preview2.tar.gz>

ruby-2.6.0-preview2
status: preview
release date:

Ruby 2.5
........

<https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.1.tar.gz>

status: normal maintenance
release date: 2017-12-25

Ruby 2.4
........

<https://cache.ruby-lang.org/pub/ruby/2.4/ruby-2.4.4.tar.gz>

status: normal maintenance
release date: 2016-12-25

Ruby 2.3
........

<https://cache.ruby-lang.org/pub/ruby/2.3/ruby-2.3.7.tar.gz>

status: security maintenance
release date: 2015-12-25
EOL date: scheduled for 2019-03-31

Ruby 2.2
........

status: eol
release date: 2014-12-25
EOL date: 2018-03-31


File: Ruby2_5.info,  Node: Issue Tracking,  Prev: Branches Page,  Up: Building From Source

2.1.4.3 Ruby Issue Tracking System
..................................

Bugs (https://bugs.ruby-lang.org)

How to report a bug
...................

How To Report
(https://bugs.ruby-lang.org/projects/ruby/wiki/HowToReport)

Ruby Trunk
..........

Ruby Trunk (https://bugs.ruby-lang.org/projects/ruby-trunk)

   All Issues
(https://bugs.ruby-lang.org/projects/ruby-trunk/issues?set_filter=1)


File: Ruby2_5.info,  Node: Developing Ruby,  Next: Getting Started,  Prev: Installing Ruby,  Up: Documentation

2.2 Developing Ruby
===================

Ruby Core (https://www.ruby-lang.org/en/community/ruby-core/)

   Now is a fantastic time to follow Ruby’s development.  With the
increased attention Ruby has received in the past few years, there’s a
growing need for good talent to help enhance Ruby and document its
parts.  So, where do you start?

Ruby Core
---------

The topics related to Ruby development covered here are:

   * *note Using Subversion to Track Ruby Development: subversion.
   * *note How to Use Git With the Main Ruby Repository: MainRubyRepo.
   * *note Improving Ruby: PatchByPatch.
   * Rules for Core Developers

Using Subversion to Track Ruby Development
..........................................

Getting the latest Ruby source code is a matter of an anonymous
checkout from the Subversion (http://subversion.apache.org/)
repository.  From your command line:

     $ svn co https://svn.ruby-lang.org/repos/ruby/trunk ruby

   The 'ruby' directory will now contain the latest source code for
the development version of Ruby ('ruby-trunk').  Currently patches
applied to the trunk are backported to the stable 2.5, 2.4, and 2.3
branches (see below).

   If you’d like to follow patching of Ruby 2.5, you should use the
ruby_2_5 branch when checking out:

     $ svn co https://svn.ruby-lang.org/repos/ruby/branches/ruby_2_5

   This will check out the respective development tree into a
'ruby_2_5' directory.  Developers working on the maintenance branches
are expected to migrate their changes to Ruby’s trunk, so often the
branches are very similar, with the exception of improvements made by
Matz and Nobu to the language itself.

   If you prefer, you may browse Ruby’s Subversion repository via the
web (https://svn.ruby-lang.org/cgi-bin/viewvc.cgi/).

How to Use Git With the Main Ruby Repository
............................................

Those who prefer to use Git over Subversion can find instructions with
the mirror on GitHub (https://github.com/ruby/ruby), both for those
with commit access and everybody else
(https://github.com/shyouhei/ruby/wiki/noncommitterhowto).

Improving Ruby, Patch by Patch
..............................

The core team maintains an issue tracker (https://bugs.ruby-lang.org/)
for submitting patches and bug reports to Matz and the gang.  These
reports also get submitted to the Ruby-Core mailing list
(https://www.ruby-lang.org/en/community/mailing-lists/) for
discussion, so you can be sure your request won’t go unnoticed.  You
can also send your patches straight to the mailing list.  Either way,
you are encouraged to take part in the discussion that ensues.

   Please look over the Patch Writer’s Guide
(https://www.ruby-lang.org/en/community/ruby-core/writing-patches/)
for some tips, straight from Matz, on how to get your patches
considered.

   Steps for Building a Patch
(https://www.ruby-lang.org/en/community/ruby-core/)


File: Ruby2_5.info,  Node: Getting Started,  Next: Manuals,  Prev: Developing Ruby,  Up: Documentation

2.3 Getting Started
===================

* Menu:

* Try Ruby!::
* Official FAQ::
* Ruby Koans::
* Why’s (Poignant) Guide to Ruby::
* Ruby in Twenty Minutes::
* Ruby from Other Languages::
* Important Language Features::
* Learning Ruby::
* Ruby Essentials::
* Learn to Program::


File: Ruby2_5.info,  Node: Try Ruby!,  Next: Official FAQ,  Up: Getting Started

2.3.1 Try Ruby!
---------------

Try Ruby!  (https://ruby.github.io/TryRuby/)

   An interactive tutorial that lets you try out Ruby right in your
browser.  This 15-minute tutorial is aimed at beginners who want to
get a feeling of the language.


File: Ruby2_5.info,  Node: Official FAQ,  Next: Ruby Koans,  Prev: Try Ruby!,  Up: Getting Started

2.3.2 Official FAQ
------------------

The official frequently asked questions.

   FAQ (https://www.ruby-lang.org/en/documentation/faq/)

   This document contains Frequently Asked Questions about Ruby with
answers.

   This FAQ is based on The Ruby Language FAQ
(http://ruby-doc.org/docs/ruby-doc-bundle/FAQ/FAQ.html) originally
compiled by Shugo Maeda and translated into English by Kentaro Goto.
Thanks to Zachary Scott and Marcus Stollsteimer for incorporating the
FAQ into the site and for a major overhaul of the content.

   * General questions
   * How does Ruby stack up against…?
   * Installing Ruby
   * Variables, constants, and arguments
   * *note FAQ Iterators::
   * *note FAQ Syntax::
   * Methods
   * Classes and modules
   * Built-in libraries
   * Extension library
   * Other features

* Menu:

* FAQ Iterators::
* FAQ Syntax::
* FAQ Methods::
* FAQ Classes and Modules::
* FAQ Built-In Libraries::
* FAQ Extension Library::
* FAQ Other Features::


File: Ruby2_5.info,  Node: FAQ Iterators,  Next: FAQ Syntax,  Up: Official FAQ

2.3.2.1 FAQ Iterators
.....................

What is an iterator?
--------------------

An iterator is a method which accepts a block or a 'Proc' object.  In
the source file, the block is placed immediately after the invocation
of the method.  Iterators are used to produce user-defined control
structures -- especially loops.

   Let’s look at an example to see how this works.  Iterators are
often used to repeat the same action on each element of a collection,
like this:

     data = [1, 2, 3]
     data.each do |i|
       puts i
     end

   The 'each' method of the array 'data' is passed the 'do ... end'
block, and executes it repeatedly.  On each call, the block is passed
successive elements of the array.

   You can define blocks with '{ ... }' in place of 'do ... end'.

     data = [1, 2, 3]
     data.each { |i|
       puts i
     }

   This code has the same meaning as the last example.  However, in
some cases, precedence issues cause 'do ... end' and '{ ... }' to act
differently.

     foobar a, b do ... end	# foobar is the iterator.
     foobar a, b { ... }	# b is the iterator.

   This is because '{ ... }' binds more tightly to the preceding
expression than does a 'do ... end' block.  The first example is
equivalent to 'foobar(a, b) do ... end', while the second is
'foobar(a, b { ... })'.

How can I pass a block to an iterator?
--------------------------------------

You simply place the block after the iterator call.  You can also pass
a 'Proc' object by prepending '&' to the variable or constant name
that refers to the 'Proc'.

How is a block used in an iterator?
-----------------------------------

_This section or parts of it might be out-dated or in need of
confirmation._

   There are three ways to execute a block from an iterator method:

  1. the 'yield' control structure;

     The 'yield' statement calls the block, optionally passing it one
     or more arguments.

          def my_iterator
            yield 1, 2
          end

          my_iterator {|a, b| puts a, b }

  2. calling a 'Proc' argument (made from a block) with 'call';

     If a method definition has a block argument (the last formal
     parameter has an ampersand ('&') prepended), it will receive the
     attached block, converted to a 'Proc' object.  This may be called
     using 'prc.call(args)'.

          def my_iterator(&b)
            b.call(1, 2)
          end

          my_iterator {|a, b| puts a, b }

     and

  3. using 'Proc.new' followed by a 'call'.

     'Proc.new' (or the equivalent 'proc' or 'lambda' calls), when
     used in an iterator definition, takes the block which is given to
     the method as its argument and generates a procedure object from
     it.  ('proc' and 'lambda' are effectively synonyms.)

     _[Update needed: 'lambda' behaves in a slightly different way and
     produces a warning 'tried to create Proc object without a
     block'.]_

          def my_iterator
            Proc.new.call(3, 4)
            proc.call(5, 6)
            lambda.call(7, 8)
          end

          my_iterator {|a, b| puts a, b }

     Perhaps surprisingly, 'Proc.new' and friends do not in any sense
     consume the block attached to the method -- each call to
     'Proc.new' generates a new procedure object out of the same
     block.

     You can tell if there is a block associated with a method by
     calling 'block_given?'.

What does Proc.new without a block do?
--------------------------------------

'Proc.new' without a block cannot generate a procedure object and an
error occurs.  In a method definition, however, 'Proc.new' without a
block implies the existence of a block at the time the method is
called, and so no error will occur.

How can I run iterators in parallel?
------------------------------------

See <http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/5252>


File: Ruby2_5.info,  Node: FAQ Syntax,  Next: FAQ Methods,  Prev: FAQ Iterators,  Up: Official FAQ

2.3.2.2 FAQ Syntax
..................

List of FAQ items:

   *note What is the difference between an immediate value and a
reference?: immediate value.

   *note What is the difference between 'nil' and 'false'?: nil vs
false.

   *note The Empty String: empty string.

   *note A Symbol Object: symbol object.

   *note How can I access the value of a symbol?: value of symbol.

   *note Is 'loop' a control structure?: loop.

   *note Ruby doesn't have a post-test loop: post-test loop.

   *note Why can’t I pass a hash literal to a method 'p {}'?: hash
literal.

   *note I can’t get 'def pos=(val)' to work!: pos val.

   *note What is the difference between '\1' and '\\1'?: \1 and \\1.

   *note What is the difference between '..' and '...'?: 2 dots vs 3
dots.

   *note What is the difference between or and ||?: or and.

   *note Does Ruby have function pointers?: function pointers.

   *note What is the difference between load and require?: load vs
require.

   *note Does Ruby have exception handling?: exception handling.

What is the difference between an immediate value and a reference?
------------------------------------------------------------------

'Fixnum', 'true', 'nil', and 'false' are implemented as "immediate
values".  With immediate values, variables hold the objects
themselves, rather than references to them.

   Singleton methods cannot be defined for such objects.  Two
'Fixnums' of the same value always represent the same object instance,
so (for example) instance variables for the 'Fixnum' with the value 1
are shared between all the 1's in the system.  This makes it
impossible to define a singleton method for just one of these.

What is the difference between 'nil' and 'false'?
-------------------------------------------------

First the similarity: 'nil' and 'false' are the only two objects that
evaluate to 'false' in a boolean context.  (In other words: they are
the only "falsy" values; all other objects are "truthy".)

   However, 'nil' and 'false' are instances of different classes
('NilClass' and 'FalseClass'), and have different behavior elsewhere.

   We recommend that "predicate methods" (those whose name ends with a
question mark) return 'true' or 'false'.  Other methods that need to
indicate failure should return 'nil'.

The Empty String
----------------

An empty string ('""') returns 'true' in a conditional expression!  In
Perl, it’s 'false'.  It’s very simple: in Ruby, only 'nil' and 'false'
are 'false' in conditional contexts.

   You can use 'empty?', compare the string to '""', or compare the
string’s size or length to 0 to find out if a string is empty.

A Symbol Object
---------------

What does ':name' mean?

   A colon followed by a name generates a "Symbol object" which
corresponds one-to-one with the identifier.  During the duration of a
program's execution the same Symbol object will be created for a given
name or string.  Symbols can also be created with '"name".intern' or
'"name".to_sym'.

   Symbol objects can represent identifiers for methods, variables,
and so on.  Some methods, like 'define_method', 'method_missing', or
'trace_var', require a symbol.  Other methods, e.g.  'attr_accessor',
'send', or 'autoload', also accept a string.

   Due to the fact that they are created only once, Symbols are often
used as hash keys.  String hash keys would create a new object for
every single use, thereby causing some memory overhead.  There is even
a special syntax for symbol hash keys:

     person_1 = { :name => "John", :age => 42 }
     person_2 = { name: "Jane", age: 24 }        # alternate syntax

   Symbols can also be used as enumeration values or to assign unique
values to constants:

     status = :open  # :closed, ...

     NORTH = :NORTH
     SOUTH = :SOUTH

How can I access the value of a symbol?
---------------------------------------

To get the value of the variable corresponding to a symbol, you can
use 'symbol.to_s' or '"#{symbol}"' to get the name of the variable,
and then 'eval' that in the scope of the symbol to get the variable’s
contents:

     a = "This is the content of `a'"
     b = eval("#{:a}")
     a.object_id == b.object_id  # => true

   You can also use:

     b = binding.local_variable_get(:a)

   If your symbol corresponds to the name of a method, you can use
'send':

     class Demo
       def hello
         "Hello, world"
       end
     end

     demo = Demo.new
     demo.send(:hello)

   Or you can use 'Object#method' to return a corresponding 'Method'
object, which you may then call:

     m = demo.method(:hello)  # => #<Method: Demo#hello>
     m.call                   # => "Hello, world"

Is 'loop' a control structure?
------------------------------

Although 'loop' looks like a control structure, it is actually a
method defined in 'Kernel'.  The block which follows introduces a new
scope for local variables.

Ruby doesn’t have a post-test loop
----------------------------------

Ruby does not have a 'do { ... } while' construct, so how can I
implement loops that test the condition at the end?

   Clemens Hintze says: "You can use a combination of Ruby’s 'begin
... end' and the 'while' or 'until' statement modifiers to achieve the
same effect:

     i = 0
     begin
       puts "i = #{i}"
       i += 1
     end until i > 4

Why can’t I pass a hash literal to a method: 'p {}'?
----------------------------------------------------

The '{}' is parsed as a block, not a 'Hash' constructor.  You can
force the '{}' to be treated as an expression by making the fact that
it's a parameter explicit: 'p({})'.

I can’t get 'def pos=(val)' to work!
------------------------------------

I have the following code, but I cannot use the method 'pos = 1'.

     def pos=(val)
       @pos = val
       puts @pos
     end

   Methods with '=' appended must be called with an explicit receiver
(without the receiver, you are just assigning to a local variable).
Invoke it as 'self.pos = 1'.

What is the difference between '\1' and '\\1'?
----------------------------------------------

They have the same meaning.  In a single quoted string, only '\'' and
'\\' are transformed and other combinations remain unchanged.

   However, in a double quoted string, '"\1"' is the byte '\001' (an
octal bit pattern), while '"\\1"' is the two character string
containing a backslash and the character '"1"'.

What is the difference between '..' and '...'?
----------------------------------------------

'..' includes the right hand side in the range, while '...' does not:

     (5..8).to_a   # => [5, 6, 7, 8]
     (5...8).to_a  # => [5, 6, 7]

What is the difference between 'or' and '||'?
---------------------------------------------

'p(nil || "Hello")' prints '"Hello"', while 'p(nil or "Hello")' gives
a parse error.  Why?

   'or' has a very low precedence; 'p( (nil or "Hello") )' will work.

   The precedence of 'or' is for instance also lower than that of '=',
whereas ' || ' has a higher precedence:

     foo = nil || "Hello"  # parsed as: foo = (nil || "Hello")
     foo  # => "Hello"

     # but perhaps surprisingly:

     foo = nil or "Hello"  # parsed as: (foo = nil) or "Hello"
     foo  # => nil

   'or' (and similarly 'and') is best used, not for combining boolean
expressions, but for control flow, like in:

     do_something  or raise "some error!"

   where 'do_something' returns 'false' or 'nil' when an error occurs.

Does Ruby have function pointers?
---------------------------------

A 'Proc' object generated by 'Proc.new', 'proc', or 'lambda' can be
referenced from a variable, so that variable could be said to be a
function pointer.  You can also get references to methods within a
particular object instance using 'object.method'.

What is the difference between load and require?
------------------------------------------------

'load' will load and execute a Ruby program ('*.rb').

   'require' loads Ruby programs as well, but will also load "binary
Ruby extension modules" (shared libraries or DLLs).  In addition,
'require' ensures that a feature is never loaded more than once.

Does Ruby have exception handling?
----------------------------------

Ruby supports a flexible exception handling scheme:

     begin
       statements which may raise exceptions
     rescue [exception class names]
       statements when an exception occurred
     rescue [exception class names]
       statements when an exception occurred
     ensure
       statements that will always run
     end

   If an exception occurs in the 'begin' clause, the 'rescue' clause
with the matching exception name is executed.  The 'ensure' clause is
executed whether an exception occurred or not.  'rescue' and 'ensure'
clauses may be omitted.

   If no exception class is designated for a 'rescue' clause,
'StandardError' exception is implied, and exceptions which are in a
'is_a?' relation to 'StandardError' are captured.

   This expression returns the value of the 'begin' clause.

   The latest exception is accessed by the global variable '$!' (and
so its type can be determined using '$!.type').


File: Ruby2_5.info,  Node: FAQ Methods,  Next: FAQ Classes and Modules,  Prev: FAQ Syntax,  Up: Official FAQ

2.3.2.3 FAQ Methods
...................

How does Ruby choose which method to invoke?
--------------------------------------------

Are '+, -, *, ...' operators?
-----------------------------

Where are '++' and '--' ?
-------------------------

What is a singleton method?
---------------------------

All these objects are fine, but does Ruby have any simple functions?
--------------------------------------------------------------------

So where do all these function-like methods come from?
------------------------------------------------------

Can I access an object’s instance variables?
--------------------------------------------

What’s the difference between 'private' and 'protected'?
--------------------------------------------------------

How can I change the visibility of a method?
--------------------------------------------

Can an identifier beginning with a capital letter be a method name?
-------------------------------------------------------------------

Calling 'super' gives an 'ArgumentError'.
-----------------------------------------

How can I call the method of the same name two levels up?
---------------------------------------------------------

How can I invoke an original built-in method after redefining it?
-----------------------------------------------------------------

What is a destructive method?
-----------------------------

Why can destructive methods be dangerous?
-----------------------------------------

Can I return multiple values from a method?
-------------------------------------------


File: Ruby2_5.info,  Node: FAQ Classes and Modules,  Next: FAQ Built-In Libraries,  Prev: FAQ Methods,  Up: Official FAQ

2.3.2.4 FAQ Classes and Modules
...............................

Can a class definition be repeated?
-----------------------------------

Are there class variables?
--------------------------

What is a class instance variable?
----------------------------------

What is the difference between class variables and class instance variables?
----------------------------------------------------------------------------

Does Ruby have class methods?
-----------------------------

What is a singleton class?
--------------------------

What is a module function?
--------------------------

What is the difference between a class and a module?
----------------------------------------------------

Can you subclass modules?
-------------------------

Give me an example of a mixin
-----------------------------

Why are there two ways of defining class methods?
-------------------------------------------------

What is the difference between include and extend?
--------------------------------------------------

What does 'self' mean?
----------------------


File: Ruby2_5.info,  Node: FAQ Built-In Libraries,  Next: FAQ Extension Library,  Prev: FAQ Classes and Modules,  Up: Official FAQ

2.3.2.5 FAQ Built-In Libraries
..............................

What does 'instance_methods(false)' return?
-------------------------------------------

How do random number seeds work?
--------------------------------

I read a file and changed it, but the file on disk has not changed.
-------------------------------------------------------------------

How can I process a file and update its contents?
-------------------------------------------------

I wrote a file, copied it, but the end of the copy seems to be lost.
--------------------------------------------------------------------

How can I get the line number in the current input file?
--------------------------------------------------------

How can I use 'less' to display my program’s output?
----------------------------------------------------

What happens to a 'File' object which is no longer referenced?
--------------------------------------------------------------

I feel uneasy if I don’t close a file.
--------------------------------------

How can I sort files by their modification time?
------------------------------------------------

How can I count the frequency of words in a file?
-------------------------------------------------

How can I sort strings in alphabetical order?
---------------------------------------------

How can I expand tabs to spaces?
--------------------------------

How can I escape a backslash in a regular expression?
-----------------------------------------------------

What is the difference between 'sub' and 'sub!'?
------------------------------------------------

Where does '\Z' match?
----------------------

What is the difference between 'thread' and 'fork'?
---------------------------------------------------

How can I use 'Marshal'?
------------------------

How can I use 'trap'?
---------------------


File: Ruby2_5.info,  Node: FAQ Extension Library,  Next: FAQ Other Features,  Prev: FAQ Built-In Libraries,  Up: Official FAQ

2.3.2.6 FAQ Extension Library
.............................

How can I use Ruby interactively?
---------------------------------

Is there a debugger for Ruby?
-----------------------------

How can I use a library written in C from Ruby?
-----------------------------------------------

Can I use 'Tcl/Tk' in Ruby?
---------------------------

'Tk' won't work. Why?
---------------------

Can I use 'gtk+' or 'xforms' interfaces in Ruby?
------------------------------------------------

How can I do date arithmetic?
-----------------------------


File: Ruby2_5.info,  Node: FAQ Other Features,  Prev: FAQ Extension Library,  Up: Official FAQ

2.3.2.7 FAQ Other Features
..........................

What does a ? b : c mean?
-------------------------

How can I count the number of lines in a file?
----------------------------------------------

What do 'MatchData#begin' and 'MatchData#end' return?
-----------------------------------------------------

How can I sum the elements in an array?
---------------------------------------

How can I use continuations?
----------------------------


File: Ruby2_5.info,  Node: Ruby Koans,  Next: Why’s (Poignant) Guide to Ruby,  Prev: Official FAQ,  Up: Getting Started

2.3.3 Ruby Koans
----------------

Ruby Koans (http://rubykoans.com/)

   The Koans walk you along the path to enlightenment in order to
learn Ruby.  The goal is to learn the Ruby language, syntax,
structure, and some common functions and libraries.  We also teach you
culture.


File: Ruby2_5.info,  Node: Why’s (Poignant) Guide to Ruby,  Next: Ruby in Twenty Minutes,  Prev: Ruby Koans,  Up: Getting Started

2.3.4 Why’s (Poignant) Guide to Ruby
------------------------------------

Why's Guide to Ruby (http://mislav.uniqpath.com/poignant-guide/)

   An unconventional but interesting book that will teach you Ruby
through stories, wit, and comics.  Originally created by 'why the
lucky stiff', this guide remains a classic for Ruby learners.


File: Ruby2_5.info,  Node: Ruby in Twenty Minutes,  Next: Ruby from Other Languages,  Prev: Why’s (Poignant) Guide to Ruby,  Up: Getting Started

2.3.5 Ruby in Twenty Minutes
----------------------------

Ruby in Twenty Minutes
(https://www.ruby-lang.org/en/documentation/quickstart/)

   A nice tutorial covering the basics of Ruby.  From start to finish
it shouldn’t take you more than twenty minutes.  It makes the
assumption that you already have Ruby installed.  (If you do not have
Ruby on your computer install it before you get started.)

* Menu:

* Interactive Ruby::
* Defining Methods::
* Altering Classes::
* Large Class Definition::
* Run MegaGreeter::


File: Ruby2_5.info,  Node: Interactive Ruby,  Next: Defining Methods,  Up: Ruby in Twenty Minutes

2.3.5.1 Interactive Ruby
........................

Ruby comes with a program that will show the results of any Ruby
statements you feed it.  Playing with Ruby code in interactive
sessions like this is a terrific way to learn the language.

   Open up 'IRB' (which stands for Interactive Ruby).

     ? irb
     -| irb(main):001:0>

     irb(main):001:0> "Hello World"
     => "Hello World"
     -| irb(main):002:0>

   The second line is just IRB’s way of telling us the result of the
last expression it evaluated.  To print:

     irb(main):002:0> puts "Hello World"
     -| Hello World
     => nil
     -| irb(main):003:0>

   'puts' is the basic command to print something out in Ruby.  But
then what’s the '=> nil' bit?  That’s the result of the expression.
'puts' always returns 'nil', which is Ruby’s
absolutely-positively-nothing value.


File: Ruby2_5.info,  Node: Defining Methods,  Next: Altering Classes,  Prev: Interactive Ruby,  Up: Ruby in Twenty Minutes

2.3.5.2 Defining Methods
........................

Define a method:

     irb(main):010:0> def hi
     irb(main):011:1> puts "Hello World!"
     irb(main):012:1> end
     => :hi

   The code 'def hi' starts the definition of the method.  The next
line is the body of the method.  Finally, the last line end tells Ruby
we’re done defining the method.  Ruby’s response -| '=> :hi' tells us
that it knows we're done defining the method.

   Try running that method a few times:

     irb(main):013:0> hi
     Hello World!
     => nil
     irb(main):014:0> hi()
     Hello World!
     => nil

   If the method doesn't take parameters that's all you need.  You can
add empty parentheses if you’d like, but they’re not needed.

Define Method with a Parameter
..............................

What if we want to say hello to one person, and not the whole world?
Just redefine 'hi' to take a name as a parameter.

     irb(main):015:0> def hi(name)
     irb(main):016:1> puts "Hello #{name}!"
     irb(main):017:1> end
     => :hi
     irb(main):018:0> hi("Matz")
     Hello Matz!
     => nil

   What's the '#{name}' bit?  That's Ruby's way of inserting something
into a string.  The bit between the braces is turned into a string (if
it isn’t one already) and then substituted into the outer string at
that point.  You can also use this to make sure that someone's name is
properly capitalized:

     irb(main):019:0> def hi(name = "World")
     irb(main):020:1> puts "Hello #{name.capitalize}!"
     irb(main):021:1> end
     => :hi
     irb(main):022:0> hi "chris"
     Hello Chris!
     => nil
     irb(main):023:0> hi
     Hello World!
     => nil

   A couple of other tricks to spot here.  One is that we're calling
the method without parentheses again.  If it's obvious what you’re
doing, the parentheses are optional.  The other trick is the default
parameter World.  What this is saying is "If the name isn't supplied,
use the default name of "World"".

Create a Class
--------------

What if we want a real greeter around, one that remembers your name
and welcomes you and treats you always with respect.  You might want
to use an object for that.  Let’s create a “Greeter” class.

     irb(main):024:0> class Greeter
     irb(main):025:1>   def initialize(name = "World")
     irb(main):026:2>     @name = name
     irb(main):027:2>   end
     irb(main):028:1>   def say_hi
     irb(main):029:2>     puts "Hi #{@name}!"
     irb(main):030:2>   end
     irb(main):031:1>   def say_bye
     irb(main):032:2>     puts "Bye #{@name}, come back soon."
     irb(main):033:2>   end
     irb(main):034:1> end
     => :say_bye

   The new keyword here is 'class'.  This defines a new class called
'Greeter' and a bunch of methods for that class.  Also notice '@name'.
This is an instance variable, and is available to all the methods of
the class.  As you can see it’s used by 'say_hi' and 'say_bye'.

Create an Object
----------------

Now let’s create a greeter object and use it:

     irb(main):035:0> greeter = Greeter.new("Pat")
     => #<Greeter:0x16cac @name="Pat">
     irb(main):036:0> greeter.say_hi
     Hi Pat!
     => nil
     irb(main):037:0> greeter.say_bye
     Bye Pat, come back soon.
     => nil

Instance Variables
------------------

Instance variables are hidden away inside the object.  They’re not
terribly hidden, you see them whenever you inspect the object, and
there are other ways of accessing them, but Ruby uses the good
object-oriented approach of keeping data sort-of hidden away.

   So what methods do exist for Greeter objects?

   'Object#instance_methods'

     irb(main):039:0> Greeter.instance_methods
     => [:say_hi, :say_bye, :instance_of?, :public_send,
         :instance_variable_get, :instance_variable_set,
         :instance_variable_defined?, :remove_instance_variable,
         :private_methods, :kind_of?, :instance_variables, :tap,
         :is_a?, :extend, :define_singleton_method, :to_enum,
         :enum_for, :<=>, :===, :=~, :!~, :eql?, :respond_to?,
         :freeze, :inspect, :display, :send, :object_id, :to_s,
         :method, :public_method, :singleton_method, :nil?, :hash,
         :class, :singleton_class, :clone, :dup, :itself, :taint,
         :tainted?, :untaint, :untrust, :trust, :untrusted?, :methods,
         :protected_methods, :frozen?, :public_methods, :singleton_methods,
         :!, :==, :!=, :__send__, :equal?, :instance_eval, :instance_exec, :__id__]

   We only defined two methods.  What’s going on here?  Well this is
all of the methods for Greeter objects, a complete list, including
ones defined by ancestor classes.  If we want to just list methods
defined for Greeter we can tell it to not include ancestors by passing
it the parameter false, meaning we don’t want methods defined by
ancestors.

   'Object#instance_methods(false)'

     irb(main):040:0> Greeter.instance_methods(false)
     => [:say_hi, :say_bye]

   So let’s see which methods our greeter object responds to:

   'Object#respond_to?'

     irb(main):041:0> greeter.respond_to?("name")
     => false
     irb(main):042:0> greeter.respond_to?("say_hi")
     => true
     irb(main):043:0> greeter.respond_to?("to_s")
     => true

   So, it knows 'say_hi', and 'to_s' (meaning convert something to a
string, a method that's defined by default for every object), but it
doesn't know 'name'.


File: Ruby2_5.info,  Node: Altering Classes,  Next: Large Class Definition,  Prev: Defining Methods,  Up: Ruby in Twenty Minutes

2.3.5.3 Altering Classes
........................

But what if you want to be able to view or change the name?  Ruby
provides an easy way of providing access to an object's variables.

   'attr_accessor :name'

     irb(main):044:0> class Greeter
     irb(main):045:1>   attr_accessor :name
     irb(main):046:1> end
     => nil

   In Ruby, you can open a class up again and modify it.  The changes
will be present in any new objects you create and even available in
existing objects of that class.  So, let’s create a new object and
play with its '@name' property.

     irb(main):047:0> greeter = Greeter.new("Andy")
     => #<Greeter:0x3c9b0 @name="Andy">
     irb(main):048:0> greeter.respond_to?("name")
     => true
     irb(main):049:0> greeter.respond_to?("name=")
     => true
     irb(main):050:0> greeter.say_hi
     Hi Andy!
     => nil
     irb(main):051:0> greeter.name="Betty"
     => "Betty"
     irb(main):052:0> greeter
     => #<Greeter:0x3c9b0 @name="Betty">
     irb(main):053:0> greeter.name
     => "Betty"
     irb(main):054:0> greeter.say_hi
     Hi Betty!
     => nil

   Using 'attr_accessor' defined two new methods for us, 'name' to get
the value, and 'name=' to set it.


File: Ruby2_5.info,  Node: Large Class Definition,  Next: Run MegaGreeter,  Prev: Altering Classes,  Up: Ruby in Twenty Minutes

2.3.5.4 Large Class Definition
..............................

What if we had some kind of MegaGreeter that could either greet the
world, one person, or a whole list of people?  Let’s write this one in
a file instead of directly in the interactive Ruby interpreter IRB.

{'ri20min.rb'} ==
     #!/usr/bin/env ruby

     class MegaGreeter
       attr_accessor :names

       <MegaGreeter--Initialize Method>
       <MegaGreeter--say_hi Method>
       <MegaGreeter--say_bye Method>
     end

     if __FILE__ == $0
       <MegaGreeter--Main Script>
     end


The following table lists called chunk definition points.
Chunk name                First definition point
-------------------------------------------------------------------------
<MegaGreeter--Initialize  See *note MegaGreeter---Initialize-Method::.
Method>
<MegaGreeter--Main        See *note MegaGreeter---Main-Script::.
Script>
<MegaGreeter--say_bye     See *note MegaGreeter---say-bye-Method::.
Method>
<MegaGreeter--say_hi      See *note MegaGreeter---say-hi-Method::.
Method>

Initialize Method
.................

<MegaGreeter--Initialize Method> ==
       # Create the object
       def initialize(names = "World")
         @names = names
       end


This chunk is called by {'ri20min.rb'}; see its first definition at
*note ri20min-rb::.

'say_hi' Method
---------------

The 'say_hi' method has become a bit more complicated.  It now looks
at the '@names' instance variable to make decisions.  If it's 'nil',
it just prints out three dots.  No point greeting nobody, right?

   If the '@names' object responds to each, it is something that you
can iterate over, so iterate over it and greet each person in turn.
Finally, if '@names' is anything else, just let it get turned into a
string automatically and do the default greeting.

<MegaGreeter--say_hi Method> ==
       # Say hi to everybody
       def say_hi
         if @names.nil?
           puts "..."
         elsif @names.respond_to?("each")
           # @names is a list of some kind, iterate!
           @names.each do |name|
             puts "Hello #{name}!"
           end
         else
           puts "Hello #{@names}!"
         end
       end


This chunk is called by {'ri20min.rb'}; see its first definition at
*note ri20min-rb::.

The Iterator
............

Let’s look at that iterator in more depth:

     @names.each do |name|
       puts "Hello #{name}!"
     end

   'each' is a method that accepts a block of code then runs that
block of code for every element in a list, and the bit between 'do'
and 'end' is just such a block.  A "block" is like an anonymous
function or lambda.  The variable between pipe characters is the
parameter for this block.

   What happens here is that for every entry in a list, 'name' is
bound to that list element, and then the expression puts '"Hello
#{name}!"' is run with that name.

   Internally, the 'each' method will essentially call 'yield'
'"Albert"', then 'yield' '"Brenda"' and then 'yield' '"Charles"', and
so on.

The Real Power of Blocks
........................

The real power of blocks is when dealing with things that are more
complicated than lists.  Beyond handling simple housekeeping details
within the method, you can also handle setup, teardown, and errors—all
hidden away from the cares of the user.

'say_bye' Method
----------------

The 'say_bye' method doesn't use 'each'; instead it checks to see if
'@names' "responds" to the 'join' method, and if so, uses it.
Otherwise, it just prints out the variable as a string.

Duck Typing
...........

This method of not caring about the actual type of a variable, just
relying on what methods it supports is known as "Duck Typing", as in
"if it walks like a duck and quacks like a duck...".  The benefit of
this is that it doesn't unnecessarily restrict the types of variables
that are supported.  If someone comes up with a new kind of list
class, as long as it implements the 'join' method with the same
semantics as other lists, everything will work as planned.

<MegaGreeter--say_bye Method> ==
       # Say bye to everybody
       def say_bye
         if @names.nil?
           puts "..."
         elsif @names.respond_to?("join")
           # Join the list elements with commas
           puts "Goodbye #{@names.join(", ")}.  Come back soon!"
         else
           puts "Goodbye #{@names}.  Come back soon!"
         end
       end


This chunk is called by {'ri20min.rb'}; see its first definition at
*note ri20min-rb::.

MegaGreeter Main Script
-----------------------

There’s one final trick to notice, and that’s the line:

     if __FILE__ == $0

   __FILE__ is the magic variable that contains the name of the
current file.  $0 is the name of the file used to start the program.
This check says "If this is the main file being used..." This allows a
file to be used as a library, and not to execute code in that context,
but if the file is being used as an executable, then execute that
code.

<MegaGreeter--Main Script> ==
       mg = MegaGreeter.new
       mg.say_hi
       mg.say_bye

       # Change name to be "Zeke"
       mg.names = "Zeke"
       mg.say_hi
       mg.say_bye

       # Change the name to an array of names
       mg.names = ["Albert", "Brenda", "Charles",
                   "Dave", "Engelbert"]
       mg.say_hi
       mg.say_bye

       # Change to nil
       mg.names = nil
       mg.say_hi
       mg.say_bye


This chunk is called by {'ri20min.rb'}; see its first definition at
*note ri20min-rb::.


File: Ruby2_5.info,  Node: Run MegaGreeter,  Prev: Large Class Definition,  Up: Ruby in Twenty Minutes

2.3.5.5 Run MegaGreeter
.......................

Run the program 'ri20min.rb' as 'ruby ri20min.rb'.  The output should
be:

     Hello World!
     Goodbye World.  Come back soon!
     Hello Zeke!
     Goodbye Zeke.  Come back soon!
     Hello Albert!
     Hello Brenda!
     Hello Charles!
     Hello Dave!
     Hello Engelbert!
     Goodbye Albert, Brenda, Charles, Dave, Engelbert.  Come back soon!
     ...
     ...


File: Ruby2_5.info,  Node: Ruby from Other Languages,  Next: Important Language Features,  Prev: Ruby in Twenty Minutes,  Up: Getting Started

2.3.6 Ruby from Other Languages
-------------------------------

Ruby from Other Languages
(https://www.ruby-lang.org/en/documentation/ruby-from-other-languages/)

   This document contains two major sections.  The first attempts to
be a rapid-fire summary of what you can expect to see when going from
language X to Ruby.  The second section tackles the major language
features and how they might compare to what you’re already familiar
with.

* Menu:

* To Ruby From C and C++::
* To Ruby From Java::
* To Ruby From Perl::
* To Ruby From PHP::
* To Ruby From Python::


File: Ruby2_5.info,  Node: To Ruby From C and C++,  Next: To Ruby From Java,  Up: Ruby from Other Languages

2.3.6.1 To Ruby From C and C++
..............................

Everything Is Differerent
-------------------------

It's difficult to write a bulleted list describing how your code will
be different in Ruby from C or C++ because it's quite a large
difference.  One reason is that the Ruby runtime does so much for you.
Ruby seems about as far as you can get from C's "no hidden mechanism"
principle--the whole point of Ruby is to make the human's job easier
at the expense of making the runtime shoulder more of the work.

Ruby is Quicker to Code But Slower to Execute
.............................................

That said, for one thing, you can expect your Ruby code to execute
much more slowly than "equivalent" C or C++ code.  At the same time,
your head will spin at how rapidly you can get a Ruby program up and
running, as well as at how few lines of code it will take to write it.
Ruby is much much simpler than C++.

Dynamically Typed
-----------------

Ruby is dynamically typed, rather than statically typed--the runtime
does as much as possible at run-time.  For example, you don't need to
know what modules your Ruby program will "link to" (that is, load and
use) or what methods it will call ahead of time.

Extension Modules
-----------------

Happily, it turns out that Ruby and C have a healthy symbiotic
relationship.  Ruby supports so-called "extension modules".  These are
modules that you can use from your Ruby programs (and which, from the
outside, will look and act just like any other Ruby module), but which
are written in C. In this way, you can compartmentalize the
performance-critical parts of your Ruby software, and smelt those down
to pure C.

   And, of course, Ruby itself is written in C.

Similarities With C
-------------------

   * You may program procedurally if you like (but it will still be
     object-oriented behind the scenes).
   * Most of the operators are the same (including the compound
     assignment and also bitwise operators).  Though, Ruby doesn’t
     have '++' or '--'.
   * Ruby has __FILE__ and __LINE__.
   * You can also have constants, though there’s no special const
     keyword.  'Const'-ness is enforced by a naming convention instead
     -- names starting with a capital letter are for constants.
   * Strings go in double-quotes and are mutable
   * Just like man pages, you can read most docs in your terminal
     window -- though using the 'ri' command.
   * You’ve got the same sort of command-line debugger available.

Similarities with C++
---------------------

   * You’ve got mostly the same operators (even '::').  '<<' is often
     used for appending elements to a list.  One note though: with
     Ruby you never use '->' -- it's always just '.'.
   * 'public', 'private', and 'protected' do similar jobs.
   * Inheritance syntax is still only one character, but it's '<'
     instead of ':'.
   * You may put your code into "modules", similar to how 'namespace'
     in C++ is used.
   * Exceptions work in a similar manner, though the keyword names
     have been changed to protect the innocent.

Differences From C
------------------

   * You don’t need to compile your code.  You just run it directly.
   * Objects are strongly typed (and variable names themselves have no
     type at all).
   * There’s no macros or preprocessor; no casts; no pointers (nor
     pointer arithmetic); no typedefs, sizeof, or enums.
   * There are no header files.  You just define your functions
     (usually referred to as "methods") and classes in the main source
     code files.
   * There’s no '#define'.  Just use constants instead.
   * All variables live on the heap.  Further, you don’t need to free
     them yourself -- the garbage collector takes care of that.
   * Arguments to methods (i.e.  functions) are passed by value, where
     the values are always object references.
   * It's 'require 'foo'' instead of '#include <foo>' or '#include
     "foo"'.
   * You cannot drop down to assembly.
   * There’s no semicolons ending lines.
   * You go without parentheses for 'if' and 'while' condition
     expressions.
   * Parentheses for method (i.e.  function) calls are often optional.
   * You don’t usually use braces -- just end multi-line constructs
     (like 'while' loops) with an 'end' keyword.
   * The 'do' keyword is for so-called "blocks".  There’s no "do
     statement" like in C.
   * The term "block" means something different.  It's for a block of
     code that you associate with a method call so the method body can
     call out to the block while it executes.
   * There are no variable declarations.  You just assign to new names
     on-the-fly when you need them.
   * When tested for truth, only 'false' and 'nil' evaluate to a
     'false' value.  Everything else is true (including '0', '0.0',
     and '"0"').
   * There is no 'char' -- they are just 1-letter strings.
   * Strings don’t end with a null byte.
   * Array literals go in brackets instead of braces.
   * Arrays just automatically get bigger when you stuff more elements
     into them.
   * If you add two arrays, you get back a new and bigger array (of
     course, allocated on the heap) instead of doing pointer
     arithmetic.
   * More often than not, everything is an expression (that is, things
     like 'while' statements actually evaluate to an 'rvalue').

Differences from C++
--------------------

   * There’s no explicit references.  That is, in Ruby, every variable
     is just an automatically dereferenced name for some object.
   * Objects are strongly but _dynamically_ typed.  The runtime
     discovers _at runtime_ if that method call actually works.
   * The "constructor" is called 'initialize' instead of the class
     name.
   * All methods are always virtual.
   * "Class" ('static') variable names always begin with '@@' (as in
     '@@total_widgets').
   * You don’t directly access member variables -- all access to
     public member variables (known in Ruby as "attributes") is via
     methods.
   * It's 'self' instead of 'this'.
   * Some methods end in a '?' or a '!'.  It's actually part of the
     method name.
   * There's no multiple inheritance per se.  Though Ruby has "mixins"
     (i.e.  you can "inherit" all instance methods of a module).
   * There are some enforced case-conventions (ex.  class names start
     with a capital letter, variables start with a lowercase letter).
   * Parentheses for method calls are usually optional.
   * You can re-open a class anytime and add more methods.
   * There’s no need of C++ templates (since you can assign any kind
     of object to a given variable, and types get figured out at
     runtime anyway).  No casting either.
   * Iteration is done a bit differently.  In Ruby, you don't use a
     separate iterator object (like 'vector<T>::const_iterator iter').
     Instead you use an iterator method of the container object (like
     'each') that takes a block of code to which it passes successive
     elements.
   * There’s only two container types: 'Array' and 'Hash'.
   * There’s no type conversions.  With Ruby though, you’ll probably
     find that they aren’t necessary.
   * Multithreading is built-in, but as of Ruby 1.8 they are "green
     threads" (implemented only within the interpreter) as opposed to
     native threads.
   * A unit testing lib comes standard with Ruby.


File: Ruby2_5.info,  Node: To Ruby From Java,  Next: To Ruby From Perl,  Prev: To Ruby From C and C++,  Up: Ruby from Other Languages

2.3.6.2 To Ruby From Java
.........................

Ruby is Less Verbose
--------------------

Java is mature.  It's tested.  And it's fast (contrary to what the
anti-Java crowd may still claim).  It's also quite verbose.  Going
from Java to Ruby, expect your code size to shrink down considerably.
You can also expect it to take less time to knock together quick
prototypes.

Similarities with Java
----------------------

   * Memory is managed for you via a garbage collector.
   * Objects are strongly typed.
   * There are 'public', 'private', and 'protected' methods.
   * There are embedded doc tools (Ruby's is called 'RDoc').  The docs
     generated by 'rdoc' look very similar to those generated by
     'javadoc'.

Differences From Java
---------------------

   * You don’t need to compile your code.  You just run it directly.
   * There are several different popular third-party GUI toolkits.
     Ruby users can try 'WxRuby', 'FXRuby', 'Ruby-GNOME2', 'Qt', or
     the bundled-in 'Ruby Tk' for example.
   * You use the 'end' keyword after defining things like classes,
     instead of having to put braces around blocks of code.
   * You have 'require' instead of 'import'.
   * All member variables are private.  From the outside, you access
     everything via methods.
   * Parentheses in method calls are usually optional and often
     omitted.
   * Everything is an object, including numbers like '2' and
     '3.14159'.
   * There’s no static type checking.
   * Variable names are just labels.  They don’t have a type
     associated with them.
   * There are no type declarations.  You just assign to new variable
     names as-needed and they just "spring up" (i.e.  'a = [1,2,3]'
     rather than 'int[] a = {1,2,3};').
   * There’s no casting.  Just call the methods.  Your unit tests
     should tell you before you even run the code if you’re going to
     see an exception.
   * It's 'foo = Foo.new("hi")' instead of 'Foo foo = new Foo("hi")'.
   * The constructor is always named 'initialize' instead of the name
     of the class.
   * You have "mixins" instead of interfaces.
   * YAML tends to be favored over XML.
   * It's 'nil' instead of 'null'.
   * '==' and 'equals()' are handled differently in Ruby.  Use '=='
     when you want to test "equivalence" in Ruby ('equals()' in Java).
     Use 'equal?()' when you want to know if two objects are "the
     same" ('==' in Java).


File: Ruby2_5.info,  Node: To Ruby From Perl,  Next: To Ruby From PHP,  Prev: To Ruby From Java,  Up: Ruby from Other Languages

2.3.6.3 To Ruby From Perl
.........................

Perl is awesome.  Perl's docs are awesome.  The Perl community is --
awesome.  However, the language is fairly large and arguably complex.
For those Perlers who long for a simpler time, a more orthogonal
language, and elegant OO features built-in from the beginning, Ruby
may be for you.

Similarities with Perl
----------------------

   * You’ve got a package management system, somewhat like CPAN
     (though it’s called RubyGems (http://guides.rubygems.org/)).
   * Regexes are built right in.
   * There's a fairly large number of commonly-used built-ins.
   * Parentheses are often optional.
   * Strings work basically the same.
   * There’s a general delimited string and regex quoting syntax
     similar to Perl’s.  It looks like %q{this} (single-quoted), or
     %Q{this} (double-quoted), and %w{this for a single-quoted
     list of words}.  You %Q|can| %Q(use) %Q^other^ delimiters if you
     like.
   * You’ve got double-quotish variable interpolation, though it
     '"looks #{like} this"' (and you can put any Ruby code you like
     inside that '#{}').
   * Shell command expansion uses '`backticks`'.
   * You’ve got embedded doc tools (Ruby’s is called 'rdoc').

Differences From Perl
---------------------

   * You don’t have the context-dependent rules like with Perl.
   * A variable isn't the same as the object to which it refers.
     Instead, it's always just a reference to an object.
   * Although '$' and '@' are used as the first character in variable
     names sometimes, rather than indicating type, they indicate scope
     ('$' for globals, '@' for object instance, and '@@' for class
     attributes).
   * Array literals go in brackets instead of parentheses.
   * Composing lists of other lists does not flatten them into one big
     list.  Instead you get an array of arrays.
   * It's 'def' instead of 'sub'.
   * There's no semicolons needed at the end of each line.
     Incidentally, you end things like function definitions, class
     definitions, and case statements with the 'end' keyword.
   * Objects are strongly typed.  You’ll be manually calling
     'foo.to_i', 'foo.to_s', etc., if you need to convert between
     types.
   * There’s no 'eq', 'ne', 'lt', 'gt', 'ge', nor 'le'.
   * There’s no diamond operator ('<>').  You usually use
     'IO.some_method' instead.
   * The fat comma '=>' is only used for hash literals.
   * There’s no 'undef'.  In Ruby you have 'nil'.  'nil' is an object
     (like anything else in Ruby).  It's not the same as an undefined
     variable.  It evaluates to 'false' if you treat it like a
     boolean.
   * When tested for truth, only 'false' and 'nil' evaluate to a
     'false' value.  Everything else is 'true' (including '0', '0.0',
     and '"0"').


File: Ruby2_5.info,  Node: To Ruby From PHP,  Next: To Ruby From Python,  Prev: To Ruby From Perl,  Up: Ruby from Other Languages

2.3.6.4 To Ruby From PHP
........................

PHP is in widespread use for web applications, but if you want to use
Ruby on Rails or just want a language that’s more tailored for general
use, Ruby is worth a look.

Similarities with PHP
---------------------

   * Ruby is dynamically typed, like in PHP, so you don’t need to
     worry about having to declare variables.
   * There are classes, and you can control access to them like in PHP
     5 (public, protected and private).
   * Some variables start with '$', like in PHP (but not all).
   * There's 'eval', too.
   * You can use string interpolation.  Instead of doing '"$foo is a
     $bar"', you can do '"#{foo} is a #{bar}"' -- like in PHP, this
     doesn’t apply for single-quoted strings.
   * There’s heredocs.
   * Ruby has exceptions, like PHP 5.
   * There’s a fairly large standard library.
   * Arrays and hashes work like expected, if you exchange 'array()'
     for '{' and '}': 'array('a' => 'b')' becomes '{'a' => 'b'}'.
   * 'true' and 'false' behave like in PHP, but 'null' is called
     'nil'.

Differences From PHP
--------------------

   * There’s strong typing.  You’ll need to call 'to_s', 'to_i' etc.
     to convert between strings, integers and so on, instead of
     relying on the language to do it.
   * Strings, numbers, arrays, hashes, etc.  are objects.  Instead of
     calling 'abs(-1)' it’s '-1.abs'.
   * Parentheses are optional in method calls, except to clarify which
     parameters go to which method calls.
   * The standard library and extensions are organized in modules and
     classes.
   * Reflection is an inherent capability of objects; you don’t need
     to use 'Reflection' classes like in PHP 5.
   * Variables are references.
   * There’s no 'abstract' classes or 'interfaces'.
   * Hashes and arrays are not interchangeable.
   * Only 'false' and 'nil' are false: '0', 'array()' and '""' are all
     true in conditionals.
   * Almost everything is a method call, even 'raise' ('throw' in
     PHP).


File: Ruby2_5.info,  Node: To Ruby From Python,  Prev: To Ruby From PHP,  Up: Ruby from Other Languages

2.3.6.5 To Ruby From Python
...........................

Python is another very nice general purpose programming language.
Going from Python to Ruby, you'll find that there's a little bit more
syntax to learn than with Python.

Similarities With Python
------------------------

   * There’s an interactive prompt (called 'irb').
   * You can read docs on the command line (with the 'ri' command
     instead of 'pydoc').
   * There are no special line terminators (except the usual newline).
   * String literals can span multiple lines like Python's
     triple-quoted strings.
   * Brackets are for lists, and braces are for dicts (which, in Ruby,
     are called "hashes").
   * Arrays work the same (adding them makes one long array, but
     composing them like this 'a3 = [ a1, a2 ]' gives you an array of
     arrays).
   * Objects are strongly and dynamically typed.
   * Everything is an object, and variables are just references to
     objects.
   * Although the keywords are a bit different, exceptions work about
     the same.
   * You’ve got embedded doc tools (Ruby’s is called 'rdoc').
   * There is good support for functional programming with first-class
     functions, anonymous functions, and closures.

Differences From Python
-----------------------

   * Strings are mutable.
   * You can make constants (variables whose value you don’t intend to
     change).
   * There are some enforced case-conventions (ex.  class names start
     with a capital letter, variables start with a lowercase letter).
   * There's only one kind of list container (an 'Array'), and it's
     mutable.
   * Double-quoted strings allow escape sequences (like '\t') and a
     special "expression substitution" syntax (which allows you to
     insert the results of Ruby expressions directly into other
     strings without having to '"add " + "strings " + "together"').
     Single-quoted strings are like Python's 'r"raw strings"'.
   * There are no "new style" and "old style" classes.  Just one kind.
     (Python 3+ doesn’t have this issue, but it isn’t fully backward
     compatible with Python 2.)
   * You never directly access attributes.  With Ruby, it’s all method
     calls.
   * Parentheses for method calls are usually optional.
   * There's 'public', 'private', and 'protected' to enforce access,
     instead of Python's '_voluntary_' underscore '__convention__'.
   * "mixins" are used instead of multiple inheritance.
   * You can add or modify the methods of built-in classes.  Both
     languages let you open up and modify classes at any point, but
     Python prevents modification of built-ins -- Ruby does not.
   * You’ve got 'true' and 'false' instead of 'True' and 'False' (and
     'nil' instead of 'None').
   * When tested for truth, only 'false' and 'nil' evaluate to a
     'false' value.  Everything else is 'true' (including '0', '0.0',
     '""', and '[]').
   * It's 'elsif' instead of 'elif'.
   * It's 'require' instead of 'import'.  Otherwise though, usage is
     the same.
   * The usual-style comments on the line(s) above things (instead of
     docstrings below them) are used for generating docs.
   * There are a number of shortcuts that, although give you more to
     remember, you quickly learn.  They tend to make Ruby fun and very
     productive.
   * There’s no way to unset a variable once set (like Python's 'del'
     statement).  You can reset a variable to 'nil', allowing the old
     contents to be garbage collected, but the variable will remain in
     the symbol table as long as it is in scope.
   * The 'yield' keyword behaves differently.  In Python it will
     return execution to the scope outside the function's invocation.
     External code is responsible for resuming the function.  In Ruby
     'yield' will execute another function that has been passed as the
     final argument, then immediately resume.
   * Python supports just one kind of anonymous functions, lambdas,
     while Ruby contains blocks, Procs, and lambdas.


File: Ruby2_5.info,  Node: Important Language Features,  Next: Learning Ruby,  Prev: Ruby from Other Languages,  Up: Getting Started

2.3.7 Important Language Features
---------------------------------

Here are some pointers and hints on major Ruby features you'll see
while learning Ruby.

* Menu:

* Pointers on Iteration::
* Everything has a value::
* Symbols are not lightweight Strings::
* Everything is an Object::
* Variable Constants::
* Naming conventions::
* Keyword arguments::
* The universal truth::
* Access modifiers are Methods::
* Method access::
* Classes are open::
* Funny method names::
* Singleton methods::
* Missing methods::
* Message passing --- not function calls::
* Blocks are Objects::
* Operators are syntactic sugar::


File: Ruby2_5.info,  Node: Pointers on Iteration,  Next: Everything has a value,  Up: Important Language Features

2.3.7.1 Pointers on Iteration
.............................

Two Ruby features that are a bit unlike what you may have seen before,
and which take some getting used to, are "blocks" and iterators.
Instead of looping over an index (like with C, C++, or pre-1.5 Java),
or looping over a list (like Perl's 'for (@a) {...}', or Python's 'for
i in aList: ...'), with Ruby you'll very often instead see:

     some_list.each do |this_item|
       # We're inside the block.
       # deal with this_item.
     end

   For more info on 'each' and its friends

   * 'collect',
   * 'find',
   * 'inject',
   * 'sort',

   etc., see 'ri Enumerable' (and then 'ri Enumerable#some_method').


File: Ruby2_5.info,  Node: Everything has a value,  Next: Symbols are not lightweight Strings,  Prev: Pointers on Iteration,  Up: Important Language Features

2.3.7.2 Everything has a value
..............................

There’s no difference between an expression and a statement.
Everything has a value, even if that value is 'nil'.  This is
possible:

     x = 10
     y = 11
     z = if x < y
           true
         else
           false
         end
     z # => true


File: Ruby2_5.info,  Node: Symbols are not lightweight Strings,  Next: Everything is an Object,  Prev: Everything has a value,  Up: Important Language Features

2.3.7.3 Symbols are not lightweight Strings
...........................................

Many Ruby newbies struggle with understanding what Symbols are, and
what they can be used for.

   "Symbols" can best be described as identities.  A symbol is all
about who it is, not what it is.  Fire up 'irb' and see the
difference:

     irb(main):001:0> :george.object_id == :george.object_id
     => true
     irb(main):002:0> "george".object_id == "george".object_id
     => false
     irb(main):003:0>

   The 'object_id' methods returns the identity of an Object.  If two
objects have the same 'object_id', they are the same (point to the
same Object in memory).

   As you can see, once you have used a Symbol once, any Symbol with
the same characters references the same Object in memory.  For any
given two Symbols that represent the same characters, the 'object_id's
match.

   Now take a look at the String ('“george”').  The 'object_id's don't
match.  That means they're referencing two different objects in
memory.  Whenever you use a new String, Ruby allocates memory for it.

   If you're in doubt whether to use a Symbol or a String, consider
what’s more important: the identity of an object (i.e.  a Hash key),
or the contents (in the example above, '“george”').


File: Ruby2_5.info,  Node: Everything is an Object,  Next: Variable Constants,  Prev: Symbols are not lightweight Strings,  Up: Important Language Features

2.3.7.4 Everything is an Object
...............................

     ``Everything is an object'' isn't just hyperbole.  Even classes and integers are
     objects, and you can do the same things with them as with any other object:

     # This is the same as
     # class MyClass
     #   attr_accessor :instance_var
     # end
     MyClass = Class.new do
       attr_accessor :instance_var
     end


File: Ruby2_5.info,  Node: Variable Constants,  Next: Naming conventions,  Prev: Everything is an Object,  Up: Important Language Features

2.3.7.5 Variable Constants
..........................

Constants are not really constant.  If you modify an already
initialized constant, it will trigger a warning, but not halt your
program.  That isn't to say you should redefine constants, though.


File: Ruby2_5.info,  Node: Naming conventions,  Next: Keyword arguments,  Prev: Variable Constants,  Up: Important Language Features

2.3.7.6 Naming conventions
..........................

Ruby enforces some naming conventions.  If an identifier starts with a
capital letter, it is a constant.  If it starts with a dollar sign
('$'), it is a global variable.  If it starts with '@', it is an
instance variable.  If it starts with '@@', it is a class variable.

   Method names, however, are allowed to start with capital letters.
This can lead to confusion, as the example below shows:

     Constant = 10
     def Constant
       11
     end

   Now 'Constant' is 10, but 'Constant()' is 11.


File: Ruby2_5.info,  Node: Keyword arguments,  Next: The universal truth,  Prev: Naming conventions,  Up: Important Language Features

2.3.7.7 Keyword arguments
.........................

Like in Python, since Ruby 2.0 methods can be defined using keyword
arguments:

     def deliver(from: "A", to: nil, via: "mail")
       "Sending from #{from} to #{to} via #{via}."
     end

     deliver(to: "B")
     # => "Sending from A to B via mail."
     deliver(via: "Pony Express", from: "B", to: "A")
     # => "Sending from B to A via Pony Express."


File: Ruby2_5.info,  Node: The universal truth,  Next: Access modifiers are Methods,  Prev: Keyword arguments,  Up: Important Language Features

2.3.7.8 The universal truth
...........................

In Ruby, everything except 'nil' and 'false' is considered true.  In
C, Python and many other languages, '0' and possibly other values,
such as empty lists, are considered false.  Take a look at the
following Python code (the example applies to other languages, too):

     # in Python
     if 0:
       print("0 is true")
     else:
       print("0 is false")

   This will print '“0 is false”'.  The equivalent Ruby:

     # in Ruby
     if 0
       puts "0 is true"
     else
       puts "0 is false"
     end

   Prints '“0 is true”'.


File: Ruby2_5.info,  Node: Access modifiers are Methods,  Next: Method access,  Prev: The universal truth,  Up: Important Language Features

2.3.7.9 Access modifiers are Methods
....................................

Access modifiers apply until the end of scope.

   In the following Ruby code,

     class MyClass
       private
       def a_method; true; end
       def another_method; false; end
     end

   You might expect 'another_method' to be public.  Not so.  The
'private' access modifier continues until the end of the scope, or
until another access modifier pops up, whichever comes first.  By
default, methods are public:

     class MyClass
       # Now a_method is public
       def a_method; true; end

       private

       # another_method is private
       def another_method; false; end
     end

   * 'public',
   * 'private' and
   * 'protected'

   are really methods, so they can take parameters.  If you pass a
Symbol to one of them, that method’s visibility is altered.


File: Ruby2_5.info,  Node: Method access,  Next: Classes are open,  Prev: Access modifiers are Methods,  Up: Important Language Features

2.3.7.10 Method access
......................

In Java, 'public' means a method is accessible by anyone.  'protected'
means the class's instances, instances of descendant classes, and
instances of classes in the same package can access it, but not anyone
else; and 'private' means nobody besides the class's instances can
access the method.

   Ruby differs slightly.  'public' is, naturally, public.  'private'
means the method(s) are accessible only when they can be called
without an explicit receiver.  Only 'self' is allowed to be the
receiver of a private method call.

   'protected' is the one to be on the lookout for.  A 'protected'
method can be called from a class or descendant class instances, but
also with another instance as its receiver.  Here is an example
(adapted from The Ruby Language FAQ):

     class Test
       # public by default
       def identifier
         99
       end

       def ==(other)
         identifier == other.identifier
       end
     end

     t1 = Test.new  # => #<Test:0x34ab50>
     t2 = Test.new  # => #<Test:0x342784>
     t1 == t2       # => true

     # now make `identifier' protected; it still works
     # because protected allows `other' as receiver

     class Test
       protected :identifier
     end

     t1 == t2  # => true

     # now make `identifier' private

     class Test
       private :identifier
     end

     t1 == t2
     # NoMethodError: private method `identifier' called for #<Test:0x342784>


File: Ruby2_5.info,  Node: Classes are open,  Next: Funny method names,  Prev: Method access,  Up: Important Language Features

2.3.7.11 Classes are open
.........................

Ruby classes are open.  You can open them up, add to them, and change
them at any time.  Even core classes, like 'Fixnum' or even 'Object',
the parent of all objects.  Ruby on Rails defines a bunch of methods
for dealing with time on 'Fixnum'.  Watch:

     class Fixnum
       def hours
         self * 3600 # number of seconds in an hour
       end
       alias hour hours
     end

     # 14 hours from 00:00 January 1st
     # (aka when you finally wake up ;)
     Time.mktime(2006, 01, 01) + 14.hours # => Sun Jan 01 14:00:00


File: Ruby2_5.info,  Node: Funny method names,  Next: Singleton methods,  Prev: Classes are open,  Up: Important Language Features

2.3.7.12 Funny method names
...........................

In Ruby, methods are allowed to end with question marks or exclamation
marks.  By convention, methods that answer questions end in question
marks (e.g.  'Array#empty?', which returns 'true' if the receiver is
empty).  Potentially "dangerous" methods by convention end with
exclamation marks (e.g.  methods that modify 'self' or the arguments,
'exit!', etc.).  Not all methods that change their arguments end with
exclamation marks, though.  'Array#replace' replaces the contents of
an array with the contents of another array.  It doesn’t make much
sense to have a method like that that doesn't modify self.


File: Ruby2_5.info,  Node: Singleton methods,  Next: Missing methods,  Prev: Funny method names,  Up: Important Language Features

2.3.7.13 Singleton methods
..........................

"Singleton methods" are per-object methods.  They are only available
on the Object you defined it on.

     class Car
       def inspect
         "Cheap car"
       end
     end

     porsche = Car.new
     porsche.inspect # => Cheap car
     def porsche.inspect
       "Expensive car"
     end

     porsche.inspect # => Expensive car

     # Other objects are not affected
     other_car = Car.new
     other_car.inspect # => Cheap car


File: Ruby2_5.info,  Node: Missing methods,  Next: Message passing --- not function calls,  Prev: Singleton methods,  Up: Important Language Features

2.3.7.14 Missing methods
........................

Ruby doesn't give up if it can't find a method that responds to a
particular message.  It calls the 'method_missing' method with the
name of the method it couldn't find and the arguments.  By default,
'method_missing' raises a 'NameError' exception, but you can redefine
it to better fit your application, and many libraries do.  Here is an
example:

     # id is the name of the method called, the * syntax collects
     # all the arguments in an array named 'arguments'
     def method_missing(id, *arguments)
       puts "Method #{id} was called, but not found. It has " +
            "these arguments: #{arguments.join(", ")}"
     end

     __ :a, :b, 10
     # => Method __ was called, but not found. It has these
     # arguments: a, b, 10

   The code above just prints the details of the call, but you are
free to handle the message in any way that is appropriate.


File: Ruby2_5.info,  Node: Message passing --- not function calls,  Next: Blocks are Objects,  Prev: Missing methods,  Up: Important Language Features

2.3.7.15 Message passing, not function calls
............................................

A method call is really a "message" to another object:

     # This
     1 + 2
     # Is the same as this ...
     1.+(2)
     # Which is the same as this:
     1.send "+", 2


File: Ruby2_5.info,  Node: Blocks are Objects,  Next: Operators are syntactic sugar,  Prev: Message passing --- not function calls,  Up: Important Language Features

2.3.7.16 Blocks are Objects
...........................

Blocks (closures, really) are heavily used by the standard library.
To call a block, you can either use 'yield', or make it a 'Proc' by
appending a special argument to the argument list, like so:

     def block(&the_block)
       # Inside here, the_block is the block passed to the method
       the_block # return the block
     end
     adder = block { |a, b| a + b }
     # adder is now a Proc object
     adder.class # => Proc

   You can create blocks outside of method calls, too, by calling
'Proc.new' with a block or calling the 'lambda' method.

   Similarly, methods are also Objects in the making:

     method(:puts).call "puts is an object!"
     # => puts is an object!


File: Ruby2_5.info,  Node: Operators are syntactic sugar,  Prev: Blocks are Objects,  Up: Important Language Features

2.3.7.17 Operators are syntactic sugar
......................................

Most operators in Ruby are just syntactic sugar (with some precedence
rules) for method calls.  You can, for example, override 'Fixnum'’s
'+' method:

     class Fixnum
       # You can, but please don't do this
       def +(other)
         self - other
       end
     end

   You don’t need C++'s 'operator+', etc.

   You can even have array-style access if you define the '[]' and
'[]=' methods.  To define the unary '+' and '-' (think '+1' and '-2'),
you must define the '+@' and '-@' methods, respectively.  The
operators below are not syntactic sugar, though.  They are not
methods, and cannot be redefined:

     =, .., ..., not, &&, and, ||, or, ::

   In addition, '+=, *=' etc.  are just abbreviations for 'var = var +
other_var', 'var = var * other_var', etc.  and therefore cannot be
redefined.


File: Ruby2_5.info,  Node: Learning Ruby,  Next: Ruby Essentials,  Prev: Important Language Features,  Up: Getting Started

2.3.8 Learning Ruby
-------------------

Learning Ruby (http://rubylearning.com/)

   A thorough collection of Ruby study notes for those who are new to
the language and in search of a solid introduction to Ruby’s concepts
and constructs.


File: Ruby2_5.info,  Node: Ruby Essentials,  Next: Learn to Program,  Prev: Learning Ruby,  Up: Getting Started

2.3.9 Ruby Essentials
---------------------

Ruby Essentials (http://www.techotopia.com/index.php/Ruby_Essentials)

   Ruby Essentials is a free on-line book designed to provide a
concise and easy to follow [sic] guide to learning Ruby.

* Menu:

* Interactive Ruby Execution::
* Block Ruby Comments::
* Variable Scope::


File: Ruby2_5.info,  Node: Interactive Ruby Execution,  Next: Block Ruby Comments,  Up: Ruby Essentials

2.3.9.1 Interactive Ruby Execution
..................................

Interactive Ruby code is entered using the 'irb' tool.

   Once irb is installed, launch it as follows:

     $ irb
     irb(main):001:0>

   Now, we can begin to execute Ruby code:

     irb(main):001:0> puts 'Hello Ruby'
     Hello Ruby
     => nil
     irb(main):002:0>


File: Ruby2_5.info,  Node: Block Ruby Comments,  Next: Variable Scope,  Prev: Interactive Ruby Execution,  Up: Ruby Essentials

2.3.9.2 Block Ruby Commenets
............................

Multiple lines of text or code can be defined as comments using the
Ruby '=begin' and '=end' comment markers.  These are known as the
"comment block markers".


File: Ruby2_5.info,  Node: Variable Scope,  Prev: Block Ruby Comments,  Up: Ruby Essentials

2.3.9.3 Variable Scope
......................

"Scope" defines where in a program a variable is accessible.  Ruby has
four types of variable scope, plus one constant type.  Each variable
type is declared by using a special character at the start of the
variable name as outlined in the following table.

local              [a-z] or _
global             '$'
instance           '@'
class              '@@'
constant           [A-Z]

Detecting The Scope Of A Variable
---------------------------------

Sometimes you need to find out the scope programmatically.  A useful
technique to find out the scope of a variable is to use the 'defined?'
method.  'defined?' will return the scope of the variable referenced,
or 'nil' if the variable is not defined in the current context.

     x = 10
     => 10
     defined? x
     => "local-variable"

     $x = 10
     => 10
     defined? $x
     => "global-variable"

Predefined Global Variables
---------------------------

*Note Globals::

'$@'    The location of latest error
        
'$_'    The string last read by gets
        
'$.'    The line number last read by interpreter
        
'$&'    The string last matched by regexp
        
'$~'    The last regexp match, as an array of subexpressions
        
'$n'    The nth subexpression in the last match (same as $~[n])
        
'$='    The case-insensitivity flag
        
'$/'    The input record separator
        
'$\'    The output record separator
        
'$0'    The name of the ruby script file currently executing
        
'$*'    The command line arguments used to invoke the script
        
'$$'    The Ruby interpreter's process ID
        
'$?'    The exit status of last executed child process
        


File: Ruby2_5.info,  Node: Learn to Program,  Prev: Ruby Essentials,  Up: Getting Started

2.3.10 Learn to Program
-----------------------

Learn to Program (http://pine.fm/LearnToProgram/)

   A wonderful little tutorial by Chris Pine for programming newbies.
If you don’t know how to program, start here.

   Learn Ruby the Hard Way (http://ruby.learncodethehardway.org/)


File: Ruby2_5.info,  Node: Manuals,  Next: Editors and IDEs,  Prev: Getting Started,  Up: Documentation

2.4 Manuals
===========

* Menu:

* Ruby User's Guide::
* Ruby Programming Wikibook::
* Programming Ruby::


File: Ruby2_5.info,  Node: Ruby User's Guide,  Next: Ruby Programming Wikibook,  Up: Manuals

2.4.1 Ruby User's Guide
-----------------------

Translated from the original Japanese version written by Yukihiro
Matsumoto (the creator of Ruby), this version, by Goto Kentaro and
Mark Slagell, is a nice overview of many aspects of the Ruby language.

   Ruby User's Guide (http://www.rubyist.net/~slagell/ruby/)

* Menu:

* Ruby User's Guide On What Ruby IS::
* Ruby User's Guide On Simple Examples::
* Ruby User's Guide on Strings::
* Ruby User's Guide On Puzzle Program::
* Ruby User's Guide on Regular Expressions::
* Ruby User's Guide On Arrays And Hashes::
* Ruby User's Guide On Control Structures::
* Ruby User's Guide On Iterators::
* Ruby User's Guide On Object-Oriented Thinking::
* Ruby User's Guide on Methods::
* Ruby User's Guide on Classes::
* Ruby User's Guide on Inheritance::
* Ruby User's Guide on Redefinition Of Methods::
* Ruby User's Guide On Access Control::
* Ruby User's Guide On Singleton Methods::
* Ruby User's Guide On Modules::
* Ruby User's Guide On Procedure Objects::
* Ruby User's Guide On Variables::
* Ruby User's Guide On Global Variables::
* Ruby User's Guide On Instance Variables::
* Ruby User's Guide On Local Variables::
* Ruby User's Guide On Class Constants::
* Ruby User's Guide On Exception Processing And rescue::
* Ruby User's Guide On Exception Processing and ensure::
* Ruby User's Guide On Accessors::
* Ruby User's Guide On Object Initialization::
* Ruby User's Guide On Nuts And Bolts::


File: Ruby2_5.info,  Node: Ruby User's Guide On What Ruby IS,  Next: Ruby User's Guide On Simple Examples,  Up: Ruby User's Guide

2.4.1.1 On What Ruby Is
.......................

Ruby is "an interpreted scripting language for quick and easy
object-oriented programming" -- what does this mean?

interpreted scripting language:
        * ability to make operating system calls directly
        * powerful string operations and regular expressions
        * immediate feedback during development

quick and easy:
        * variable declarations are unnecessary
        * variables are not typed
        * syntax is simple and consistent
        * memory management is automatic

object oriented programming:
        * everything is an object
        * classes, methods, inheritance, etc.
        * singleton methods
        * "mixin" functionality by module
        * iterators and closures

also:
        * multiple precision integers
        * convenient exception processing
        * dynamic loading
        * threading support


File: Ruby2_5.info,  Node: Ruby User's Guide On Simple Examples,  Next: Ruby User's Guide on Strings,  Prev: Ruby User's Guide On What Ruby IS,  Up: Ruby User's Guide

2.4.1.2 On Simple Examples
..........................

Factorial in Ruby
-----------------

Let's write a function to compute factorials.  The mathematical
definition of "n factorial" is:

     n! = 1                (when n==0)
        = n * (n-1)!       (otherwise)

   In ruby, this can be written as:

{'fact.rb'} ==
     # Program to find the factorial of a number
     # Save this as fact.rb

     def fact(n)
       if n == 0
         1
       else
         n * fact(n-1)
       end
     end

     puts fact(ARGV[0].to_i)


Command Line Arguments -- In Array ARGV
.......................................

'ARGV' is an array which contains the command line arguments, and
'to_i' converts a character string to an integer.(1)

The 'end' Statement
...................

You may notice the repeated occurrence of 'end'.  Ruby has been called
"Algol-like" because of this.  (Actually, the syntax of ruby more
closely mimics that of a language named Eiffel
(https://www.eiffel.org/).)

Takeaway -- 'return' Statement Optional
.......................................

You may also notice the lack of a 'return' statement.

     [A 'return' statement] is unneeded because *a ruby function
     returns the last thing that was evaluated in it*.  Use of a
     'return' statement here is permissible but unnecessary.

Running 'fact.rb'
.................

Ruby can deal with any integer which is allowed by your machine's
memory.  So 400!  can be calculated:

     % ruby fact.rb 1
     1
     % ruby fact.rb 5
     120

     % ruby fact.rb 40
     815915283247897734345611269596115894272000000000

     % ruby fact.rb 400
     64034522846623895262347970319503005850702583026002959458684
     44594280239716918683143627847864746326467629435057503585681
     08482981628835174352289619886468029979373416541508381624264
     61942352307046244325015114448670890662773914918117331955996
     44070954967134529047702032243491121079759328079510154537266
     72516278778900093497637657103263503315339653498683868313393
     52024373788157786791506311858702618270169819740062983025308
     59129834616227230455833952075961150530223608681043329725519
     48526744322324386699484224042325998055516106359423769613992
     31917134063858996537970147827206606320217379472010321356624
     61380907794230459736069956759583609615871512991382228657857
     95493616176544804532220078258184008484364155912294542753848
     03558374518022675900061399560145595206127211192918105032491
     00800000000000000000000000000000000000000000000000000000000
     0000000000000000000000000000000000000000000

The Input/Evaluation Loop
-------------------------

When you invoke ruby with no arguments, it reads commands from
standard input and executes them after the end of input:

     % ruby
     puts "hello world"
     puts "good-bye world"
     ^D
     hello world
     good-bye world

Ruby Evaluation Program -- 'eval.rb'
....................................

Ruby also comes with a program called 'eval.rb' (*note Ruby Eval
Utility::) that allows you to enter ruby code from the keyboard in an
interactive loop, showing you the results as you go.  It will be used
extensively through the rest of this guide.  You should use this
enhanced 'eval.rb' (http://www.rubyist.net/~slagell/ruby/eval.txt)
that adds visual indenting assistance, warning reports, and color
highlighting.

   Here is a short 'eval.rb' session:

     % ruby eval.rb
     ruby> puts "Hello, world."
     Hello, world.
        nil
     ruby> exit

   'hello world' is produced by 'puts'.  The next line, in this case
'nil', reports on whatever was last evaluated;

No Distinction Between Statement and Expression
...............................................

     Ruby does not distinguish between statements and expressions, so
     evaluating a piece of code basically means the same thing as
     executing it.

   Here, 'nil' indicates that 'puts' does not return a meaningful
value.  Note that we can leave this interpreter loop by saying 'exit',
although <C-D> still works too.

   ---------- Footnotes ----------

   (1) Ruby does not convert strings into integers automatically like
perl does.


File: Ruby2_5.info,  Node: Ruby User's Guide on Strings,  Next: Ruby User's Guide On Puzzle Program,  Prev: Ruby User's Guide On Simple Examples,  Up: Ruby User's Guide

2.4.1.3 On Strings
..................

Quoting Strings
---------------

A string may be double-quoted ('"..."') or single-quoted (''...'').

   Double- and single-quoting have different effects in some cases.  A
double-quoted string allows character escapes by a leading backslash,
and the evaluation of embedded expressions using '#{}'.  A
single-quoted string does not do this interpreting; what you see is
what you get.

String Methods
--------------

You can concatenate strings with '+', and repeat a string many times
with '*'.

   Here are some things you can do with strings.

Concatenation
     'word = "fo" + "o"' => '"foo"'
Repetition
     'word = word * 2' => '"foofoo"'
Extracting characters
     (note that characters are integers in ruby)
     'word[0]' => '102' '# 102 is ASCII code of `f''
     'word[-1]' => '111' '# 111 is ASCII code of `o''
Extracting substrings
          ruby> herb = "parsley"
             "parsley"
          ruby> herb[0,1]
             "p"
          ruby> herb[-2,2]
             "ey"
          ruby> herb[0..3]
             "pars"
          ruby> herb[-5..-2]
             "rsle"
Testing for equality:
     '"foo" == "foo"' => 'true'
     '"foo" == "bar"' => 'false'


File: Ruby2_5.info,  Node: Ruby User's Guide On Puzzle Program,  Next: Ruby User's Guide on Regular Expressions,  Prev: Ruby User's Guide on Strings,  Up: Ruby User's Guide

2.4.1.4 On Puzzle Program
.........................

{'guess.rb'} ==
     # save this as guess.rb
     words = ['foobar', 'baz', 'quux']
     secret = words[rand(3)]

     print "guess? "
     while guess = STDIN.gets
       guess.chop!
       if guess == secret
         puts "You win!"
         break
       else
         puts "Sorry, you lose."
       end
       print "guess? "
     end
     puts "The word was ", secret, "."

New Control Structure 'while'
-----------------------------

In this program, a new control structure, 'while', is used.  The code
between 'while' and its corresponding 'end' will execute repeatedly as
long as some specified condition remains true.  In this case,
'guess=STDIN.gets' is both an active statement (collecting a line of
user input and storing it as guess), and a condition (if there is no
input, guess, which repesents the value of the whole
'guess=STDIN.gets' expression, has a 'nil' value, causing while to
stop looping).

Standard Input Object -- STDIN
------------------------------

STDIN is the standard input object.  Usually, 'guess=gets' does the
same thing as 'guess=STDIN.gets'.  In line 5 we read one line from
standard input by the method STDIN.'gets'.  If EOF (end of file)
occurs while getting the line, 'gets' returns 'nil'.  So the code
associated with this 'while' will repeat until it sees <^D> signifying
the end of input.

'guess.chop!'
-------------

'guess.chop!' in line 6 deletes the last character from 'guess'; in
this case it will always be a 'newline' character, 'gets' includes
that character to reflect the user's <return> keystroke, but we're not
interested in it.

Printing Variables
------------------

In line 15 we print the secret word.  We have written this as a 'puts'
('put s'tring) statement with two arguments, which are printed one
after the other; but it would have been equally effective to do it
with a single argument, writing secret as '#{secret}' to make it clear
that it is a variable to be evaluated, not a literal word to be
printed:

     puts "the word is #{secret}."

   It builds a single string and presents it as a single argument to
'puts'.

'print' vs 'puts'
-----------------

Also, we are by now used to the idea of using 'puts' for standard
script output, but this script uses 'print' instead, in lines 4 and
13.  They are not quite the same thing.  'print' outputs exactly what
it is given; 'puts' also ensures that the output line ends.  Using
'print' in lines 4 and 13 leaves the cursor next to what was just
printed, rather than moving it to the beginning of the next line.
This creates a recognizable prompt for user input.  In general, the
four output calls below are equivalent:

Flushing Standard Output
------------------------

Sometimes a text window is programmed to _buffer_ output for the sake
of speed, collecting individual characters and displaying them only
when it is given a <newline> character.  So if the guessing game
script misbehaves by not showing the prompt lines until after the user
supplies a guess, _buffering_ is the likely culprit.  To make sure
this doesn't happen, you can "flush" the output as soon as you have
printed the prompt.  It tells the standard output device (an object
named STDOUT), "don't wait; display what you have in your buffer right
now."  '04 print "guess? "; STDOUT.flush'.


File: Ruby2_5.info,  Node: Ruby User's Guide on Regular Expressions,  Next: Ruby User's Guide On Arrays And Hashes,  Prev: Ruby User's Guide On Puzzle Program,  Up: Ruby User's Guide

2.4.1.5 Regular Expressions
...........................

     ruby> def chab(s)   # "contains hex in angle brackets"
         |    (s =~ /<0(x|X)(\d|[a-f]|[A-F])+>/) != nil
         | end
       nil
     ruby> chab "Not this one."
       false
     ruby> chab "Maybe this? {0x35}"    # wrong kind of brackets
       false
     ruby> chab "Or this? <0x38z7e>"    # bogus hex digit
       false
     ruby> chab "Okay, this: <0xfc0004>."
       true

Program To Help Experiment With Regular Expressions
---------------------------------------------------

Here is a little program to help you experiment with regular
expressions.  Store it as 'regx.rb' and run it by typing 'ruby
regx.rb' at the command line.

   The program requires input twice, once for a string and once for a
regular expression.  The string is tested against the regular
expression, then displayed with all the matching parts highlighted in
reverse video.

{'regx.rb'} ==
     # Requires an ANSI terminal!

     st = "\033[7m"
     en = "\033[m"

     puts "Enter an empty string at any time to exit."

     while true
       print "str> "; STDOUT.flush; str = gets.chop
       break if str.empty?
       print "pat> "; STDOUT.flush; pat = gets.chop
       break if pat.empty?
       re = Regexp.new(pat)
       puts str.gsub(re,"#{st}\\&#{en}")
     end

Explication of 'regx.rb'
------------------------

The 'break' Statement
.....................

In line 6, the condition for 'while' is hardwired to 'true', so it
forms what looks like an infinite loop.  However we put 'break'
statements in the 8th and 10th lines to escape the loop.

'if' Modifiers
..............

     break if str.empty?
     break if pat.empty?

   These two 'break's are also an example of "if modifiers".  An 'if'
modifier executes the statement on its left hand side if and only if
the specified condition is satisfied.  This construction is unusual in
that it operates logically from right to left, but it is provided
because for many people it mimics a similar pattern in natural speech.
It also has the advantage of brevity, as it needs no 'end' statement
to tell the interpreter how much of the following code is supposed to
be conditional.  An 'if' modifier is conventionally used in situations
where a statement and condition are short enough to fit comfortably
together on one script line.

   Note the difference in the user interface compared to the
string-guessing script.  This one lets the user quit by hitting the
<Return> key on an empty line.  We are testing for emptiness of the
input string, not for its nonexistence.

Nondestructive 'chops' vs Destructive 'chops!'
..............................................

In lines 7 and 9 we have a "non-destructive" 'chop'; again, we're
getting rid of the unwanted newline character we always get from
'gets'.  Add the exclamation point, and we have a "destructive" chop.
What's the difference?  In ruby, we conventionally attach '!' or '?'
to the end of certain method names.  The exclamation point ('!',
sometimes pronounced aloud as "bang!")  indicates something
potentially destructive, that is to say, something that can change the
value of what it touches.  'chop!' affects a string directly, but
'chop' gives you a chopped copy without damaging the original.

'chomp' And 'chomp!'
....................

You'll also sometimes see 'chomp' and 'chomp'!  used.  These are more
selective: the end of a string gets bit off only if it happens to be a
newline.  So for example, '"XYZ".chomp!' does nothing.  If you need a
trick to remember the difference, think of a person or animal tasting
something before deciding to take a bite, as opposed to an axe
chopping indiscriminately.

Predicate Method Naming Convention
..................................

The other method naming convention appears in lines 8 and 10.  A
question mark ('?', sometimes pronounced aloud as "huh?")  indicates a
"predicate" method, one that can return either true or false.

Regular Expressions At Work
...........................

Line 11 creates a regular expression object out of the string supplied
by the user.  The real work is finally done in line 12, which uses
'gsub' to globally substitute each match of that expression with
itself, but surrounded by ansi markups; also the same line outputs the
results.

   In line 12 we see '\\&'.  This is a little tricky.  Since the
replacement string is in double quotes, the pair of backslashes will
be interpreted as a single backslash; what 'gsub' actually sees will
be '\&', and that happens to be a special code that refers to whatever
matched the pattern in the first place.  So the new string, when
displayed, looks just like the old one, except that the parts that
matched the given pattern are highlighted in inverse video.

The '=~' Matching Operator
--------------------------

'=~' is a matching operator with respect to regular expressions; it
returns the position in a string where a match was found, or 'nil' if
the pattern did not match.

     ruby> "abcdef" =~ /d/
        3
     ruby> "aaaaaa" =~ /d/
        nil


File: Ruby2_5.info,  Node: Ruby User's Guide On Arrays And Hashes,  Next: Ruby User's Guide On Control Structures,  Prev: Ruby User's Guide on Regular Expressions,  Up: Ruby User's Guide

2.4.1.6 On Arrays And Hashes
............................

Creating An Array
-----------------

You can create an array by listing some items within square brackets
('[]') and separating them with commas.  Ruby's arrays can accomodate
diverse object types.  'ary = [1, 2, "3"]' => '[1, 2, "3"]'

Concatenating and Repeating Arrays
----------------------------------

Arrays can be concatenated or repeated just as strings can.  'ary +
["foo", "bar"]' => '[1, 2, "3", "foo", "bar"]'; 'ary * 2' => '[1, 2,
"3", 1, 2, "3"]'.

Referring To Elements of Arrays
-------------------------------

We can use index numbers to refer to any part of a array.  'ary[0]' =>
'1'; 'ary[0,2]' => '[1, 2]'; 'ary[0..1]' => '[1, 2]'.

Converted To And From Strings
-----------------------------

Arrays can be converted to and from strings, using 'join' and 'split'
respecitvely.  'str = ary.join(":")' => '"1:2:3"'.  'str.split(":")'
=> '["1", "2", "3"]'.

Hashes
------

An "associative array" has elements that are accessed not by
sequential index numbers, but by keys which can have any sort of
value.  Such an array is sometimes called a "hash" or "dictionary"; in
the ruby world, we prefer the term hash.  A hash can be constructed by
quoting pairs of items within curly braces ('{}').  You use a key to
find something in a hash, much as you use an index to find something
in an array.

     ruby> h = {1 => 2, "2" => "4"}
        {1=>2, "2"=>"4"}
     ruby> h[1]
        2
     ruby> h["2"]
        "4"
     ruby> h[5]
        nil
     ruby> h[5] = 10    # appending an entry
        10
     ruby> h
        {5=>10, 1=>2, "2"=>"4"}
     ruby> h.delete 1   # deleting an entry by key
        2
     ruby> h[1]
        nil
     ruby> h
        {5=>10, "2"=>"4"}


File: Ruby2_5.info,  Node: Ruby User's Guide On Control Structures,  Next: Ruby User's Guide On Iterators,  Prev: Ruby User's Guide On Arrays And Hashes,  Up: Ruby User's Guide

2.4.1.7 On Control Structures
.............................

The 'case' Statement
--------------------

We use the 'case' statement to test a sequence of conditions.  This is
superficially similar to 'switch' in C and Java but is considerably
more powerful, as we shall see.

     ruby> i=8
     ruby> case i
         | when 1, 2..5
         |   puts "1..5"
         | when 6..10
         |   puts "6..10"
         | end
     6..10
        nil

Testing For A Range Of Values
.............................

'2..5' is an expression which means the _range_ between 2 and 5,
inclusive.  The following expression tests whether the value of 'i'
falls within that range: '(2..5) === i'.

The Relationship Operator
.........................

'case' internally uses the _relationship_ operator '===' to check for
several conditions at a time.  In keeping with ruby's object oriented
nature, '===' is interpreted suitably for the object that appeared in
the 'when' condition.

   For example, the following code tests string equality in the first
'when', and regular expression matching in the second 'when'.

     ruby> case 'abcdef'
         | when 'aaa', 'bbb'
         |   puts "aaa or bbb"
         | when /def/
         |   puts "includes /def/"
         | end
     includes /def/
        nil

The 'while' Statement
---------------------

Ruby provides convenient ways to construct loops, although you will
find in the next chapter that learning how to use iterators will make
it unnecessary to write explicit loops very often.

   A 'while' is a repeated 'if'.  We used it in our word-guessing
puzzle and in the regular expression programs (see the previous
chapter); there, it took the form 'while condition ... end'
surrounding a block of code to be repeated while condition was true.
But 'while' and 'if' can as easily be applied to individual
statements: 'puts "It's zero." if i==0' => 'It's zero.' and 'puts i+=1
while i<3' => '1 2 3'.

Negated Conditions
..................

Sometimes you want to negate a test condition.  An 'unless' is a
negated 'if', and an 'until' is a negated 'while'.

Interrupting A Loop
-------------------

There are four ways to interrupt the progress of a loop from inside.

  1. First, 'break' means, as in C, to escape from the loop entirely.
  2. Second, 'next' skips to the beginning of the next iteration of
     the loop (corresponding to C's continue).
  3. Third, ruby has 'redo', which restarts the current iteration.
  4. The fourth way to get out of a loop from the inside is 'return'.
     An evaluation of 'return' causes escape not only from a loop but
     from the method that contains the loop.  If an argument is given,
     it will be returned from the method call, otherwise 'nil' is
     returned.

   The following is C code illustrating the meanings of 'break',
'next', and 'redo':

     while (condition) {
     label_redo:
        goto label_next;        /* ruby's "next" */
        goto label_break;       /* ruby's "break" */
        goto label_redo;        /* ruby's "redo" */
        ...
        ...
     label_next:
     }
     label_break:
     ...

The 'for' Statement
-------------------

C programmers will be wondering by now how to make a 'for' loop.
Ruby's 'for' can serve the same purpose, but adds some flexibility.
The loop below runs once for each element in a collection (array,
hash, numeric sequence, etc.), but doesn't make the programmer think
about indices:

     for elt in collection
       # ... here, elt refers to an element of the collection
     end

   The collection can be a range of values (this is what most people
mean when they talk about a 'for' loop):

     ruby> for num in (4..6)
         |    puts num
         | end
     4
     5
     6
        4..6

'for' Equivalent To 'each'
..........................

But we're getting ahead of ourselves.  'for' is really another way of
writing 'each', which, it so happens, is our first example of an
iterator.  The following two forms are equivalent:

     #  If you're used to C or Java, you might prefer this.
     for element in collection
       ...
     end

     #  A Smalltalk programmer might prefer this.
     collection.each {|element|
       ...
     }

   Iterators can often be substituted for conventional loops, and once
you get used to them, they are generally easier to deal with.


File: Ruby2_5.info,  Node: Ruby User's Guide On Iterators,  Next: Ruby User's Guide On Object-Oriented Thinking,  Prev: Ruby User's Guide On Control Structures,  Up: Ruby User's Guide

2.4.1.8 Ruby User's Guide On Iterators
......................................

Iterators are not an original concept with ruby.  They are in common
use in object-oriented languages.  They are also used in Lisp, though
there they are not called iterators.  However the concept of iterator
is an unfamiliar one for many so it should be explained in more
detail.

   An "iterator" is something that does the same thing many times.

Ruby Allows Us To Define Iterators
----------------------------------

So every OOP language includes some facilities for iteration.  Some
languages provide a special class for this purpose; ruby allows us to
define iterators directly.

Iterators In String
...................

Ruby's String type has some useful iterators:

   'each_byte' is an iterator for each character in the string.  Each
character is substituted into the local variable c:
'"abc".each_byte{|c| printf "<%c>", c}; print "\n"'.

   The 'each_byte' iterator is both conceptually simpler and more
likely to continue to work even if the String class happens to be
radically modified in the future.  One benefit of iterators is that
they tend to be robust in the face of such changes; indeed that is a
characteristic of good code in general.

   Another iterator of String is 'each_line':
'"a\nb\nc\n".each_line{|l| print l}'.

   The tasks that would take most of the programming effort in C
(finding line delimiters, generating substrings, etc.)  are easily
tackled using iterators.

   The 'for' statement appearing in the previous chapter does
iteration by way of an 'each' iterator.  String's 'each' works the
same as 'each_line', so let's rewrite the above example with 'for':

     ruby> for l in "a\nb\nc\n"
         |   print l
         | end
     a
     b
     c
        nil

Control Structures 'retry' And 'redo'
-------------------------------------

We can use a control structure 'retry' in conjunction with an iterated
loop, and it will retry the loop from the beginning.  'redo' causes
just the current iteration of the loop to be redone.

'yield' In Iterators
--------------------

'yield' occurs sometimes in a definition of an iterator.  "'yield'"
moves control to the block of code that is passed to the iterator
(this will be explored in more detail in the chapter about procedure
objects).

   The following example defines an iterator 'repeat', which repeats a
block of code the number of times specified in an argument.

     ruby> def repeat(num)
         |   while num > 0
         |     yield
         |     num -= 1
         |   end
         | end
        nil
     ruby> repeat(3) { puts "foo" }
     foo
     foo
     foo
        nil

   With 'retry', one can define an iterator which works something like
ruby's standard 'while'.

     ruby> def WHILE(cond)
         |   return if not cond
         |   yield
         |   retry
         | end
        nil
     ruby> i=0; WHILE(i<3) { print i; i+=1 }
     012   nil

Summary On Iterarors
--------------------

There are a few restrictions, but you can write your original
iterators; and in fact, whenever you define a new data type, it is
often convenient to define suitable iterators to go with it.  In this
sense, the above examples are not terribly useful.  We can talk about
practical iterators after we have a better understanding of what
classes are.


File: Ruby2_5.info,  Node: Ruby User's Guide On Object-Oriented Thinking,  Next: Ruby User's Guide on Methods,  Prev: Ruby User's Guide On Iterators,  Up: Ruby User's Guide

2.4.1.9 On Object-Oriented Thinking
...................................

Ruby claims to be an object oriented scripting language; but what
exactly does "object oriented" mean?  Rather than sum it too quickly,
let's think for a moment about the traditional programming paradigm.

   Traditionally, a programming problem is attacked by coming up with
some kinds of _data representations_, and _procedures_ that operate on
that data.  Under this model, data is inert, passive, and helpless; it
sits at the complete mercy of a large procedural body, which is
active, logical, and all-powerful.

   The problem with this approach is that programs are written by
programmers, who are only human and can only keep so much detail clear
in their heads at any one time.  As a project gets larger, its
procedural core grows to the point where it is difficult to remember
how the whole thing works.  Minor lapses of thinking and typographical
errors become more likely to result in well-concealed bugs.  Complex
and unintended interactions begin to emerge within the procedural
core, and maintaining it becomes like trying to carry around an angry
squid without letting any tentacles touch your face.  There are
guidelines for programming that can help to minimize and localize bugs
within this traditional paradigm, but there is a better solution that
involves fundamentally changing the way we work.

   What object-oriented programming does is to let us delegate most of
the mundane and repetitive logical work to the data itself; it changes
our concept of data from passive to active.  Put another way,

   * We stop treating each piece of data as a box with an open lid
     that lets us reach in and throw things around.
   * We start treating each piece of data as a working machine with a
     closed lid and a few well-marked switches and dials.

   What is described above as a "machine" may be very simple or
complex on the inside; we can't tell from the outside, and we don't
allow ourselves to open the machine up (except when we are absolutely
sure something is wrong with its design), so we are required to do
things like flip the switches and read the dials to interact with the
data.  Once the machine is built, we don't want to have to think about
how it operates.

   You might think we are just making more work for ourselves, but
this approach tends to do a nice job of preventing all kinds of things
from going wrong.

   It's worth noting here that the use of an OO language will not
enforce proper OO design.  Indeed it is possible in any language to
write code that is unclear, sloppy, ill-conceived, buggy, and wobbly
all over.  What ruby does for you (as opposed, especially, to C++) is
to make the practice of OO programming feel natural enough that even
when you are working on a small scale you don't feel a necessity to
resort to ugly code to save effort.  We will be discussing the ways in
which ruby accomplishes that admirable goal as this guide progresses;
the next topic will be the "switches and dials" (object methods) and
from there we'll move on to the "factories" (classes).


File: Ruby2_5.info,  Node: Ruby User's Guide on Methods,  Next: Ruby User's Guide on Classes,  Prev: Ruby User's Guide On Object-Oriented Thinking,  Up: Ruby User's Guide

2.4.1.10 On Methods
...................

What Is A Method?
-----------------

What is a "method"?  In OO programming, we don't think of operating on
data directly from outside an object; rather, objects have some
understanding of how to operate on themselves (when asked nicely to do
so).  You might say we pass messages to an object, and those messages
will generally elicit some kind of an action or meaningful reply.
This ought to happen without our necessarily knowing or caring how the
object really works inside.  The tasks we are allowed to ask an object
to perform (or equivalently, the messages it understands) are that
object's methods.

Invoking Methods Of An Object
-----------------------------

In ruby, we invoke a method of an object with dot notation (just as in
C++ or Java).  The object being talked to is named to the left of the
dot.  '"abcdef".length'.  Intuitively, this string object is being
asked how long it is.  Technically, we are invoking the 'length'
method of the object 'abcdef'.

   Other objects may have a slightly different interpretation of
length, or none at all.  Decisions about how to respond to a message
are made on the fly, during program execution, and the action taken
may change depending on what a variable refers to.  What we mean by
length can vary depending on what object we are talking about.

Polymorphism
------------

An array knows something about what it means to be an array.  Pieces
of data in ruby carry such knowledge with them, so that the demands
made on them can automatically be satisfied in the various appropriate
ways.  This relieves the programmer from the burden of memorizing a
great many specific function names, because a relatively small number
of method names, corresponding to concepts that we know how to express
in natural language, can be applied to different kinds of data and the
results will be what we expect.  This feature of OO programming
languages (which, IMHO, Java has done a poor job of exploiting) is
called "polymorphism".

Errors Are Raised
-----------------

When an object receives a message that it does not understand, an
error is "raised": 'ERR: (eval):1: undefined method `length' for
5(Fixnum)'.  So it is necessary to know what methods are acceptable to
an object, though we need not know how the methods are processed.

Arguments To A Method
---------------------

If arguments are given to a method, they are generally surrounded by
parentheses, 'object.method(arg1, arg2)', but they can be omitted if
doing so does not cause ambiguity, 'object.method arg1, arg2'.

The Special Variable 'self'
---------------------------

There is a special variable self in ruby; it refers to whatever object
calls a method.  This happens so often that for convenience the
'self.' may be omitted from method calls from an object to itself:
'self.method_name(args...)' is the same as 'method_name(args...)'.

   What we would think of traditionally as a function call is just
this abbreviated way of writing method invocations by self.  This
makes ruby what is called a pure object oriented language.


File: Ruby2_5.info,  Node: Ruby User's Guide on Classes,  Next: Ruby User's Guide on Inheritance,  Prev: Ruby User's Guide on Methods,  Up: Ruby User's Guide

2.4.1.11 On Classes
...................

In OO programming terminology, a category of objects like "dog" is
called a class, and some specific object belonging to a class is
called an instance of that class.

Making An Object From A Class
-----------------------------

Generally, to make an object in ruby or any other OO language, first
one defines the characteristics of a class, then creates an instance.
To illustrate the process, let's first define a simple 'Dog' class.

     ruby> class Dog
         |   def speak
         |     puts "Bow Wow"
         |   end
         | end
        nil

   In ruby, a "class definition" is a region of code between the
keywords 'class' and 'end'.  A 'def' inside this region begins the
definition of a method of the class, which as we discussed in the
previous chapter, corresponds to some specific behavior for objects of
that class.

Make A New Instance From A Class Definition
-------------------------------------------

Now that we have defined a 'Dog' class, we can use it to make a dog:

     ruby> pochi = Dog.new
        #<Dog:0xbcb90>

   We have made a new instance of the class 'Dog', and have given it
the name 'pochi'.  The 'new' method of any class makes a new instance.
Because 'pochi' is a 'Dog' according to our class definition, it has
whatever properties we decided a 'Dog' should have.  Since our idea of
'Dog'-ness was very simple, there is just one trick we can ask 'pochi'
to do.

     ruby> pochi.speak
     Bow Wow
        nil

   Making a new instance of a class is sometimes called
"instantiating" that class.  We need to have a dog before we can
experience the pleasure of its conversation; we can't merely ask the
'Dog' class to bark for us.


File: Ruby2_5.info,  Node: Ruby User's Guide on Inheritance,  Next: Ruby User's Guide on Redefinition Of Methods,  Prev: Ruby User's Guide on Classes,  Up: Ruby User's Guide

2.4.1.12 On Inheritance
.......................

Our classification of objects in everyday life is naturally
hierarchical.  We know that all cats are mammals, and all mammals are
animals.  Smaller classes "inherit" characteristics from the larger
classes to which they belong.  If all mammals breathe, then all cats
breathe.

   We can express this concept in ruby:

     ruby> class Mammal
         |   def breathe
         |     puts "inhale and exhale"
         |   end
         | end
        nil
     ruby> class Cat<Mammal
         |   def speak
         |     puts "Meow"
         |   end
         | end
        nil

   Though we didn't specify how a 'Cat' should breathe, every cat will
inherit that behavior from the 'Mammal' class since 'Cat' was defined
as a subclass of 'Mammal'.  (In OO terminology, the smaller class is a
"subclass" and the larger class is a "superclass".)  Hence from a
programmer's standpoint, cats get the ability to breathe for free;
after we add a 'speak' method, our cats can both breathe and speak.

     ruby> tama = Cat.new
        #<Cat:0xbd80e8>
     ruby> tama.breathe
     inhale and exhale
        nil
     ruby> tama.speak
     Meow
        nil

Differential Programming
------------------------

There will be situations where certain properties of the superclass
should not be inherited by a particular subclass.  Though birds
generally know how to fly, penguins are a flightless subclass of
birds.

     ruby> class Bird
         |   def preen
         |     puts "I am cleaning my feathers."
         |   end
         |   def fly
         |     puts "I am flying."
         |   end
         | end
        nil
     ruby> class Penguin<Bird
         |   def fly
         |     fail "Sorry. I'd rather swim."
         |   end
         | end
        nil

   Rather than exhaustively define every characteristic of every new
class, we need only to append or to redefine the differences between
each subclass and its superclass.  This use of inheritance is
sometimes called "differential programming".  It is one of the
benefits of object-oriented programming.


File: Ruby2_5.info,  Node: Ruby User's Guide on Redefinition Of Methods,  Next: Ruby User's Guide On Access Control,  Prev: Ruby User's Guide on Inheritance,  Up: Ruby User's Guide

2.4.1.13 On Redefinition of Methods
...................................

In a subclass, we can change the behavior of the instances by
redefining superclass methods.

     ruby> class Human
         |   def identify
         |     puts "I'm a person."
         |   end
         |   def train_toll(age)
         |     if age < 12
         |       puts "Reduced fare.";
         |     else
         |       puts "Normal fare.";
         |     end
         |   end
         | end
        nil
     ruby> Human.new.identify
     I'm a person.
        nil
     ruby> class Student1<Human
         |   def identify
         |     puts "I'm a student."
         |   end
         | end
        nil
     ruby> Student1.new.identify
     I'm a student.
        nil

   Suppose we would rather enhance the superclass's 'identify' method
than entirely replace it.  For this we can use 'super'.

     ruby> class Student2<Human
         |   def identify
         |     super
         |     puts "I'm a student too."
         |   end
         | end
        nil
     ruby> Student2.new.identify
     I'm a person.
     I'm a student too.
        nil

   'super' lets us pass arguments to the original method.  It is
sometimes said that there are two kinds of people ...

     ruby> class Dishonest<Human
         |   def train_toll(age)
         |     super(11) # we want a cheap fare.
         |   end
         | end
        nil
     ruby> Dishonest.new.train_toll(25)
     Reduced fare.
        nil

     ruby> class Honest<Human
         |   def train_toll(age)
         |     super(age) # pass the argument we were given
         |   end
         | end
        nil
     ruby> Honest.new.train_toll(25)
     Normal fare.
        nil


File: Ruby2_5.info,  Node: Ruby User's Guide On Access Control,  Next: Ruby User's Guide On Singleton Methods,  Prev: Ruby User's Guide on Redefinition Of Methods,  Up: Ruby User's Guide

2.4.1.14 On Access Control
..........................

Earlier, we said that ruby has no functions, only methods.  However
there is more than one kind of method.  In this chapter we introduce
"access controls".

   Consider what happens when we define a method in the "top level",
not inside a class definition.  We can think of such a method as
analogous to a function in a more traditional language like C.

     ruby> def square(n)
         |   n * n
         | end
        nil
     ruby> square(5)
        25

   Our new method would appear not to belong to any class, but in fact
ruby gives it to the 'Object' class, which is a superclass of every
other class.  As a result, any object should now be able to use that
method.  That turns out to be true, but there's a small catch: it is a
_private_ method of every class.  We'll discuss some of what this
means below, but one consequence is that it may be invoked only in
function style, as here:

     ruby> class Foo
         |   def fourth_power_of(x)
         |     square(x) * square(x)
         |   end
         | end
       nil
     ruby> Foo.new.fourth_power_of 10
       10000

   We are not allowed to explicitly apply the method to an object:

     ruby> "fish".square(5)
     ERR: (eval):1: private method `square' called for "fish":String

   This rather cleverly preserves ruby's pure-OO nature (functions are
still object methods, but the receiver is self implicitly) while
providing functions that can be written just as in a more traditional
language.

Rationale For Private Methods: Encapsulation
--------------------------------------------

A common mental discipline in OO programming, which we have hinted at
in an earlier chapter, concerns the separation of specification and
implementation, or what tasks an object is supposed to accomplish and
how it actually accomplishes them.  The internal workings of an object
should be kept generally hidden from its users; they should only care
about what goes in and what comes out, and trust the object to know
what it is doing internally.  As such it is often helpful for classes
to have methods that the outside world does not see, but which are
used internally (and can be improved by the programmer whenever
desired, without changing the way users see objects of that class).
In the trivial example below, think of engine as the invisible inner
workings of the class.

     ruby> class Test
         |   def times_two(a)
         |     puts "#{a} times two is #{engine(a)}"
         |   end
         |   def engine(b)
         |     b*2
         |   end
         |   private:engine  # this hides engine from users
         | end
        Test
     ruby> test = Test.new
        #<Test:0x4017181c>
     ruby> test.engine(6)
     ERR: (eval):1: private method `engine' called for #<Test:0x4017181c>
     ruby> test.times_two(6)
     6 times two is 12.
        nil

   We might have expected 'test.engine(6)' to return 12, but instead
we learn that 'engine' is inaccessible when we are acting as a user of
a 'Test' object.  Only other 'Test' methods, such as 'times_two', are
allowed to use engine.  We are required to go through the public
interface, which consists of the 'times_two' method.  The programmer
who is in charge of this class can change 'engine' freely (here,
perhaps by changing 'b*2' to 'b+b', assuming for the sake of argument
that it improved performance) without affecting how the user interacts
with 'Test' objects.  This example is of course much too simple to be
useful; the benefits of access controls become more clear only when we
begin to create more complicated and interesting classes.


File: Ruby2_5.info,  Node: Ruby User's Guide On Singleton Methods,  Next: Ruby User's Guide On Modules,  Prev: Ruby User's Guide On Access Control,  Up: Ruby User's Guide

2.4.1.15 On Singleton Methods
.............................

The behavior of an instance is determined by its class, but there may
be times we know that a particular instance should have special
behavior.  In most languages, we must go to the trouble of defining
another class, which would then only be instantiated once.  In ruby we
can give any object its own methods.  A method given only to a single
object is called a "singleton method".

   Singleton methods are often used for elements of a graphic user
interface (GUI), where different actions need to be taken when
different buttons are pressed.

   Singleton methods are not unique to ruby, as they appear in CLOS,
Dylan, etc.  Also, some languages, for example, Self and NewtonScript,
have singleton methods only.  These are sometimes called
"prototype-based" languages.


File: Ruby2_5.info,  Node: Ruby User's Guide On Modules,  Next: Ruby User's Guide On Procedure Objects,  Prev: Ruby User's Guide On Singleton Methods,  Up: Ruby User's Guide

2.4.1.16 On Modules
...................

Modules in ruby are similar to classes, except:

   * A module can have no instances.
   * A module can have no subclasses.
   * A module is defined by 'module ... end'.

   Actually...  the 'Module' class of 'module' is the superclass of
the 'Class' class of 'class'.  Got that?  No?  Let's move on.

Module As Collection
--------------------

There are two typical uses of modules.  One is to collect related
methods and constants in a central location.  The 'Math' module in
ruby's standard library plays such a role:

     ruby> Math.sqrt(2)
        1.41421
     ruby> Math::PI
        3.14159

   The '::' operator tells the ruby interpreter which module it should
consult for the value of a constant (conceivably, some module besides
Math might mean something else by PI). If we want to refer to the
methods or constants of a module directly without using '::', we can
'include' that module:

     ruby> include Math
        Object
     ruby> sqrt(2)
        1.41421
     ruby> PI
        3.14159

Module As Mixin
---------------

Another use of modules is called "mixin".  Some OO programming
languages, including C++, allow "multiple inheritance", that is,
inheritance from more than one superclass.  A real-world example of
multiple inheritance is an alarm clock; you can think of alarm clocks
as belonging to the class of clocks and also the class of things with
buzzers.

   Ruby purposely does not implement true multiple inheritance, but
the "mixin technique" is a good alternative.  Remember that modules
cannot be instantiated or subclassed; but if we 'include' a module in
a class definition, its methods are effectively appended, or _mixed
in_, to the class.

Mixin As Properties
...................

Mixin can be thought of as a way of asking for whatever particular
properties we want to have.  For example, if a class has a working
'each' method, mixing in the standard library's 'Enumerable' module
gives us 'sort' and 'find' methods for free.

Modules Instead Of Multiple Inheritance
.......................................

This use of modules gives us the basic functionality of multiple
inheritance but allows us to represent class relationships with a
simple tree structure, and so simplifies the language implementation
considerably (a similar choice was made by the designers of Java).


File: Ruby2_5.info,  Node: Ruby User's Guide On Procedure Objects,  Next: Ruby User's Guide On Variables,  Prev: Ruby User's Guide On Modules,  Up: Ruby User's Guide

2.4.1.17 On Procedure Objects (Procs)
.....................................

It is often desirable to be able to specify responses to unexpected
events.  As it turns out, this is most easily done if we can pass
blocks of code as arguments to other methods, which means we want to
be able to treat code as if it were data.

   A new procedure object is formed using 'proc':

     ruby> quux = proc {
         |   puts "QUUXQUUXQUUX!!!"
         | }
        #<Proc:0x4017357c>

   Now what 'quux' refers to is an object, and like most objects, it
has behavior that can be invoked.  Specifically, we can ask it to
execute, via its 'call' method:

     ruby> quux.call
     QUUXQUUXQUUX!!!
        nil

   So, after all that, can 'quux' be used as a method argument?  Sure.

     ruby> def run( p )
         |   puts "About to call a procedure..."
         |   p.call
         |   puts "There: finished."
         | end
        nil
     ruby> run quux
     About to call a procedure...
     QUUXQUUXQUUX!!!
     There: finished.
        nil

   The 'trap' method lets us assign the response of our choice to any
system signal.

     ruby> inthandler = proc{ puts "^C was pressed." }
        #<Proc:0x401730a4>
     ruby> trap "SIGINT", inthandler
        #<Proc:0x401735e0>

   Normally pressing <^C> makes the interpreter quit.  Now a message
is printed and the interpreter continues running, so you don't lose
the work you were doing.  (You're not trapped in the interpreter
forever; you can still exit by typing 'exit'.)

Anonymous Procedure Objects
---------------------------

A final note before we move on to other topics: it's not strictly
necessary to give a procedure object a name before binding it to a
signal.  An equivalent anonymous procedure object would look like
'trap "SIGINT", proc{ puts "^C was pressed." }', or more compactly
still, ' trap "SIGINT", 'puts "^C was pressed."''.  This abbreviated
form provides some convenience and readability when you write small
anonymous procedures.


File: Ruby2_5.info,  Node: Ruby User's Guide On Variables,  Next: Ruby User's Guide On Global Variables,  Prev: Ruby User's Guide On Procedure Objects,  Up: Ruby User's Guide

2.4.1.18 On Variables
.....................

Ruby has three kinds of variables, one kind of constant and exactly
two pseudo-variables.  The variables and the constants have no type.
While untyped variables have some drawbacks, they have many more
advantages and fit well with ruby's quick and easy philosophy.

No Variable Declarations
------------------------

Variables must be declared in most languages in order to specify their
type, modifiability (i.e., whether they are constants), and scope;
since type is not an issue, and the rest is evident from the variable
name as you are about to see, we do not need variable declarations in
ruby.

   The first character of an identifier categorizes it at a glance:

$                                   global variable
@                                   instance variable
[a-z] or _                          local variable
[A-Z]                               constant

Table 2.1: List of Variable Identifiers

Pseudo-Variables
----------------

The only exceptions to the above are ruby's pseudo-variables: 'self',
which always refers to the currently executing object, and 'nil',
which is the meaningless value assigned to uninitialized variables.
Both are named as if they are local variables, but 'self' is a global
variable maintained by the interpreter, and 'nil' is really a
constant.  As these are the only two exceptions, they don't confuse
things too much.

   You may not assign values to 'self' or 'nil'.  'main', as a value
of 'self', refers to the top-level object.


File: Ruby2_5.info,  Node: Ruby User's Guide On Global Variables,  Next: Ruby User's Guide On Instance Variables,  Prev: Ruby User's Guide On Variables,  Up: Ruby User's Guide

2.4.1.19 On Global Variables
............................

A "global variable" has a name beginning with '$'.  It can be referred
to from anywhere in a program.  Before initialization, a global
variable has the special value 'nil'.

   Global variables should be used sparingly.  They are dangerous
because they can be written to from anywhere.  Overuse of globals can
make isolating bugs difficult; it also tends to indicate that the
design of a program has not been carefully thought out.  Whenever you
do find it necessary to use a global variable, be sure to give it a
descriptive name that is unlikely to be inadvertently used for
something else later (calling it something like $foo as above is
probably a bad idea).

Global Variables Can Be Traced
------------------------------

One nice feature of a global variable is that it can be traced; you
can specify a procedure which is invoked whenever the value of the
variable is changed.

     ruby> trace_var :$x, proc{puts "$x is now #{$x}"}
        nil
     ruby> $x = 5
     $x is now 5
        5

   When a global variable has been rigged to work as a trigger to
invoke a procedure whenever changed, we sometimes call it an "active
variable".  For instance, it might be useful for keeping a GUI display
up to date.

List Of Major System Variables
------------------------------

$!          latest error message
$           location of error
$_          string last read by 'gets' (has local scope)
$.          line number last read by interpreter
$&          string last matched by regexp
$~          the last regexp match, as an array of subexpressions (has
            local scope)
$n          the nth subexpression in the last match (same as $~[n])
$=          case-insensitivity flag
$/          input record separator
$\          output record separator
$0          the name of the ruby script file
$*          the command line arguments
$$          interpreter's process ID
$?          exit status of last executed child process

Table 2.2: List of Major System Variables


File: Ruby2_5.info,  Node: Ruby User's Guide On Instance Variables,  Next: Ruby User's Guide On Local Variables,  Prev: Ruby User's Guide On Global Variables,  Up: Ruby User's Guide

2.4.1.20 On Instance Variables
..............................

An instance variable has a name beginning with '@', and its scope is
confined to whatever object 'self' refers to.  Two different objects,
even if they belong to the same class, are allowed to have different
values for their instance variables.  From outside the object,
instance variables cannot be altered or even observed (i.e., ruby's
instance variables are never 'public') except by whatever methods are
explicitly provided by the programmer.  As with globals, instance
variables have the 'nil' value until they are initialized.

Instance Variables Are Not Declared
-----------------------------------

Instance variables do not need to be declared.  This indicates a
flexible object structure; in fact, each instance variable is
dynamically appended to an object when it is first assigned.


File: Ruby2_5.info,  Node: Ruby User's Guide On Local Variables,  Next: Ruby User's Guide On Class Constants,  Prev: Ruby User's Guide On Instance Variables,  Up: Ruby User's Guide

2.4.1.21 On Local Variables
...........................

A local variable has a name starting with a lower case letter or an
underscore character ('_').  Local variables do not, like globals and
instance variables, have the value 'nil' before initialization.

   The first assignment you make to a local variable acts something
like a declaration.  If you refer to an uninitialized local variable,
ruby will report an error: 'ERR: (eval):1: undefined local variable or
method `foo' for main(Object)'.

   Generally, the scope of a local variable is one of:

   * 'proc{ ... }'
   * 'loop{ ... }'
   * 'def ... end'
   * 'class ... end'
   * 'module ... end'
   * the entire script (unless one of the above applies)

   'defined?' is an operator which checks whether an identifier is
defined.  It returns a description of the identifier if it is defined,
or 'nil' otherwise.

   Procedure objects that live in the same scope share whatever local
variables also belong to that scope.  Here, the local variable 'bar'
is shared by 'main' and the procedure objects 'p1' and 'p2':

     ruby> bar=nil
        nil
     ruby> p1 = proc{|n| bar=n}
        #<Proc:0x8deb0>
     ruby> p2 = proc{bar}
        #<Proc:0x8dce8>
     ruby> p1.call(5)
        5
     ruby> bar
        5
     ruby> p2.call
        5

   Note that the 'bar=nil' at the beginning cannot be omitted; it
ensures that the scope of bar will encompass 'p1' and 'p2'.  Otherwise
'p1' and 'p2' would each end up with its own local variable bar, and
calling 'p2' would have resulted in an 'undefined local variable or
method' error.  We could have said 'bar=0' instead, but using 'nil' is
a courtesy to others who will read your code later.  It indicates
fairly clearly that you are only establishing scope, because the value
being assigned is not intended to be meaningful.

'Proc' Objects Are Closures
---------------------------

A powerful feature of procedure objects follows from their ability to
be passed as arguments: shared local variables remain valid even when
they are passed out of the original scope.

     ruby> def box
         |   contents = nil
         |   get = proc{contents}
         |   set = proc{|n| contents = n}
         |   return get, set
         | end
        nil
     ruby> reader, writer = box
        [#<Proc:0x40170fc0>, #<Proc:0x40170fac>]
     ruby> reader.call
        nil
     ruby> writer.call(2)
        2
     ruby> reader.call
        2

   Ruby is particularly smart about scope.  It is evident in our
example that the 'contents' variable is being shared between the
'reader' and 'writer'.  But we can also manufacture multiple
'reader-writer' pairs using 'box' as defined above; each pair shares a
'contents' variable, and the pairs do not interfere with each other.

     ruby> reader_1, writer_1 = box
        [#<Proc:0x40172820>, #<Proc:0x4017280c>]
     ruby> reader_2, writer_2 = box
        [#<Proc:0x40172668>, #<Proc:0x40172654>]
     ruby> writer_1.call(99)
        99
     ruby> reader_1.call
        99
     ruby> reader_2.call  # nothing is in this box yet
        nil

   This kind of programming could be considered a perverse little
object-oriented framework.  The 'box' method acts something like a
class, with 'get' and 'set' serving as methods (except those aren't
really the method names, which could vary with each box instance) and
'contents' being the lone instance variable.  Of course, using ruby's
legitimate class framework leads to much more readable code.


File: Ruby2_5.info,  Node: Ruby User's Guide On Class Constants,  Next: Ruby User's Guide On Exception Processing And rescue,  Prev: Ruby User's Guide On Local Variables,  Up: Ruby User's Guide

2.4.1.22 On Class Constants
...........................

A constant has a name starting with an uppercase character.  It should
be assigned a value at most once.  In the current implementation of
ruby, reassignment of a constant generates a warning but not an error
(the non-ANSI version of 'eval.rb' does not report the warning).

Class Constants Accessible Outside Class
----------------------------------------

Constants may be defined within classes, but unlike instance
variables, they are accessible outside the class.

     ruby> class ConstClass
         |   C1=101
         |   C2=102
         |   C3=103
         |   def show
         |     puts "#{C1} #{C2} #{C3}"
         |   end
         | end
        nil
     ruby> C1
     ERR: (eval):1: uninitialized constant C1
     ruby> ConstClass::C1
        101
     ruby> ConstClass.new.show
     101 102 103
        nil

   Constants can also be defined in modules.

     ruby> module ConstModule
         |   C1=101
         |   C2=102
         |   C3=103
         |   def showConstants
         |     puts "#{C1} #{C2} #{C3}"
         |   end
         | end
        nil
     ruby> C1
     ERR: (eval):1: uninitialized constant C1
     ruby> include ConstModule
        Object
     ruby> C1
        101
     ruby> showConstants
     101 102 103
        nil
     ruby> C1=99  # not really a good idea
        99
     ruby> C1
        99
     ruby> ConstModule::C1
        101
     ruby> ConstModule::C1=99   # .. this was not allowed in earlier versions
        (eval):1: warning: already initialized constant C1
        99
     ruby> ConstModule::C1  # "enough rope to shoot yourself in the foot"
        99


File: Ruby2_5.info,  Node: Ruby User's Guide On Exception Processing And rescue,  Next: Ruby User's Guide On Exception Processing and ensure,  Prev: Ruby User's Guide On Class Constants,  Up: Ruby User's Guide

2.4.1.23 On Exception Processing and 'rescue'
.............................................

An executing program can run into unexpected problems.  A file that it
wants to read might not exist; the disk might be full when it wants to
save some data; the user may provide it with some unsuitable kind of
input.

   A robust program will handle these situations sensibly and
gracefully.  Meeting that expectation can be an exasperating task.  C
programmers are expected to check the result of every system call that
could possibly fail, and immediately decide what is to be done.

   This is such a tiresome practice that programmers can tend to grow
careless and neglect it, and the result is a program that doesn't
handle exceptions well.  On the other hand, doing the job right can
make programs hard to read, because there is so much error handling
cluttering up the meaningful code.

'begin' And 'rescue' Blocks
---------------------------

In ruby, as in many modern languages, we can handle exceptions for
blocks of code in a compartmentalized way, thus dealing with surprises
effectively but not unduly burdening either the programmer or anyone
else trying to read the code later.  The block of code marked with
'begin' executes until there is an exception, which causes control to
be transferred to a block of error handling code, which is marked with
'rescue'.  If no exception occurs, the 'rescue' code is not used.  The
following method returns the first line of a text file, or 'nil' if
there is an exception:

     def first_line( filename )
       begin
         file = open("some_file")
         info = file.gets
         file.close
         info  # Last thing evaluated is the return value
       rescue
         nil   # Can't read the file? then don't return a string
       end
     end

   There will be times when we would like to be able to creatively
work around a problem.  Here, if the file we want is unavailable, we
try to use standard input instead:

     begin
       file = open("some_file")
     rescue
       file = STDIN
     end

     begin
       # ... process the input ...
     rescue
       # ... and deal with any other exceptions here.
     end

   'retry' can be used in the 'rescue' code to start the 'begin' code
over again.  It lets us rewrite the previous example a little more
compactly:

     fname = "some_file"
     begin
       file = open(fname)
       # ... process the input ...
     rescue
       fname = "STDIN"
       retry
     end

'raise'ing Exceptions
---------------------

Every ruby library raises an exception if any error occurs, and you
can raise exceptions explicitly in your code too.  To raise an
exception, use 'raise'.  It takes one argument, which should be a
string that describes the exception.  The argument is optional but
should not be omitted.  It can be accessed later via the special
global variable '$!'.

     ruby> raise "test error"
        test error
     ruby> begin
         |   raise "test2"
         | rescue
         |   puts "An error occurred: #{$!}"
         | end
     An error occurred: test2
        nil


File: Ruby2_5.info,  Node: Ruby User's Guide On Exception Processing and ensure,  Next: Ruby User's Guide On Accessors,  Prev: Ruby User's Guide On Exception Processing And rescue,  Up: Ruby User's Guide

2.4.1.24 On Exception Processing And 'ensure'
.............................................

There may be cleanup work that is necessary when a method finishes its
work.  Perhaps an open file should be closed, buffered data should be
flushed, etc.  If there were always only one exit point for each
method, we could confidently put our cleanup code in one place and
know that it would be executed; however, a method might return from
several places, or our intended cleanup code might be unexpectedly
skipped because of an exception.

   For this reason we add another keyword to the
'begin...rescue...end' scheme, which is 'ensure'.  The 'ensure' code
block executes regardless of the success or failure of the 'begin'
block.

     file = open("/tmp/some_file", "w")
     begin
       # ... write to the file ...
     rescue
       # ... handle the exceptions ...
     ensure
       file.close   # ... and this always happens.
     end

   It is possible to use 'ensure' without 'rescue', or vice versa, but
if they are used together in the same 'begin...end' block, the
'rescue' must precede the 'ensure'.


File: Ruby2_5.info,  Node: Ruby User's Guide On Accessors,  Next: Ruby User's Guide On Object Initialization,  Prev: Ruby User's Guide On Exception Processing and ensure,  Up: Ruby User's Guide

2.4.1.25 On Accessors
.....................

We briefly discussed instance variables in an earlier chapter, but
haven't done much with them yet.  An object's instance variables are
its "attributes", the things that distinguish it from other objects of
the same class.  It is important to be able to write and read these
attributes; doing so requires methods called attribute accessors.
We'll see in a moment that we don't always have to write accessor
methods explicitly, but let's go through all the motions for now.  The
two kinds of accessors are writers and readers.

Accessors: Writers And Readers
------------------------------

     ruby> class Fruit
         |   def set_kind(k)  # a writer
         |     @kind = k
         |   end
         |   def get_kind     # a reader
         |     @kind
         |   end
         | end
        nil
     ruby> f1 = Fruit.new
        #<Fruit:0xfd7e7c8c>
     ruby> f1.set_kind("peach")  # use the writer
        "peach"
     ruby> f1.get_kind           # use the reader
        "peach"
     ruby> f1                    # inspect the object
        #<Fruit:0xfd7e7c8c @kind="peach">

   Simple enough; we can store and retrieve information about what
kind of fruit we're looking at.  But our method names are a little
wordy.  The following is more concise, and more conventional:

     ruby> class Fruit
         |   def kind=(k)
         |     @kind = k
         |   end
         |   def kind
         |     @kind
         |   end
         | end
        nil
     ruby> f2 = Fruit.new
        #<Fruit:0xfd7e7c8c>
     ruby> f2.kind = "banana"
        "banana"
     ruby> f2.kind
        "banana"

The 'inspect' Method
--------------------

A short digression is in order.  You've noticed by now that when we
try to look at an object directly, we are shown something cryptic like
'#<anObject:0x83678>'.  This is just a default behavior, and we are
free to change it.  All we need to do is add a method named 'inspect'.
It should return a string that describes the object in some sensible
way, including the states of some or all of its instance variables.

     ruby> class Fruit
         |   def inspect
         |     "a fruit of the #{@kind} variety"
         |   end
         | end
        nil
     ruby> f2
        "a fruit of the banana variety"

'to_s' And 'p' Methods
----------------------

A related method is 'to_s' (convert to string), which is used when
printing an object.  In general, you can think of 'inspect' as a tool
for when you are writing and debugging programs, and 'to_s' as a way
of refining program output.  'eval.rb' (*note Ruby Eval Utility:: uses
'inspect' whenever it displays results.  You can use the 'p' method to
easily get debugging output from programs.

     # These two lines are equivalent:
     p anObject
     puts anObject.inspect

Making Accessors
----------------

Since many instance variables need accessor methods, Ruby provides
convenient shortcuts for the standard forms.

Shortcut                  Effect
-------------------------------------------------------------------------
attr_reader :v            def v; ;< end
attr_writer :v            def v=(value); =<value; end
attr_accessor :v          attr_reader :v; attr_writer :v
attr_accessor :v, :w      attr_accessor :v; attr_accessor :w

Table 2.3: List of Accessor Shortcuts

   Let's take advantage of this and add freshness information.  First
we ask for an automatically generated reader and writer, and then we
incorporate the new information into 'inspect':

     ruby> class Fruit
         |   attr_accessor :condition
         |   def inspect
         |     "a #{@condition} #{@kind}"
         |   end
         | end
        nil
     ruby> f2.condition = "ripe"
        "ripe"
     ruby> f2
        "a ripe banana"

   If nobody eats our ripe fruit, perhaps we should let time take its
toll.

     ruby> class Fruit
         |   def time_passes
         |     @condition = "rotting"
         |   end
         | end
        nil
     ruby> f2
        "a ripe banana"
     ruby> f2.time_passes
        "rotting"
     ruby> f2
        "a rotting banana"

   But while playing around here, we have introduced a small problem.
What happens if we try to create a third piece of fruit now?  Remember
that instance variables don't exist until values are assigned to them.

     ruby> f3 = Fruit.new
     ERR: failed to convert nil into String

   It is the 'inspect' method that is complaining here, and with good
reason.  We have asked it to report on the kind and condition of a
piece of fruit, but as yet 'f3' has not been assigned either
attribute.  If we wanted to, we could rewrite the 'inspect' method so
it tests instance variables using the 'defined?' method and then only
reports on them if they exist, but maybe that's not very useful; since
every piece of fruit has a kind and condition, it seems we should make
sure those always get defined somehow.  That is the topic of the next
chapter.


File: Ruby2_5.info,  Node: Ruby User's Guide On Object Initialization,  Next: Ruby User's Guide On Nuts And Bolts,  Prev: Ruby User's Guide On Accessors,  Up: Ruby User's Guide

2.4.1.26 On Object Initialization
.................................

Our 'Fruit' class from the previous chapter had two instance
variables, one to describe the kind of fruit and another to describe
its condition.  It was only after writing a custom 'inspect' method
for the class that we realized it didn't make sense for a piece of
fruit to lack those characteristics.  Fortunately, ruby provides a way
to ensure that instance variables always get initialized.

Default Argument Values in 'initialize'
---------------------------------------

Whenever Ruby creates a new object, it looks for a method named
'initialize' and executes it.  So one simple thing we can do is use an
'initialize' method to put default values into all the instance
variables, so the 'inspect' method will have something to say.

   There will be times when a default value doesn't make a lot of
sense.  Is there such a thing as a default kind of fruit?  It may be
preferable to require that each piece of fruit have its kind specified
at the time of its creation.  To do this, we would add a formal
argument to the 'initialize' method.  For reasons we won't get into
here, arguments you supply to 'new' are actually delivered to
'initialize'.

     ruby> class Fruit
         |   def initialize( k )
         |     @kind = k
         |     @condition = "ripe"
         |   end
         | end
        nil
     ruby> f5 = Fruit.new "mango"
        "a ripe mango"
     ruby> f6 = Fruit.new
     ERR: (eval):1:in `initialize': wrong # of arguments(0 for 1)

   Above we see that once an argument is associated with the
'initialize' method, it can't be left off without generating an error.
If we want to be more considerate, we can use the argument if it is
given, or fall back to default values otherwise.

     ruby> class Fruit
         |   def initialize( k="apple" )
         |     @kind = k
         |     @condition = "ripe"
         |   end
         | end
        nil
     ruby> f5 = Fruit.new "mango"
        "a ripe mango"
     ruby> f6 = Fruit.new
        "a ripe apple"

   You can use "default argument values" for any method, not just
'initialize'.  The argument list must be arranged so that those with
default values come last.

Object Reflection, Variable-Length Argument Lists, Method Overloading
---------------------------------------------------------------------

Sometimes it is useful to provide several ways to initialize an
object.  Although it is outside the scope of this tutorial, ruby
supports object reflection and variable-length argument lists, which
together effectively allow method overloading.


File: Ruby2_5.info,  Node: Ruby User's Guide On Nuts And Bolts,  Prev: Ruby User's Guide On Object Initialization,  Up: Ruby User's Guide

2.4.1.27 On Nuts And Bolts
..........................

Statement Delimiters
--------------------

Some languages require some kind of punctuation, often a semicolon
(';'), to end each statement in a program.  Ruby instead follows the
convention used in shells like 'sh' and 'csh'.  Multiple statements on
one line must be separated by semicolons, but they are not required at
the end of a line; a linefeed is treated like a semicolon.  If a line
ends with a backslash ('\'), the linefeed following it is ignored;
this allows you to have a single logical line that spans several
lines.

Comments
--------

Why write comments?  Although well written code tends to be
self-documenting, it is often helpful to scribble in the margins, and
it can be a mistake to believe that others will be able to look at
your code and immediately see it the way you do.  Besides, for
practical purposes, you yourself are a different person within a few
days anyway; which of us hasn't gone back to fix or enhance a program
after the passage of time and said, I know I wrote this, but what in
blazes does it mean?

   Some experienced programmers will point out, quite correctly, that
contradictory or outdated comments can be worse than none at all.
Certainly, comments shouldn't be a substitute for readable code; if
your code is unclear, it's probably also buggy.  You may find that you
need to comment more while you are learning ruby, and then less as you
become better at expressing your ideas in simple, elegant, readable
code.

   Ruby follows a common scripting convention, which is to use a pound
symbol ('#') to denote the start of a comment.  Anything following an
unquoted '#', to the end of the line on which it appears, is ignored
by the interpreter.

   Also, to facilitate large comment blocks, the ruby interpreter also
ignores anything between a line starting with '=begin' and another
line starting with '=end'.

     #!/usr/bin/env ruby

     =begin
     **********************************************************************
       This is a comment block, something you write for the benefit of
       human readers (including yourself).  The interpreter ignores it.
       There is no need for a '#' at the start of every line.
     **********************************************************************
     =end

Organizing Your Code
--------------------

Ruby's unusually high level of dynamism means that classes, modules,
and methods exist only after their defining code runs.  If you're used
to programming in a more static language, this can sometimes lead to
surprises.

     # The below results in an "undefined method" error:

     puts successor(3)

     def successor(x)
       x + 1
     end

   Although the interpreter checks over the entire script file for
syntax before executing it, the 'def successor ... end' code has to
actually run in order to create the 'successor' method.  So the order
in which you arrange a script can matter.

   This does not, as it might seem at first glance, force you to
organize your code in a strictly bottom-up fashion.  When the
interpreter encounters a method definition, it can safely include
undefined references, as long as you can be sure they will be defined
by the time the method is actually invoked:

     # Conversion of fahrenheit to celsius, broken
     # down into two steps.

     def f_to_c(f)
       scale(f - 32.0)  # This is a forward reference, but it's okay.
     end

     def scale(x)
       x * 5.0 / 9.0
     end

     printf "%.1f is a comfortable temperature.\n", f_to_c(72.3)

   So while this may seem less convenient than what you may be used to
in Perl or Java, it is less restrictive than trying to write C without
prototypes (which would require you to always maintain a partial
ordering of what references what).  Putting top-level code at the
bottom of a source file always works.  And even this is less of an
annoyance than it might at first seem.  A sensible and painless way to
enforce the behavior you want is to define a 'main' function at the
top of the file, and call it from the bottom.

     #!/usr/bin/env ruby

     def main
       # Express the top level logic here...
     end

     # ... put support code here, organized as you see fit ...

     main # ... and start execution here.

'load' And 'require'
--------------------

It also helps that ruby provides tools for breaking complicated
programs into readable, reusable, logically related chunks.  We have
already seen the use of 'include' for accessing modules (*note Ruby
User's Guide On Modules::.  You will also find the 'load' and
'require' facilities useful.

'load'
     works as if the file it refers to were copied and pasted in
     (something like the '#include' preprocessor directive in C).
'require'
     is somewhat more sophisticated, causing code to be loaded at most
     once and only when needed.


File: Ruby2_5.info,  Node: Ruby Programming Wikibook,  Next: Programming Ruby,  Prev: Ruby User's Guide,  Up: Manuals

2.4.2 Ruby Programming Wikibook
-------------------------------

Ruby Programming Wikibook
(http://en.wikibooks.org/wiki/Ruby_programming_language)

   A free online manual with beginner and intermediate content plus a
thorough language reference.


File: Ruby2_5.info,  Node: Programming Ruby,  Prev: Ruby Programming Wikibook,  Up: Manuals

2.4.3 Programming Ruby
----------------------

The Programmatic Programmer's Guide
-----------------------------------

Programming Ruby (http://ruby-doc.com/docs/ProgrammingRuby/)

What This Book Is
.................

This book is a tutorial and reference for the Ruby programming
language.  Use Ruby, and you'll write better code, be more productive,
and enjoy programming more.

What Ruby Is
............

Take a true object-oriented language, such as Smalltalk.  Drop the
unfamiliar syntax and move to more conventional, file-based source
code.  Now add in a good measure of the flexibility and convenience of
languages such as Python and Perl.

   You end up with Ruby.

Ruby is OO
..........

OO aficionados will find much to like in Ruby: things such as pure
object orientation (everything's an object), metaclasses, closures,
iterators, and ubiquitous heterogeneous collections.  Smalltalk users
will feel right at home (and C++ and Java users will feel jealous).

Ruby is Perl and Python
.......................

At the same time, Perl and Python wizards will find many of their
favorite features: full regular expression support, tight integration
with the underlying operating system, convenient shortcuts, and
dynamic evaluation.

Principle of Lease Surprise
...........................

Ruby follows the Principle of Least Surprise -- things work the way
you would expect them to, with very few special cases or exceptions.

Ruby is a "Transparent" Language
................................

We call Ruby a "transparent" language.  By that we mean that Ruby
doesn't obscure the solutions you write behind lots of syntax and the
need to churn out reams of support code just to get simple things
done.  With Ruby you write programs close to the problem domain.
Rather than constantly mapping your ideas and designs down to the
pedestrian level of most languages, with Ruby you'll find you can
express them directly and express them elegantly.  This means you code
faster.  It also means your programs stay readable and maintainable.

Ruby is a "Scripting" Language
..............................

What exactly is a scripting language?  Frankly we don't know if it's a
distinction worth making.  In Ruby, you can access all the underlying
operating system features.  You can do the same stuff in Ruby that you
can in Perl or Python, and you can do it more cleanly.  But Ruby is
fundamentally different.  It is a true programming language, too, with
strong theoretical roots and an elegant, lightweight syntax.  You
could hack together a mess of "scripts" with Ruby, but you probably
won't.  Instead, you'll be more inclined to engineer a solution, to
produce a program that is easy to understand, simple to maintain, and
a piece of cake to extend and reuse in the future.

Ruby is a General Purpose Programming Language
..............................................

Although we have used Ruby for scripting jobs, most of the time we use
it as a general-purpose programming language.  We've used it to write
GUI applications and middle-tier server processes, and we're using it
to format large parts of this book.  Others have used it for managing
server machines and databases.  Ruby is serving Web pages, interfacing
to databases and generating dynamic content.  People are writing
artificial intelligence and machine learning programs in Ruby, and at
least one person is using it to investigate natural evolution.  Ruby's
finding a home as a vehicle for exploratory mathematics.  And people
all over the world are using it as a way of gluing together all their
different applications.  It truly is a great language for producing
solutions in a wide variety of problem domains.

Should I Use Ruby?
..................

However, Ruby is probably more applicable than you might think.  It is
easy to extend, both from within the language and by linking in
third-party libraries.  It is portable across a number of platforms.
It's relatively lightweight and consumes only modest system resources.
And it's easy to learn; we've known people who've put Ruby code into
production systems within a day of picking up drafts of this book.
We've used Ruby to implement parts of an X11 window manager, a task
that's normally considered severe C coding.  Ruby excelled, and helped
us write code in hours that would otherwise have taken days.


File: Ruby2_5.info,  Node: Editors and IDEs,  Next: Further Reading,  Prev: Manuals,  Up: Documentation

2.5 Editors and IDEs
====================


File: Ruby2_5.info,  Node: Further Reading,  Prev: Editors and IDEs,  Up: Documentation

2.6 Further Reading
===================


File: Ruby2_5.info,  Node: List of Tables,  Next: Ruby-Doc,  Prev: Documentation,  Up: Top

List of Tables
**************

* Menu:

* Table 2.1: table:variable-identifiers. List of Variable ...
* Table 2.2: table:global-variables.     List of Major System ...
* Table 2.3: table:accessor-shortcuts.   List of Accessor Shortcuts
* Table A.1: table:api.                  Core API
* Table A.2: table:api-classes-and-modules.
                                         List of Classes and ...
* Table A.3: table:api-methods.          List of API Methods
* Table A.4: table:core-topics.          Table of Core Topics


File: Ruby2_5.info,  Node: Ruby-Doc,  Next: RDoc,  Prev: List of Tables,  Up: Top

Appendix A Ruby-Doc
*******************

Help and documentation for the Ruby programming language.

   * Ruby-Doc Core Reference Home (http://ruby-doc.org/)

   * Core API (http://ruby-doc.org/core)

     These are the API documents for the base classes and modules in
     the current stable release of Ruby 2.5.

   * Standard Library API (http://ruby-doc.org/stdlib/)

     These are the API documents for the standard library classes and
     modules in version 2.5

   * Getting Started (http://ruby-doc.org/gettingstarted)

     A collection of resources for those just starting out with Ruby.

   * Ruby-Doc Downloads (http://ruby-doc.org/downloads/)

   * The Ruby Specification Project (https://github.com/ruby/rubyspec)

* Menu:

* API Documentation::


File: Ruby2_5.info,  Node: API Documentation,  Up: Ruby-Doc

A.1 API Documentation
=====================

This is the API documentation for Ruby 2.5.1.

   *note Files API::

   *note Classes And Modules API::

   *note Methods API::

* Menu:

* Files API::
* Classes And Modules API::
* Methods API::
* Beginner Core Topics::


File: Ruby2_5.info,  Node: Files API,  Next: Classes And Modules API,  Up: API Documentation

A.1.1 Files API
---------------

Grammar
     <http://ruby-doc.org/core-2.5.1/_lib/racc/rdoc/grammar_en_rdoc.html>

Contributing
     <http://ruby-doc.org/core-2.5.1/doc/contributing_rdoc.html>

DTrace Probes
     <http://ruby-doc.org/core-2.5.1/doc/dtrace_probes_rdoc.html>

Extension
     <http://ruby-doc.org/core-2.5.1/doc/extension_rdoc.html>

Globals
     <http://ruby-doc.org/core-2.5.1/doc/globals_rdoc.html>

Keywords
     <http://ruby-doc.org/core-2.5.1/doc/keywords_rdoc.html>

Marshall
     <http://ruby-doc.org/core-2.5.1/doc/marshal_rdoc.html>

RegExp
     <http://ruby-doc.org/core-2.5.1/doc/regexp_rdoc.html>

Security
     <http://ruby-doc.org/core-2.5.1/doc/security_rdoc.html>

Standard Library
     <http://ruby-doc.org/core-2.5.1/doc/standard_library_rdoc.html>

Syntax
     <http://ruby-doc.org/core-2.5.1/doc/syntax_rdoc.html>

Assignment
     <http://ruby-doc.org/core-2.5.1/doc/syntax/assignment_rdoc.html>

Calling Methods
     <http://ruby-doc.org/core-2.5.1/doc/syntax/calling_methods_rdoc.html>

Control Expressions
     <http://ruby-doc.org/core-2.5.1/doc/syntax/control_expressions_rdoc.html>

Exceptions
     <http://ruby-doc.org/core-2.5.1/doc/syntax/exceptions_rdoc.html>

Literals
     <http://ruby-doc.org/core-2.5.1/doc/syntax/literals_rdoc.html>

Methods
     <http://ruby-doc.org/core-2.5.1/doc/syntax/methods_rdoc.html>

Miscellaneous
     <http://ruby-doc.org/core-2.5.1/doc/syntax/miscellaneous_rdoc.html>

Modules and Classes
     <http://ruby-doc.org/core-2.5.1/doc/syntax/modules_and_classes_rdoc.html>

Precedence
     <http://ruby-doc.org/core-2.5.1/doc/syntax/precedence_rdoc.html>

Refinements
     <http://ruby-doc.org/core-2.5.1/doc/syntax/refinements_rdoc.html>

README
     <http://ruby-doc.org/core-2.5.1/sample/drb/README_rdoc.html>

Table A.1: Core API


File: Ruby2_5.info,  Node: Classes And Modules API,  Next: Methods API,  Prev: Files API,  Up: API Documentation

A.1.2 Classes And Modules API
-----------------------------

'ARGF (http://ruby-doc.org/core-2.5.1/ARGF.html)'
     Class

'ArgumentError (http://ruby-doc.org/core-2.5.1/ArgumentError.html)'
     Class

'Array (http://ruby-doc.org/core-2.5.1/Array.html)'
     Class

'BasicObject (http://ruby-doc.org/core-2.5.1/BasicObject.html)'
     Class

'Binding (http://ruby-doc.org/core-2.5.1/Binding.html)'
     Class

'Class (http://ruby-doc.org/core-2.5.1/Class.html)'
     Class

'ClosedQueueError (http://ruby-doc.org/core-2.5.1/ClosedQueueError.html)'
     Class

'Comparable (http://ruby-doc.org/core-2.5.1/Comparable.html)'
     Module

'Complex (http://ruby-doc.org/core-2.5.1/Complex.html)'
     Class

'Complex::compatible (http://ruby-doc.org/core-2.5.1/Complex/compatible.html)'
     Class

'ConditionVariable (http://ruby-doc.org/core-2.5.1/ConditionVariable.html)'
     Class

'Continuation (http://ruby-doc.org/core-2.5.1/Continuation.html)'
     Class

'Data (http://ruby-doc.org/core-2.5.1/Data.html)'
     Class

'Dir (http://ruby-doc.org/core-2.5.1/Dir.html)'
     Class

'ENV (http://ruby-doc.org/core-2.5.1/ENV.html)'
     Class

'EOFError (http://ruby-doc.org/core-2.5.1/EOFError.html)'
     Class

'Encoding (http://ruby-doc.org/core-2.5.1/Encoding.html)'
     Class

'Encoding::CompatibilityError (http://ruby-doc.org/core-2.5.1/Encoding/CompatibilityError.html)'
     Class

'Encoding::Converter (http://ruby-doc.org/core-2.5.1/Encoding/Converter.html)'
     Class

'Encoding::ConverterNotFoundError (http://ruby-doc.org/core-2.5.1/Encoding/ConverterNotFoundError.html)'
     Class

'Encoding::InvalidByteSequenceError (http://ruby-doc.org/core-2.5.1/Encoding/InvalidByteSequenceError.html)'
     Class

'Encoding::UndefinedConversionError (http://ruby-doc.org/core-2.5.1/Encoding/UndefinedConversionError.html)'
     Class

'EncodingError (http://ruby-doc.org/core-2.5.1/EncodingError.html)'
     Class

'Enumerable (http://ruby-doc.org/core-2.5.1/Enumerable.html)'
     Module

'Enumerator (http://ruby-doc.org/core-2.5.1/Enumerator.html)'
     Class

'Enumerator::Generator (http://ruby-doc.org/core-2.5.1/Enumerator/Generator.html)'
     Class

'Enumerator::Lazy (http://ruby-doc.org/core-2.5.1/Enumerator/Lazy.html)'
     Class

'Enumerator::Yielder (http://ruby-doc.org/core-2.5.1/Enumerator/Yielder.html)'
     Class

'Errno (http://ruby-doc.org/core-2.5.1/Errno.html)'
     Module

'Exception (http://ruby-doc.org/core-2.5.1/Exception.html)'
     Class

'FalseClass (http://ruby-doc.org/core-2.5.1/FalseClass.html)'
     Class

'Fiber (http://ruby-doc.org/core-2.5.1/Fiber.html)'
     Class

'FiberError (http://ruby-doc.org/core-2.5.1/FiberError.html)'
     Class

'File (http://ruby-doc.org/core-2.5.1/File.html)'
     Class

'File::Constants (http://ruby-doc.org/core-2.5.1/File/Constants.html)'
     Module

'File::Stat (http://ruby-doc.org/core-2.5.1/File/Stat.html)'
     Class

'FileTest (http://ruby-doc.org/core-2.5.1/FileTest.html)'
     Module

'Float (http://ruby-doc.org/core-2.5.1/Float.html)'
     Class

'FloatDomainError (http://ruby-doc.org/core-2.5.1/FloatDomainError.html)'
     Class

'FrozenError (http://ruby-doc.org/core-2.5.1/FrozenError.html)'
     Class

'GC (http://ruby-doc.org/core-2.5.1/GC.html)'
     Module

'GC::Profiler (http://ruby-doc.org/core-2.5.1/GC/Profiler.html)'
     Module

'Hash (http://ruby-doc.org/core-2.5.1/Hash.html)'
     Class

'IO (http://ruby-doc.org/core-2.5.1/IO.html)'
     Class

'IO::EAGAINWaitReadable (http://ruby-doc.org/core-2.5.1/IO/EAGAINWaitReadable.html)'
     Class

'IO::EAGAINWaitWritable (http://ruby-doc.org/core-2.5.1/IO/EAGAINWaitWritable.html)'
     Class

'IO::EINPROGRESSWaitReadable (http://ruby-doc.org/core-2.5.1/IO/EINPROGRESSWaitReadable.html)'
     Class

'IO::EINPROGRESSWaitWritable (http://ruby-doc.org/core-2.5.1/IO/EINPROGRESSWaitWritable.html)'
     Class

'IO::EWOULDBLOCKWaitReadable (http://ruby-doc.org/core-2.5.1/IO/EWOULDBLOCKWaitReadable.html)'
     Class

'IO::EWOULDBLOCKWaitWritable (http://ruby-doc.org/core-2.5.1/IO/EWOULDBLOCKWaitWritable.html)'
     Class

'IO::WaitReadable (http://ruby-doc.org/core-2.5.1/IO/WaitReadable.html)'
     Module

'IO::WaitWritable (http://ruby-doc.org/core-2.5.1/IO/WaitWritable.html)'
     Module

'IOError (http://ruby-doc.org/core-2.5.1/IOError.html)'
     Class

'IndexError (http://ruby-doc.org/core-2.5.1/IndexError.html)'
     Class

'Integer (http://ruby-doc.org/core-2.5.1/Integer.html)'
     Class

'Interrupt (http://ruby-doc.org/core-2.5.1/Interrupt.html)'
     Class

'Kernel (http://ruby-doc.org/core-2.5.1/Kernel.html)'
     Module

'KeyError (http://ruby-doc.org/core-2.5.1/KeyError.html)'
     Class

'LoadError (http://ruby-doc.org/core-2.5.1/LoadError.html)'
     Class

'LocalJumpError (http://ruby-doc.org/core-2.5.1/LocalJumpError.html)'
     Class

'Marshal (http://ruby-doc.org/core-2.5.1/Marshal.html)'
     Module

'MatchData (http://ruby-doc.org/core-2.5.1/MatchData.html)'
     Class

'Math (http://ruby-doc.org/core-2.5.1/Math.html)'
     Module

'Math::DomainError (http://ruby-doc.org/core-2.5.1/Math/DomainError.html)'
     Class

'Method (http://ruby-doc.org/core-2.5.1/Method.html)'
     Class

'Module (http://ruby-doc.org/core-2.5.1/Module.html)'
     Class

'Mutex (http://ruby-doc.org/core-2.5.1/Mutex.html)'
     Class

'NameError (http://ruby-doc.org/core-2.5.1/NameError.html)'
     Class

'NilClass (http://ruby-doc.org/core-2.5.1/NilClass.html)'
     Class

'NoMemoryError (http://ruby-doc.org/core-2.5.1/NoMemoryError.html)'
     Class

'NoMethodError (http://ruby-doc.org/core-2.5.1/NoMethodError.html)'
     Class

'NotImplementedError (http://ruby-doc.org/core-2.5.1/NotImplementedError.html)'
     Class

'Numeric (http://ruby-doc.org/core-2.5.1/Numeric.html)'
     Class

'Object (http://ruby-doc.org/core-2.5.1/Object.html)'
     Class

'ObjectSpace (http://ruby-doc.org/core-2.5.1/ObjectSpace.html)'
     Module

'ObjectSpace::WeakMap (http://ruby-doc.org/core-2.5.1/ObjectSpace/WeakMap.html)'
     Class

'Proc (http://ruby-doc.org/core-2.5.1/Proc.html)'
     Class

'Process (http://ruby-doc.org/core-2.5.1/Process.html)'
     Module

'Process::GID (http://ruby-doc.org/core-2.5.1/Process/GID.html)'
     Module

'Process::Status (http://ruby-doc.org/core-2.5.1/Process/Status.html)'
     Class

'Process::Sys (http://ruby-doc.org/core-2.5.1/Process/Sys.html)'
     Module

'Process::UID (http://ruby-doc.org/core-2.5.1/Process/UID.html)'
     Module

'Process::Waiter (http://ruby-doc.org/core-2.5.1/Process/Waiter.html)'
     Class

'Queue (http://ruby-doc.org/core-2.5.1/Queue.html)'
     Class

'Random (http://ruby-doc.org/core-2.5.1/Random.html)'
     Class

'Random::Formatter (http://ruby-doc.org/core-2.5.1/Random/Formatter.html)'
     Module

'Range (http://ruby-doc.org/core-2.5.1/Range.html)'
     Class

'RangeError (http://ruby-doc.org/core-2.5.1/RangeError.html)'
     Class

'Rational (http://ruby-doc.org/core-2.5.1/Rational.html)'
     Class

'Rational::compatible (http://ruby-doc.org/core-2.5.1/Rational/compatible.html)'
     Class

'Regexp (http://ruby-doc.org/core-2.5.1/Regexp.html)'
     Class

'RegexpError (http://ruby-doc.org/core-2.5.1/RegexpError.html)'
     Class

'RubyVM (http://ruby-doc.org/core-2.5.1/RubyVM.html)'
     Class

'RubyVM::InstructionSequence (http://ruby-doc.org/core-2.5.1/RubyVM/InstructionSequence.html)'
     Class

'RuntimeError (http://ruby-doc.org/core-2.5.1/RuntimeError.html)'
     Class

'ScriptError (http://ruby-doc.org/core-2.5.1/ScriptError.html)'
     Class

'SecurityError (http://ruby-doc.org/core-2.5.1/SecurityError.html)'
     Class

'Signal (http://ruby-doc.org/core-2.5.1/Signal.html)'
     Module

'SignalException (http://ruby-doc.org/core-2.5.1/SignalException.html)'
     Class

'SizedQueue (http://ruby-doc.org/core-2.5.1/SizedQueue.html)'
     Class

'StandardError (http://ruby-doc.org/core-2.5.1/StandardError.html)'
     Class

'StopIteration (http://ruby-doc.org/core-2.5.1/StopIteration.html)'
     Class

'String (http://ruby-doc.org/core-2.5.1/String.html)'
     Class

'Struct (http://ruby-doc.org/core-2.5.1/Struct.html)'
     Class

'Symbol (http://ruby-doc.org/core-2.5.1/Symbol.html)'
     Class

'SyntaxError (http://ruby-doc.org/core-2.5.1/SyntaxError.html)'
     Class

'SystemCallError (http://ruby-doc.org/core-2.5.1/SystemCallError.html)'
     Class

'SystemExit (http://ruby-doc.org/core-2.5.1/SystemExit.html)'
     Class

'SystemStackError (http://ruby-doc.org/core-2.5.1/SystemStackError.html)'
     Class

'Thread (http://ruby-doc.org/core-2.5.1/Thread.html)'
     Class

'Thread::Backtrace (http://ruby-doc.org/core-2.5.1/Thread/Backtrace.html)'
     Class

'Thread::Backtrace::Location (http://ruby-doc.org/core-2.5.1/Thread/Backtrace/Location.html)'
     Class

'ThreadError (http://ruby-doc.org/core-2.5.1/ThreadError.html)'
     Class

'ThreadGroup (http://ruby-doc.org/core-2.5.1/ThreadGroup.html)'
     Class

'Time (http://ruby-doc.org/core-2.5.1/Time.html)'
     Class

'TracePoint (http://ruby-doc.org/core-2.5.1/TracePoint.html)'
     Class

'TrueClass (http://ruby-doc.org/core-2.5.1/TrueClass.html)'
     Class

'TypeError (http://ruby-doc.org/core-2.5.1/TypeError.html)'
     Class

'UnboundMethod (http://ruby-doc.org/core-2.5.1/UnboundMethod.html)'
     Class

'UncaughtThrowError (http://ruby-doc.org/core-2.5.1/UncaughtThrowError.html)'
     Class

'UnicodeNormalize (http://ruby-doc.org/core-2.5.1/UnicodeNormalize.html)'
     Module

'Warning (http://ruby-doc.org/core-2.5.1/Warning.html)'
     Module

'Warning::buffer (http://ruby-doc.org/core-2.5.1/Warning/buffer.html)'
     Class

'ZeroDivisionError (http://ruby-doc.org/core-2.5.1/ZeroDivisionError.html)'
     Class

'fatal (http://ruby-doc.org/core-2.5.1/fatal.html)'
     Class

Table A.2: List of Classes and Modules


File: Ruby2_5.info,  Node: Methods API,  Next: Beginner Core Topics,  Prev: Classes And Modules API,  Up: API Documentation

A.1.3 Methods API
-----------------

'=== (http://ruby-doc.org/core-2.5.1/SystemCallError.html#method-c-3D-3D-3D)'
     'SystemCallError::===' (Class Method)

'DEBUG (http://ruby-doc.org/core-2.5.1/Thread.html#method-c-DEBUG)'
     'Thread::DEBUG' (Class Method)

'DEBUG= (http://ruby-doc.org/core-2.5.1/Thread.html#method-c-DEBUG-3D)'
     'Thread::DEBUG=' (Class Method)

'[] (http://ruby-doc.org/core-2.5.1/Array.html#method-c-5B-5D)'
     'Array::[]' (Class Method)

'[] (http://ruby-doc.org/core-2.5.1/Dir.html#method-c-5B-5D)'
     'Dir::[]' (Class Method)

'[] (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-5B-5D)'
     'ENV::[]' (Class Method)

'[] (http://ruby-doc.org/core-2.5.1/Hash.html#method-c-5B-5D)'
     'Hash::[]' (Class Method)

'[]= (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-5B-5D-3D)'
     'ENV::[]=' (Class Method)

'_id2ref (http://ruby-doc.org/core-2.5.1/ObjectSpace.html#method-c-_id2ref)'
     'ObjectSpace::_id2ref' (Class Method)

'abort (http://ruby-doc.org/core-2.5.1/Process.html#method-c-abort)'
     'Process::abort' (Class Method)

'abort_on_exception (http://ruby-doc.org/core-2.5.1/Thread.html#method-c-abort_on_exception)'
     'Thread::abort_on_exception' (Class Method)

'abort_on_exception= (http://ruby-doc.org/core-2.5.1/Thread.html#method-c-abort_on_exception-3D)'
     'Thread::abort_on_exception=' (Class Method)

'absolute_path (http://ruby-doc.org/core-2.5.1/File.html#method-c-absolute_path)'
     'File::absolute_path' (Class Method)

'acos (http://ruby-doc.org/core-2.5.1/Math.html#method-c-acos)'
     'Math::acos' (Class Method)

'acosh (http://ruby-doc.org/core-2.5.1/Math.html#method-c-acosh)'
     'Math::acosh' (Class Method)

'add_stress_to_class (http://ruby-doc.org/core-2.5.1/GC.html#method-c-add_stress_to_class)'
     'GC::add_stress_to_class' (Class Method)

'aliases (http://ruby-doc.org/core-2.5.1/Encoding.html#method-c-aliases)'
     'Encoding::aliases' (Class Method)

'all_symbols (http://ruby-doc.org/core-2.5.1/Symbol.html#method-c-all_symbols)'
     'Symbol::all_symbols' (Class Method)

'argv0 (http://ruby-doc.org/core-2.5.1/Process.html#method-c-argv0)'
     'Process::argv0' (Class Method)

'asciicompat_encoding (http://ruby-doc.org/core-2.5.1/Encoding/Converter.html#method-c-asciicompat_encoding)'
     'Encoding/Converter::asciicompat_encoding' (Class Method)

'asin (http://ruby-doc.org/core-2.5.1/Math.html#method-c-asin)'
     'Math::asin' (Class Method)

'asinh (http://ruby-doc.org/core-2.5.1/Math.html#method-c-asinh)'
     'Math::asinh' (Class Method)

'assoc (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-assoc)'
     'ENV::assoc' (Class Method)

'at (http://ruby-doc.org/core-2.5.1/Time.html#method-c-at)'
     'Time::at' (Class Method)

'atan (http://ruby-doc.org/core-2.5.1/Math.html#method-c-atan)'
     'Math::atan' (Class Method)

'atan2 (http://ruby-doc.org/core-2.5.1/Math.html#method-c-atan2)'
     'Math::atan2' (Class Method)

'atanh (http://ruby-doc.org/core-2.5.1/Math.html#method-c-atanh)'
     'Math::atanh' (Class Method)

'atime (http://ruby-doc.org/core-2.5.1/File.html#method-c-atime)'
     'File::atime' (Class Method)

'basename (http://ruby-doc.org/core-2.5.1/File.html#method-c-basename)'
     'File::basename' (Class Method)

'binread (http://ruby-doc.org/core-2.5.1/IO.html#method-c-binread)'
     'IO::binread' (Class Method)

'binwrite (http://ruby-doc.org/core-2.5.1/IO.html#method-c-binwrite)'
     'IO::binwrite' (Class Method)

'birthtime (http://ruby-doc.org/core-2.5.1/File.html#method-c-birthtime)'
     'File::birthtime' (Class Method)

'blockdev? (http://ruby-doc.org/core-2.5.1/File.html#method-c-blockdev-3F)'
     'File::blockdev?' (Class Method)

'cbrt (http://ruby-doc.org/core-2.5.1/Math.html#method-c-cbrt)'
     'Math::cbrt' (Class Method)

'change_privilege (http://ruby-doc.org/core-2.5.1/Process/GID.html#method-c-change_privilege)'
     'Process/GID::change_privilege' (Class Method)

'change_privilege (http://ruby-doc.org/core-2.5.1/Process/UID.html#method-c-change_privilege)'
     'Process/UID::change_privilege' (Class Method)

'chardev? (http://ruby-doc.org/core-2.5.1/File.html#method-c-chardev-3F)'
     'File::chardev?' (Class Method)

'chdir (http://ruby-doc.org/core-2.5.1/Dir.html#method-c-chdir)'
     'Dir::chdir' (Class Method)

'children (http://ruby-doc.org/core-2.5.1/Dir.html#method-c-children)'
     'Dir::children' (Class Method)

'chmod (http://ruby-doc.org/core-2.5.1/File.html#method-c-chmod)'
     'File::chmod' (Class Method)

'chown (http://ruby-doc.org/core-2.5.1/File.html#method-c-chown)'
     'File::chown' (Class Method)

'chroot (http://ruby-doc.org/core-2.5.1/Dir.html#method-c-chroot)'
     'Dir::chroot' (Class Method)

'clear (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-clear)'
     'ENV::clear' (Class Method)

'clear (http://ruby-doc.org/core-2.5.1/GC/Profiler.html#method-c-clear)'
     'GC/Profiler::clear' (Class Method)

'clock_getres (http://ruby-doc.org/core-2.5.1/Process.html#method-c-clock_getres)'
     'Process::clock_getres' (Class Method)

'clock_gettime (http://ruby-doc.org/core-2.5.1/Process.html#method-c-clock_gettime)'
     'Process::clock_gettime' (Class Method)

'compatible? (http://ruby-doc.org/core-2.5.1/Encoding.html#method-c-compatible-3F)'
     'Encoding::compatible?' (Class Method)

'compile (http://ruby-doc.org/core-2.5.1/Regexp.html#method-c-compile)'
     'Regexp::compile' (Class Method)

'compile (http://ruby-doc.org/core-2.5.1/RubyVM/InstructionSequence.html#method-c-compile)'
     'RubyVM/InstructionSequence::compile' (Class Method)

'compile_file (http://ruby-doc.org/core-2.5.1/RubyVM/InstructionSequence.html#method-c-compile_file)'
     'RubyVM/InstructionSequence::compile_file' (Class Method)

'compile_option (http://ruby-doc.org/core-2.5.1/RubyVM/InstructionSequence.html#method-c-compile_option)'
     'RubyVM/InstructionSequence::compile_option' (Class Method)

'compile_option= (http://ruby-doc.org/core-2.5.1/RubyVM/InstructionSequence.html#method-c-compile_option-3D)'
     'RubyVM/InstructionSequence::compile_option=' (Class Method)

'constants (http://ruby-doc.org/core-2.5.1/Module.html#method-c-constants)'
     'Module::constants' (Class Method)

'copy_stream (http://ruby-doc.org/core-2.5.1/IO.html#method-c-copy_stream)'
     'IO::copy_stream' (Class Method)

'cos (http://ruby-doc.org/core-2.5.1/Math.html#method-c-cos)'
     'Math::cos' (Class Method)

'cosh (http://ruby-doc.org/core-2.5.1/Math.html#method-c-cosh)'
     'Math::cosh' (Class Method)

'count (http://ruby-doc.org/core-2.5.1/GC.html#method-c-count)'
     'GC::count' (Class Method)

'count_objects (http://ruby-doc.org/core-2.5.1/ObjectSpace.html#method-c-count_objects)'
     'ObjectSpace::count_objects' (Class Method)

'ctime (http://ruby-doc.org/core-2.5.1/File.html#method-c-ctime)'
     'File::ctime' (Class Method)

'current (http://ruby-doc.org/core-2.5.1/Fiber.html#method-c-current)'
     'Fiber::current' (Class Method)

'current (http://ruby-doc.org/core-2.5.1/Thread.html#method-c-current)'
     'Thread::current' (Class Method)

'daemon (http://ruby-doc.org/core-2.5.1/Process.html#method-c-daemon)'
     'Process::daemon' (Class Method)

'default_external (http://ruby-doc.org/core-2.5.1/Encoding.html#method-c-default_external)'
     'Encoding::default_external' (Class Method)

'default_external= (http://ruby-doc.org/core-2.5.1/Encoding.html#method-c-default_external-3D)'
     'Encoding::default_external=' (Class Method)

'default_internal (http://ruby-doc.org/core-2.5.1/Encoding.html#method-c-default_internal)'
     'Encoding::default_internal' (Class Method)

'default_internal= (http://ruby-doc.org/core-2.5.1/Encoding.html#method-c-default_internal-3D)'
     'Encoding::default_internal=' (Class Method)

'define_finalizer (http://ruby-doc.org/core-2.5.1/ObjectSpace.html#method-c-define_finalizer)'
     'ObjectSpace::define_finalizer' (Class Method)

'delete (http://ruby-doc.org/core-2.5.1/Dir.html#method-c-delete)'
     'Dir::delete' (Class Method)

'delete (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-delete)'
     'ENV::delete' (Class Method)

'delete (http://ruby-doc.org/core-2.5.1/File.html#method-c-delete)'
     'File::delete' (Class Method)

'delete_if (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-delete_if)'
     'ENV::delete_if' (Class Method)

'detach (http://ruby-doc.org/core-2.5.1/Process.html#method-c-detach)'
     'Process::detach' (Class Method)

'directory? (http://ruby-doc.org/core-2.5.1/File.html#method-c-directory-3F)'
     'File::directory?' (Class Method)

'dirname (http://ruby-doc.org/core-2.5.1/File.html#method-c-dirname)'
     'File::dirname' (Class Method)

'disable (http://ruby-doc.org/core-2.5.1/GC.html#method-c-disable)'
     'GC::disable' (Class Method)

'disable (http://ruby-doc.org/core-2.5.1/GC/Profiler.html#method-c-disable)'
     'GC/Profiler::disable' (Class Method)

'disasm (http://ruby-doc.org/core-2.5.1/RubyVM/InstructionSequence.html#method-c-disasm)'
     'RubyVM/InstructionSequence::disasm' (Class Method)

'disassemble (http://ruby-doc.org/core-2.5.1/RubyVM/InstructionSequence.html#method-c-disassemble)'
     'RubyVM/InstructionSequence::disassemble' (Class Method)

'dump (http://ruby-doc.org/core-2.5.1/Marshal.html#method-c-dump)'
     'Marshal::dump' (Class Method)

'each (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-each)'
     'ENV::each' (Class Method)

'each_child (http://ruby-doc.org/core-2.5.1/Dir.html#method-c-each_child)'
     'Dir::each_child' (Class Method)

'each_key (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-each_key)'
     'ENV::each_key' (Class Method)

'each_object (http://ruby-doc.org/core-2.5.1/ObjectSpace.html#method-c-each_object)'
     'ObjectSpace::each_object' (Class Method)

'each_pair (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-each_pair)'
     'ENV::each_pair' (Class Method)

'each_value (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-each_value)'
     'ENV::each_value' (Class Method)

'egid (http://ruby-doc.org/core-2.5.1/Process.html#method-c-egid)'
     'Process::egid' (Class Method)

'egid= (http://ruby-doc.org/core-2.5.1/Process.html#method-c-egid-3D)'
     'Process::egid=' (Class Method)

'eid (http://ruby-doc.org/core-2.5.1/Process/GID.html#method-c-eid)'
     'Process/GID::eid' (Class Method)

'eid (http://ruby-doc.org/core-2.5.1/Process/UID.html#method-c-eid)'
     'Process/UID::eid' (Class Method)

'empty? (http://ruby-doc.org/core-2.5.1/Dir.html#method-c-empty-3F)'
     'Dir::empty?' (Class Method)

'empty? (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-empty-3F)'
     'ENV::empty?' (Class Method)

'empty? (http://ruby-doc.org/core-2.5.1/File.html#method-c-empty-3F)'
     'File::empty?' (Class Method)

'enable (http://ruby-doc.org/core-2.5.1/GC.html#method-c-enable)'
     'GC::enable' (Class Method)

'enable (http://ruby-doc.org/core-2.5.1/GC/Profiler.html#method-c-enable)'
     'GC/Profiler::enable' (Class Method)

'enabled? (http://ruby-doc.org/core-2.5.1/GC/Profiler.html#method-c-enabled-3F)'
     'GC/Profiler::enabled?' (Class Method)

'entries (http://ruby-doc.org/core-2.5.1/Dir.html#method-c-entries)'
     'Dir::entries' (Class Method)

'erf (http://ruby-doc.org/core-2.5.1/Math.html#method-c-erf)'
     'Math::erf' (Class Method)

'erfc (http://ruby-doc.org/core-2.5.1/Math.html#method-c-erfc)'
     'Math::erfc' (Class Method)

'escape (http://ruby-doc.org/core-2.5.1/Regexp.html#method-c-escape)'
     'Regexp::escape' (Class Method)

'euid (http://ruby-doc.org/core-2.5.1/Process.html#method-c-euid)'
     'Process::euid' (Class Method)

'euid= (http://ruby-doc.org/core-2.5.1/Process.html#method-c-euid-3D)'
     'Process::euid=' (Class Method)

'exception (http://ruby-doc.org/core-2.5.1/Exception.html#method-c-exception)'
     'Exception::exception' (Class Method)

'exclusive (http://ruby-doc.org/core-2.5.1/Thread.html#method-c-exclusive)'
     'Thread::exclusive' (Class Method)

'exec (http://ruby-doc.org/core-2.5.1/Process.html#method-c-exec)'
     'Process::exec' (Class Method)

'executable? (http://ruby-doc.org/core-2.5.1/File.html#method-c-executable-3F)'
     'File::executable?' (Class Method)

'executable_real? (http://ruby-doc.org/core-2.5.1/File.html#method-c-executable_real-3F)'
     'File::executable_real?' (Class Method)

'exist? (http://ruby-doc.org/core-2.5.1/Dir.html#method-c-exist-3F)'
     'Dir::exist?' (Class Method)

'exist? (http://ruby-doc.org/core-2.5.1/File.html#method-c-exist-3F)'
     'File::exist?' (Class Method)

'exists? (http://ruby-doc.org/core-2.5.1/Dir.html#method-c-exists-3F)'
     'Dir::exists?' (Class Method)

'exists? (http://ruby-doc.org/core-2.5.1/File.html#method-c-exists-3F)'
     'File::exists?' (Class Method)

'exit (http://ruby-doc.org/core-2.5.1/Process.html#method-c-exit)'
     'Process::exit' (Class Method)

'exit (http://ruby-doc.org/core-2.5.1/Thread.html#method-c-exit)'
     'Thread::exit' (Class Method)

'exit! (http://ruby-doc.org/core-2.5.1/Process.html#method-c-exit-21)'
     'Process::exit!' (Class Method)

'exp (http://ruby-doc.org/core-2.5.1/Math.html#method-c-exp)'
     'Math::exp' (Class Method)

'expand_path (http://ruby-doc.org/core-2.5.1/File.html#method-c-expand_path)'
     'File::expand_path' (Class Method)

'extname (http://ruby-doc.org/core-2.5.1/File.html#method-c-extname)'
     'File::extname' (Class Method)

'fetch (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-fetch)'
     'ENV::fetch' (Class Method)

'file? (http://ruby-doc.org/core-2.5.1/File.html#method-c-file-3F)'
     'File::file?' (Class Method)

'find (http://ruby-doc.org/core-2.5.1/Encoding.html#method-c-find)'
     'Encoding::find' (Class Method)

'fnmatch (http://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch)'
     'File::fnmatch' (Class Method)

'fnmatch? (http://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch-3F)'
     'File::fnmatch?' (Class Method)

'for_fd (http://ruby-doc.org/core-2.5.1/IO.html#method-c-for_fd)'
     'IO::for_fd' (Class Method)

'foreach (http://ruby-doc.org/core-2.5.1/Dir.html#method-c-foreach)'
     'Dir::foreach' (Class Method)

'foreach (http://ruby-doc.org/core-2.5.1/IO.html#method-c-foreach)'
     'IO::foreach' (Class Method)

'fork (http://ruby-doc.org/core-2.5.1/Process.html#method-c-fork)'
     'Process::fork' (Class Method)

'fork (http://ruby-doc.org/core-2.5.1/Thread.html#method-c-fork)'
     'Thread::fork' (Class Method)

'frexp (http://ruby-doc.org/core-2.5.1/Math.html#method-c-frexp)'
     'Math::frexp' (Class Method)

'from_name (http://ruby-doc.org/core-2.5.1/Process/GID.html#method-c-from_name)'
     'Process/GID::from_name' (Class Method)

'from_name (http://ruby-doc.org/core-2.5.1/Process/UID.html#method-c-from_name)'
     'Process/UID::from_name' (Class Method)

'ftype (http://ruby-doc.org/core-2.5.1/File.html#method-c-ftype)'
     'File::ftype' (Class Method)

'gamma (http://ruby-doc.org/core-2.5.1/Math.html#method-c-gamma)'
     'Math::gamma' (Class Method)

'garbage_collect (http://ruby-doc.org/core-2.5.1/ObjectSpace.html#method-c-garbage_collect)'
     'ObjectSpace::garbage_collect' (Class Method)

'getegid (http://ruby-doc.org/core-2.5.1/Process/Sys.html#method-c-getegid)'
     'Process/Sys::getegid' (Class Method)

'geteuid (http://ruby-doc.org/core-2.5.1/Process/Sys.html#method-c-geteuid)'
     'Process/Sys::geteuid' (Class Method)

'getgid (http://ruby-doc.org/core-2.5.1/Process/Sys.html#method-c-getgid)'
     'Process/Sys::getgid' (Class Method)

'getpgid (http://ruby-doc.org/core-2.5.1/Process.html#method-c-getpgid)'
     'Process::getpgid' (Class Method)

'getpgrp (http://ruby-doc.org/core-2.5.1/Process.html#method-c-getpgrp)'
     'Process::getpgrp' (Class Method)

'getpriority (http://ruby-doc.org/core-2.5.1/Process.html#method-c-getpriority)'
     'Process::getpriority' (Class Method)

'getrlimit (http://ruby-doc.org/core-2.5.1/Process.html#method-c-getrlimit)'
     'Process::getrlimit' (Class Method)

'getsid (http://ruby-doc.org/core-2.5.1/Process.html#method-c-getsid)'
     'Process::getsid' (Class Method)

'getuid (http://ruby-doc.org/core-2.5.1/Process/Sys.html#method-c-getuid)'
     'Process/Sys::getuid' (Class Method)

'getwd (http://ruby-doc.org/core-2.5.1/Dir.html#method-c-getwd)'
     'Dir::getwd' (Class Method)

'gid (http://ruby-doc.org/core-2.5.1/Process.html#method-c-gid)'
     'Process::gid' (Class Method)

'gid= (http://ruby-doc.org/core-2.5.1/Process.html#method-c-gid-3D)'
     'Process::gid=' (Class Method)

'glob (http://ruby-doc.org/core-2.5.1/Dir.html#method-c-glob)'
     'Dir::glob' (Class Method)

'gm (http://ruby-doc.org/core-2.5.1/Time.html#method-c-gm)'
     'Time::gm' (Class Method)

'grant_privilege (http://ruby-doc.org/core-2.5.1/Process/GID.html#method-c-grant_privilege)'
     'Process/GID::grant_privilege' (Class Method)

'grant_privilege (http://ruby-doc.org/core-2.5.1/Process/UID.html#method-c-grant_privilege)'
     'Process/UID::grant_privilege' (Class Method)

'groups (http://ruby-doc.org/core-2.5.1/Process.html#method-c-groups)'
     'Process::groups' (Class Method)

'groups= (http://ruby-doc.org/core-2.5.1/Process.html#method-c-groups-3D)'
     'Process::groups=' (Class Method)

'grpowned? (http://ruby-doc.org/core-2.5.1/File.html#method-c-grpowned-3F)'
     'File::grpowned?' (Class Method)

'handle_interrupt (http://ruby-doc.org/core-2.5.1/Thread.html#method-c-handle_interrupt)'
     'Thread::handle_interrupt' (Class Method)

'has_key? (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-has_key-3F)'
     'ENV::has_key?' (Class Method)

'has_value? (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-has_value-3F)'
     'ENV::has_value?' (Class Method)

'home (http://ruby-doc.org/core-2.5.1/Dir.html#method-c-home)'
     'Dir::home' (Class Method)

'hypot (http://ruby-doc.org/core-2.5.1/Math.html#method-c-hypot)'
     'Math::hypot' (Class Method)

'identical? (http://ruby-doc.org/core-2.5.1/File.html#method-c-identical-3F)'
     'File::identical?' (Class Method)

'include? (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-include-3F)'
     'ENV::include?' (Class Method)

'index (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-index)'
     'ENV::index' (Class Method)

'initgroups (http://ruby-doc.org/core-2.5.1/Process.html#method-c-initgroups)'
     'Process::initgroups' (Class Method)

'inspect (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-inspect)'
     'ENV::inspect' (Class Method)

'invert (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-invert)'
     'ENV::invert' (Class Method)

'issetugid (http://ruby-doc.org/core-2.5.1/Process/Sys.html#method-c-issetugid)'
     'Process/Sys::issetugid' (Class Method)

'join (http://ruby-doc.org/core-2.5.1/File.html#method-c-join)'
     'File::join' (Class Method)

'keep_if (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-keep_if)'
     'ENV::keep_if' (Class Method)

'key (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-key)'
     'ENV::key' (Class Method)

'key? (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-key-3F)'
     'ENV::key?' (Class Method)

'keys (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-keys)'
     'ENV::keys' (Class Method)

'kill (http://ruby-doc.org/core-2.5.1/Process.html#method-c-kill)'
     'Process::kill' (Class Method)

'kill (http://ruby-doc.org/core-2.5.1/Thread.html#method-c-kill)'
     'Thread::kill' (Class Method)

'last_match (http://ruby-doc.org/core-2.5.1/Regexp.html#method-c-last_match)'
     'Regexp::last_match' (Class Method)

'last_status (http://ruby-doc.org/core-2.5.1/Process.html#method-c-last_status)'
     'Process::last_status' (Class Method)

'latest_gc_info (http://ruby-doc.org/core-2.5.1/GC.html#method-c-latest_gc_info)'
     'GC::latest_gc_info' (Class Method)

'lchmod (http://ruby-doc.org/core-2.5.1/File.html#method-c-lchmod)'
     'File::lchmod' (Class Method)

'lchown (http://ruby-doc.org/core-2.5.1/File.html#method-c-lchown)'
     'File::lchown' (Class Method)

'ldexp (http://ruby-doc.org/core-2.5.1/Math.html#method-c-ldexp)'
     'Math::ldexp' (Class Method)

'length (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-length)'
     'ENV::length' (Class Method)

'lgamma (http://ruby-doc.org/core-2.5.1/Math.html#method-c-lgamma)'
     'Math::lgamma' (Class Method)

'link (http://ruby-doc.org/core-2.5.1/File.html#method-c-link)'
     'File::link' (Class Method)

'list (http://ruby-doc.org/core-2.5.1/Encoding.html#method-c-list)'
     'Encoding::list' (Class Method)

'list (http://ruby-doc.org/core-2.5.1/Signal.html#method-c-list)'
     'Signal::list' (Class Method)

'list (http://ruby-doc.org/core-2.5.1/Thread.html#method-c-list)'
     'Thread::list' (Class Method)

'load (http://ruby-doc.org/core-2.5.1/Marshal.html#method-c-load)'
     'Marshal::load' (Class Method)

'load_from_binary (http://ruby-doc.org/core-2.5.1/RubyVM/InstructionSequence.html#method-c-load_from_binary)'
     'RubyVM/InstructionSequence::load_from_binary' (Class Method)

'load_from_binary_extra_data (http://ruby-doc.org/core-2.5.1/RubyVM/InstructionSequence.html#method-c-load_from_binary_extra_data)'
     'RubyVM/InstructionSequence::load_from_binary_extra_data' (Class
     Method)

'local (http://ruby-doc.org/core-2.5.1/Time.html#method-c-local)'
     'Time::local' (Class Method)

'locale_charmap (http://ruby-doc.org/core-2.5.1/Encoding.html#method-c-locale_charmap)'
     'Encoding::locale_charmap' (Class Method)

'log (http://ruby-doc.org/core-2.5.1/Math.html#method-c-log)'
     'Math::log' (Class Method)

'log10 (http://ruby-doc.org/core-2.5.1/Math.html#method-c-log10)'
     'Math::log10' (Class Method)

'log2 (http://ruby-doc.org/core-2.5.1/Math.html#method-c-log2)'
     'Math::log2' (Class Method)

'lstat (http://ruby-doc.org/core-2.5.1/File.html#method-c-lstat)'
     'File::lstat' (Class Method)

'lutime (http://ruby-doc.org/core-2.5.1/File.html#method-c-lutime)'
     'File::lutime' (Class Method)

'main (http://ruby-doc.org/core-2.5.1/Thread.html#method-c-main)'
     'Thread::main' (Class Method)

'malloc_allocated_size (http://ruby-doc.org/core-2.5.1/GC.html#method-c-malloc_allocated_size)'
     'GC::malloc_allocated_size' (Class Method)

'malloc_allocations (http://ruby-doc.org/core-2.5.1/GC.html#method-c-malloc_allocations)'
     'GC::malloc_allocations' (Class Method)

'maxgroups (http://ruby-doc.org/core-2.5.1/Process.html#method-c-maxgroups)'
     'Process::maxgroups' (Class Method)

'maxgroups= (http://ruby-doc.org/core-2.5.1/Process.html#method-c-maxgroups-3D)'
     'Process::maxgroups=' (Class Method)

'member? (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-member-3F)'
     'ENV::member?' (Class Method)

'mkdir (http://ruby-doc.org/core-2.5.1/Dir.html#method-c-mkdir)'
     'Dir::mkdir' (Class Method)

'mkfifo (http://ruby-doc.org/core-2.5.1/File.html#method-c-mkfifo)'
     'File::mkfifo' (Class Method)

'mktime (http://ruby-doc.org/core-2.5.1/Time.html#method-c-mktime)'
     'Time::mktime' (Class Method)

'mtime (http://ruby-doc.org/core-2.5.1/File.html#method-c-mtime)'
     'File::mtime' (Class Method)

'name_list (http://ruby-doc.org/core-2.5.1/Encoding.html#method-c-name_list)'
     'Encoding::name_list' (Class Method)

'nesting (http://ruby-doc.org/core-2.5.1/Module.html#method-c-nesting)'
     'Module::nesting' (Class Method)

'new (http://ruby-doc.org/core-2.5.1/Array.html#method-c-new)'
     'Array::new' (Class Method)

'new (http://ruby-doc.org/core-2.5.1/BasicObject.html#method-c-new)'
     'BasicObject::new' (Class Method)

'new (http://ruby-doc.org/core-2.5.1/Class.html#method-c-new)'
     'Class::new' (Class Method)

'new (http://ruby-doc.org/core-2.5.1/ConditionVariable.html#method-c-new)'
     'ConditionVariable::new' (Class Method)

'new (http://ruby-doc.org/core-2.5.1/Dir.html#method-c-new)'
     'Dir::new' (Class Method)

'new (http://ruby-doc.org/core-2.5.1/Encoding/Converter.html#method-c-new)'
     'Encoding/Converter::new' (Class Method)

'new (http://ruby-doc.org/core-2.5.1/Enumerator.html#method-c-new)'
     'Enumerator::new' (Class Method)

'new (http://ruby-doc.org/core-2.5.1/Enumerator/Lazy.html#method-c-new)'
     'Enumerator/Lazy::new' (Class Method)

'new (http://ruby-doc.org/core-2.5.1/Exception.html#method-c-new)'
     'Exception::new' (Class Method)

'new (http://ruby-doc.org/core-2.5.1/File.html#method-c-new)'
     'File::new' (Class Method)

'new (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-c-new)'
     'File/Stat::new' (Class Method)

'new (http://ruby-doc.org/core-2.5.1/Hash.html#method-c-new)'
     'Hash::new' (Class Method)

'new (http://ruby-doc.org/core-2.5.1/IO.html#method-c-new)'
     'IO::new' (Class Method)

'new (http://ruby-doc.org/core-2.5.1/Module.html#method-c-new)'
     'Module::new' (Class Method)

'new (http://ruby-doc.org/core-2.5.1/Mutex.html#method-c-new)'
     'Mutex::new' (Class Method)

'new (http://ruby-doc.org/core-2.5.1/NameError.html#method-c-new)'
     'NameError::new' (Class Method)

'new (http://ruby-doc.org/core-2.5.1/NoMethodError.html#method-c-new)'
     'NoMethodError::new' (Class Method)

'new (http://ruby-doc.org/core-2.5.1/Proc.html#method-c-new)'
     'Proc::new' (Class Method)

'new (http://ruby-doc.org/core-2.5.1/Queue.html#method-c-new)'
     'Queue::new' (Class Method)

'new (http://ruby-doc.org/core-2.5.1/Random.html#method-c-new)'
     'Random::new' (Class Method)

'new (http://ruby-doc.org/core-2.5.1/Range.html#method-c-new)'
     'Range::new' (Class Method)

'new (http://ruby-doc.org/core-2.5.1/Regexp.html#method-c-new)'
     'Regexp::new' (Class Method)

'new (http://ruby-doc.org/core-2.5.1/RubyVM/InstructionSequence.html#method-c-new)'
     'RubyVM/InstructionSequence::new' (Class Method)

'new (http://ruby-doc.org/core-2.5.1/SignalException.html#method-c-new)'
     'SignalException::new' (Class Method)

'new (http://ruby-doc.org/core-2.5.1/SizedQueue.html#method-c-new)'
     'SizedQueue::new' (Class Method)

'new (http://ruby-doc.org/core-2.5.1/String.html#method-c-new)'
     'String::new' (Class Method)

'new (http://ruby-doc.org/core-2.5.1/Struct.html#method-c-new)'
     'Struct::new' (Class Method)

'new (http://ruby-doc.org/core-2.5.1/SyntaxError.html#method-c-new)'
     'SyntaxError::new' (Class Method)

'new (http://ruby-doc.org/core-2.5.1/SystemCallError.html#method-c-new)'
     'SystemCallError::new' (Class Method)

'new (http://ruby-doc.org/core-2.5.1/SystemExit.html#method-c-new)'
     'SystemExit::new' (Class Method)

'new (http://ruby-doc.org/core-2.5.1/Thread.html#method-c-new)'
     'Thread::new' (Class Method)

'new (http://ruby-doc.org/core-2.5.1/Time.html#method-c-new)'
     'Time::new' (Class Method)

'new (http://ruby-doc.org/core-2.5.1/TracePoint.html#method-c-new)'
     'TracePoint::new' (Class Method)

'new (http://ruby-doc.org/core-2.5.1/UncaughtThrowError.html#method-c-new)'
     'UncaughtThrowError::new' (Class Method)

'new_seed (http://ruby-doc.org/core-2.5.1/Random.html#method-c-new_seed)'
     'Random::new_seed' (Class Method)

'now (http://ruby-doc.org/core-2.5.1/Time.html#method-c-now)'
     'Time::now' (Class Method)

'of (http://ruby-doc.org/core-2.5.1/RubyVM/InstructionSequence.html#method-c-of)'
     'RubyVM/InstructionSequence::of' (Class Method)

'open (http://ruby-doc.org/core-2.5.1/Dir.html#method-c-open)'
     'Dir::open' (Class Method)

'open (http://ruby-doc.org/core-2.5.1/File.html#method-c-open)'
     'File::open' (Class Method)

'open (http://ruby-doc.org/core-2.5.1/IO.html#method-c-open)'
     'IO::open' (Class Method)

'owned? (http://ruby-doc.org/core-2.5.1/File.html#method-c-owned-3F)'
     'File::owned?' (Class Method)

'pass (http://ruby-doc.org/core-2.5.1/Thread.html#method-c-pass)'
     'Thread::pass' (Class Method)

'path (http://ruby-doc.org/core-2.5.1/File.html#method-c-path)'
     'File::path' (Class Method)

'pending_interrupt? (http://ruby-doc.org/core-2.5.1/Thread.html#method-c-pending_interrupt-3F)'
     'Thread::pending_interrupt?' (Class Method)

'pid (http://ruby-doc.org/core-2.5.1/Process.html#method-c-pid)'
     'Process::pid' (Class Method)

'pipe (http://ruby-doc.org/core-2.5.1/IO.html#method-c-pipe)'
     'IO::pipe' (Class Method)

'pipe? (http://ruby-doc.org/core-2.5.1/File.html#method-c-pipe-3F)'
     'File::pipe?' (Class Method)

'polar (http://ruby-doc.org/core-2.5.1/Complex.html#method-c-polar)'
     'Complex::polar' (Class Method)

'popen (http://ruby-doc.org/core-2.5.1/IO.html#method-c-popen)'
     'IO::popen' (Class Method)

'ppid (http://ruby-doc.org/core-2.5.1/Process.html#method-c-ppid)'
     'Process::ppid' (Class Method)

'pwd (http://ruby-doc.org/core-2.5.1/Dir.html#method-c-pwd)'
     'Dir::pwd' (Class Method)

'quote (http://ruby-doc.org/core-2.5.1/Regexp.html#method-c-quote)'
     'Regexp::quote' (Class Method)

'rand (http://ruby-doc.org/core-2.5.1/Random.html#method-c-rand)'
     'Random::rand' (Class Method)

'rassoc (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-rassoc)'
     'ENV::rassoc' (Class Method)

'raw_data (http://ruby-doc.org/core-2.5.1/GC/Profiler.html#method-c-raw_data)'
     'GC/Profiler::raw_data' (Class Method)

're_exchange (http://ruby-doc.org/core-2.5.1/Process/GID.html#method-c-re_exchange)'
     'Process/GID::re_exchange' (Class Method)

're_exchange (http://ruby-doc.org/core-2.5.1/Process/UID.html#method-c-re_exchange)'
     'Process/UID::re_exchange' (Class Method)

're_exchangeable? (http://ruby-doc.org/core-2.5.1/Process/GID.html#method-c-re_exchangeable-3F)'
     'Process/GID::re_exchangeable?' (Class Method)

're_exchangeable? (http://ruby-doc.org/core-2.5.1/Process/UID.html#method-c-re_exchangeable-3F)'
     'Process/UID::re_exchangeable?' (Class Method)

'read (http://ruby-doc.org/core-2.5.1/IO.html#method-c-read)'
     'IO::read' (Class Method)

'readable? (http://ruby-doc.org/core-2.5.1/File.html#method-c-readable-3F)'
     'File::readable?' (Class Method)

'readable_real? (http://ruby-doc.org/core-2.5.1/File.html#method-c-readable_real-3F)'
     'File::readable_real?' (Class Method)

'readlines (http://ruby-doc.org/core-2.5.1/IO.html#method-c-readlines)'
     'IO::readlines' (Class Method)

'readlink (http://ruby-doc.org/core-2.5.1/File.html#method-c-readlink)'
     'File::readlink' (Class Method)

'realdirpath (http://ruby-doc.org/core-2.5.1/File.html#method-c-realdirpath)'
     'File::realdirpath' (Class Method)

'realpath (http://ruby-doc.org/core-2.5.1/File.html#method-c-realpath)'
     'File::realpath' (Class Method)

'rect (http://ruby-doc.org/core-2.5.1/Complex.html#method-c-rect)'
     'Complex::rect' (Class Method)

'rectangular (http://ruby-doc.org/core-2.5.1/Complex.html#method-c-rectangular)'
     'Complex::rectangular' (Class Method)

'rehash (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-rehash)'
     'ENV::rehash' (Class Method)

'reject (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-reject)'
     'ENV::reject' (Class Method)

'reject! (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-reject-21)'
     'ENV::reject!' (Class Method)

'remove_stress_to_class (http://ruby-doc.org/core-2.5.1/GC.html#method-c-remove_stress_to_class)'
     'GC::remove_stress_to_class' (Class Method)

'rename (http://ruby-doc.org/core-2.5.1/File.html#method-c-rename)'
     'File::rename' (Class Method)

'replace (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-replace)'
     'ENV::replace' (Class Method)

'report (http://ruby-doc.org/core-2.5.1/GC/Profiler.html#method-c-report)'
     'GC/Profiler::report' (Class Method)

'report_on_exception (http://ruby-doc.org/core-2.5.1/Thread.html#method-c-report_on_exception)'
     'Thread::report_on_exception' (Class Method)

'report_on_exception= (http://ruby-doc.org/core-2.5.1/Thread.html#method-c-report_on_exception-3D)'
     'Thread::report_on_exception=' (Class Method)

'restore (http://ruby-doc.org/core-2.5.1/Marshal.html#method-c-restore)'
     'Marshal::restore' (Class Method)

'result (http://ruby-doc.org/core-2.5.1/GC/Profiler.html#method-c-result)'
     'GC/Profiler::result' (Class Method)

'rid (http://ruby-doc.org/core-2.5.1/Process/GID.html#method-c-rid)'
     'Process/GID::rid' (Class Method)

'rid (http://ruby-doc.org/core-2.5.1/Process/UID.html#method-c-rid)'
     'Process/UID::rid' (Class Method)

'rmdir (http://ruby-doc.org/core-2.5.1/Dir.html#method-c-rmdir)'
     'Dir::rmdir' (Class Method)

'search_convpath (http://ruby-doc.org/core-2.5.1/Encoding/Converter.html#method-c-search_convpath)'
     'Encoding/Converter::search_convpath' (Class Method)

'select (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-select)'
     'ENV::select' (Class Method)

'select (http://ruby-doc.org/core-2.5.1/IO.html#method-c-select)'
     'IO::select' (Class Method)

'select! (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-select-21)'
     'ENV::select!' (Class Method)

'setegid (http://ruby-doc.org/core-2.5.1/Process/Sys.html#method-c-setegid)'
     'Process/Sys::setegid' (Class Method)

'seteuid (http://ruby-doc.org/core-2.5.1/Process/Sys.html#method-c-seteuid)'
     'Process/Sys::seteuid' (Class Method)

'setgid (http://ruby-doc.org/core-2.5.1/Process/Sys.html#method-c-setgid)'
     'Process/Sys::setgid' (Class Method)

'setgid? (http://ruby-doc.org/core-2.5.1/File.html#method-c-setgid-3F)'
     'File::setgid?' (Class Method)

'setpgid (http://ruby-doc.org/core-2.5.1/Process.html#method-c-setpgid)'
     'Process::setpgid' (Class Method)

'setpgrp (http://ruby-doc.org/core-2.5.1/Process.html#method-c-setpgrp)'
     'Process::setpgrp' (Class Method)

'setpriority (http://ruby-doc.org/core-2.5.1/Process.html#method-c-setpriority)'
     'Process::setpriority' (Class Method)

'setproctitle (http://ruby-doc.org/core-2.5.1/Process.html#method-c-setproctitle)'
     'Process::setproctitle' (Class Method)

'setregid (http://ruby-doc.org/core-2.5.1/Process/Sys.html#method-c-setregid)'
     'Process/Sys::setregid' (Class Method)

'setresgid (http://ruby-doc.org/core-2.5.1/Process/Sys.html#method-c-setresgid)'
     'Process/Sys::setresgid' (Class Method)

'setresuid (http://ruby-doc.org/core-2.5.1/Process/Sys.html#method-c-setresuid)'
     'Process/Sys::setresuid' (Class Method)

'setreuid (http://ruby-doc.org/core-2.5.1/Process/Sys.html#method-c-setreuid)'
     'Process/Sys::setreuid' (Class Method)

'setrgid (http://ruby-doc.org/core-2.5.1/Process/Sys.html#method-c-setrgid)'
     'Process/Sys::setrgid' (Class Method)

'setrlimit (http://ruby-doc.org/core-2.5.1/Process.html#method-c-setrlimit)'
     'Process::setrlimit' (Class Method)

'setruid (http://ruby-doc.org/core-2.5.1/Process/Sys.html#method-c-setruid)'
     'Process/Sys::setruid' (Class Method)

'setsid (http://ruby-doc.org/core-2.5.1/Process.html#method-c-setsid)'
     'Process::setsid' (Class Method)

'setuid (http://ruby-doc.org/core-2.5.1/Process/Sys.html#method-c-setuid)'
     'Process/Sys::setuid' (Class Method)

'setuid? (http://ruby-doc.org/core-2.5.1/File.html#method-c-setuid-3F)'
     'File::setuid?' (Class Method)

'shift (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-shift)'
     'ENV::shift' (Class Method)

'sid_available? (http://ruby-doc.org/core-2.5.1/Process/GID.html#method-c-sid_available-3F)'
     'Process/GID::sid_available?' (Class Method)

'sid_available? (http://ruby-doc.org/core-2.5.1/Process/UID.html#method-c-sid_available-3F)'
     'Process/UID::sid_available?' (Class Method)

'signame (http://ruby-doc.org/core-2.5.1/Signal.html#method-c-signame)'
     'Signal::signame' (Class Method)

'sin (http://ruby-doc.org/core-2.5.1/Math.html#method-c-sin)'
     'Math::sin' (Class Method)

'sinh (http://ruby-doc.org/core-2.5.1/Math.html#method-c-sinh)'
     'Math::sinh' (Class Method)

'size (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-size)'
     'ENV::size' (Class Method)

'size (http://ruby-doc.org/core-2.5.1/File.html#method-c-size)'
     'File::size' (Class Method)

'size? (http://ruby-doc.org/core-2.5.1/File.html#method-c-size-3F)'
     'File::size?' (Class Method)

'socket? (http://ruby-doc.org/core-2.5.1/File.html#method-c-socket-3F)'
     'File::socket?' (Class Method)

'spawn (http://ruby-doc.org/core-2.5.1/Process.html#method-c-spawn)'
     'Process::spawn' (Class Method)

'split (http://ruby-doc.org/core-2.5.1/File.html#method-c-split)'
     'File::split' (Class Method)

'sqrt (http://ruby-doc.org/core-2.5.1/Integer.html#method-c-sqrt)'
     'Integer::sqrt' (Class Method)

'sqrt (http://ruby-doc.org/core-2.5.1/Math.html#method-c-sqrt)'
     'Math::sqrt' (Class Method)

'srand (http://ruby-doc.org/core-2.5.1/Random.html#method-c-srand)'
     'Random::srand' (Class Method)

'start (http://ruby-doc.org/core-2.5.1/GC.html#method-c-start)'
     'GC::start' (Class Method)

'start (http://ruby-doc.org/core-2.5.1/Thread.html#method-c-start)'
     'Thread::start' (Class Method)

'stat (http://ruby-doc.org/core-2.5.1/File.html#method-c-stat)'
     'File::stat' (Class Method)

'stat (http://ruby-doc.org/core-2.5.1/GC.html#method-c-stat)'
     'GC::stat' (Class Method)

'stat (http://ruby-doc.org/core-2.5.1/RubyVM.html#method-c-stat)'
     'RubyVM::stat' (Class Method)

'stat (http://ruby-doc.org/core-2.5.1/TracePoint.html#method-c-stat)'
     'TracePoint::stat' (Class Method)

'sticky? (http://ruby-doc.org/core-2.5.1/File.html#method-c-sticky-3F)'
     'File::sticky?' (Class Method)

'stop (http://ruby-doc.org/core-2.5.1/Thread.html#method-c-stop)'
     'Thread::stop' (Class Method)

'store (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-store)'
     'ENV::store' (Class Method)

'stress (http://ruby-doc.org/core-2.5.1/GC.html#method-c-stress)'
     'GC::stress' (Class Method)

'stress= (http://ruby-doc.org/core-2.5.1/GC.html#method-c-stress-3D)'
     'GC::stress=' (Class Method)

'switch (http://ruby-doc.org/core-2.5.1/Process/GID.html#method-c-switch)'
     'Process/GID::switch' (Class Method)

'switch (http://ruby-doc.org/core-2.5.1/Process/UID.html#method-c-switch)'
     'Process/UID::switch' (Class Method)

'symlink (http://ruby-doc.org/core-2.5.1/File.html#method-c-symlink)'
     'File::symlink' (Class Method)

'symlink? (http://ruby-doc.org/core-2.5.1/File.html#method-c-symlink-3F)'
     'File::symlink?' (Class Method)

'sysopen (http://ruby-doc.org/core-2.5.1/IO.html#method-c-sysopen)'
     'IO::sysopen' (Class Method)

'tan (http://ruby-doc.org/core-2.5.1/Math.html#method-c-tan)'
     'Math::tan' (Class Method)

'tanh (http://ruby-doc.org/core-2.5.1/Math.html#method-c-tanh)'
     'Math::tanh' (Class Method)

'times (http://ruby-doc.org/core-2.5.1/Process.html#method-c-times)'
     'Process::times' (Class Method)

'to_a (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-to_a)'
     'ENV::to_a' (Class Method)

'to_h (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-to_h)'
     'ENV::to_h' (Class Method)

'to_hash (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-to_hash)'
     'ENV::to_hash' (Class Method)

'to_s (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-to_s)'
     'ENV::to_s' (Class Method)

'to_tty? (http://ruby-doc.org/core-2.5.1/Exception.html#method-c-to_tty-3F)'
     'Exception::to_tty?' (Class Method)

'total_time (http://ruby-doc.org/core-2.5.1/GC/Profiler.html#method-c-total_time)'
     'GC/Profiler::total_time' (Class Method)

'trace (http://ruby-doc.org/core-2.5.1/TracePoint.html#method-c-trace)'
     'TracePoint::trace' (Class Method)

'trap (http://ruby-doc.org/core-2.5.1/Signal.html#method-c-trap)'
     'Signal::trap' (Class Method)

'truncate (http://ruby-doc.org/core-2.5.1/File.html#method-c-truncate)'
     'File::truncate' (Class Method)

'try_convert (http://ruby-doc.org/core-2.5.1/Array.html#method-c-try_convert)'
     'Array::try_convert' (Class Method)

'try_convert (http://ruby-doc.org/core-2.5.1/Hash.html#method-c-try_convert)'
     'Hash::try_convert' (Class Method)

'try_convert (http://ruby-doc.org/core-2.5.1/IO.html#method-c-try_convert)'
     'IO::try_convert' (Class Method)

'try_convert (http://ruby-doc.org/core-2.5.1/Regexp.html#method-c-try_convert)'
     'Regexp::try_convert' (Class Method)

'try_convert (http://ruby-doc.org/core-2.5.1/String.html#method-c-try_convert)'
     'String::try_convert' (Class Method)

'uid (http://ruby-doc.org/core-2.5.1/Process.html#method-c-uid)'
     'Process::uid' (Class Method)

'uid= (http://ruby-doc.org/core-2.5.1/Process.html#method-c-uid-3D)'
     'Process::uid=' (Class Method)

'umask (http://ruby-doc.org/core-2.5.1/File.html#method-c-umask)'
     'File::umask' (Class Method)

'undefine_finalizer (http://ruby-doc.org/core-2.5.1/ObjectSpace.html#method-c-undefine_finalizer)'
     'ObjectSpace::undefine_finalizer' (Class Method)

'union (http://ruby-doc.org/core-2.5.1/Regexp.html#method-c-union)'
     'Regexp::union' (Class Method)

'unlink (http://ruby-doc.org/core-2.5.1/Dir.html#method-c-unlink)'
     'Dir::unlink' (Class Method)

'unlink (http://ruby-doc.org/core-2.5.1/File.html#method-c-unlink)'
     'File::unlink' (Class Method)

'update (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-update)'
     'ENV::update' (Class Method)

'urandom (http://ruby-doc.org/core-2.5.1/Random.html#method-c-urandom)'
     'Random::urandom' (Class Method)

'used_modules (http://ruby-doc.org/core-2.5.1/Module.html#method-c-used_modules)'
     'Module::used_modules' (Class Method)

'utc (http://ruby-doc.org/core-2.5.1/Time.html#method-c-utc)'
     'Time::utc' (Class Method)

'utime (http://ruby-doc.org/core-2.5.1/File.html#method-c-utime)'
     'File::utime' (Class Method)

'value? (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-value-3F)'
     'ENV::value?' (Class Method)

'values (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-values)'
     'ENV::values' (Class Method)

'values_at (http://ruby-doc.org/core-2.5.1/ENV.html#method-c-values_at)'
     'ENV::values_at' (Class Method)

'verify_internal_consistency (http://ruby-doc.org/core-2.5.1/GC.html#method-c-verify_internal_consistency)'
     'GC::verify_internal_consistency' (Class Method)

'wait (http://ruby-doc.org/core-2.5.1/Process.html#method-c-wait)'
     'Process::wait' (Class Method)

'wait2 (http://ruby-doc.org/core-2.5.1/Process.html#method-c-wait2)'
     'Process::wait2' (Class Method)

'waitall (http://ruby-doc.org/core-2.5.1/Process.html#method-c-waitall)'
     'Process::waitall' (Class Method)

'waitpid (http://ruby-doc.org/core-2.5.1/Process.html#method-c-waitpid)'
     'Process::waitpid' (Class Method)

'waitpid2 (http://ruby-doc.org/core-2.5.1/Process.html#method-c-waitpid2)'
     'Process::waitpid2' (Class Method)

'world_readable? (http://ruby-doc.org/core-2.5.1/File.html#method-c-world_readable-3F)'
     'File::world_readable?' (Class Method)

'world_writable? (http://ruby-doc.org/core-2.5.1/File.html#method-c-world_writable-3F)'
     'File::world_writable?' (Class Method)

'writable? (http://ruby-doc.org/core-2.5.1/File.html#method-c-writable-3F)'
     'File::writable?' (Class Method)

'writable_real? (http://ruby-doc.org/core-2.5.1/File.html#method-c-writable_real-3F)'
     'File::writable_real?' (Class Method)

'write (http://ruby-doc.org/core-2.5.1/IO.html#method-c-write)'
     'IO::write' (Class Method)

'yield (http://ruby-doc.org/core-2.5.1/Fiber.html#method-c-yield)'
     'Fiber::yield' (Class Method)

'zero? (http://ruby-doc.org/core-2.5.1/File.html#method-c-zero-3F)'
     'File::zero?' (Class Method)

'! (http://ruby-doc.org/core-2.5.1/BasicObject.html#method-i-21)'
     'BasicObject#!' (Instance Method)

'!= (http://ruby-doc.org/core-2.5.1/BasicObject.html#method-i-21-3D)'
     'BasicObject#!=' (Instance Method)

'!~ (http://ruby-doc.org/core-2.5.1/Object.html#method-i-21-7E)'
     'Object#!~' (Instance Method)

'% (http://ruby-doc.org/core-2.5.1/Float.html#method-i-25)'
     'Float#%' (Instance Method)

'% (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-25)'
     'Integer#%' (Instance Method)

'% (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-25)'
     'Numeric#%' (Instance Method)

'% (http://ruby-doc.org/core-2.5.1/String.html#method-i-25)'
     'String#%' (Instance Method)

'& (http://ruby-doc.org/core-2.5.1/Array.html#method-i-26)'
     'Array#&' (Instance Method)

'& (http://ruby-doc.org/core-2.5.1/FalseClass.html#method-i-26)'
     'FalseClass#&' (Instance Method)

'& (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-26)'
     'Integer#&' (Instance Method)

'& (http://ruby-doc.org/core-2.5.1/NilClass.html#method-i-26)'
     'NilClass#&' (Instance Method)

'& (http://ruby-doc.org/core-2.5.1/Process/Status.html#method-i-26)'
     'Process/Status#&' (Instance Method)

'& (http://ruby-doc.org/core-2.5.1/TrueClass.html#method-i-26)'
     'TrueClass#&' (Instance Method)

'* (http://ruby-doc.org/core-2.5.1/Array.html#method-i-2A)'
     'Array#*' (Instance Method)

'* (http://ruby-doc.org/core-2.5.1/Complex.html#method-i-2A)'
     'Complex#*' (Instance Method)

'* (http://ruby-doc.org/core-2.5.1/Float.html#method-i-2A)'
     'Float#*' (Instance Method)

'* (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-2A)'
     'Integer#*' (Instance Method)

'* (http://ruby-doc.org/core-2.5.1/Rational.html#method-i-2A)'
     'Rational#*' (Instance Method)

'* (http://ruby-doc.org/core-2.5.1/String.html#method-i-2A)'
     'String#*' (Instance Method)

'** (http://ruby-doc.org/core-2.5.1/Complex.html#method-i-2A-2A)'
     'Complex#**' (Instance Method)

'** (http://ruby-doc.org/core-2.5.1/Float.html#method-i-2A-2A)'
     'Float#**' (Instance Method)

'** (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-2A-2A)'
     'Integer#**' (Instance Method)

'** (http://ruby-doc.org/core-2.5.1/Rational.html#method-i-2A-2A)'
     'Rational#**' (Instance Method)

'+ (http://ruby-doc.org/core-2.5.1/Array.html#method-i-2B)'
     'Array#+' (Instance Method)

'+ (http://ruby-doc.org/core-2.5.1/Complex.html#method-i-2B)'
     'Complex#+' (Instance Method)

'+ (http://ruby-doc.org/core-2.5.1/Float.html#method-i-2B)'
     'Float#+' (Instance Method)

'+ (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-2B)'
     'Integer#+' (Instance Method)

'+ (http://ruby-doc.org/core-2.5.1/Rational.html#method-i-2B)'
     'Rational#+' (Instance Method)

'+ (http://ruby-doc.org/core-2.5.1/String.html#method-i-2B)'
     'String#+' (Instance Method)

'+ (http://ruby-doc.org/core-2.5.1/Time.html#method-i-2B)'
     'Time#+' (Instance Method)

'+0 (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-2B0)'
     'Numeric#+0' (Instance Method)

'+0 (http://ruby-doc.org/core-2.5.1/String.html#method-i-2B0)'
     'String#+0' (Instance Method)

'- (http://ruby-doc.org/core-2.5.1/Array.html#method-i-2D)'
     'Array#-' (Instance Method)

'- (http://ruby-doc.org/core-2.5.1/Complex.html#method-i-2D)'
     'Complex#-' (Instance Method)

'- (http://ruby-doc.org/core-2.5.1/Float.html#method-i-2D)'
     'Float#-' (Instance Method)

'- (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-2D)'
     'Integer#-' (Instance Method)

'- (http://ruby-doc.org/core-2.5.1/Rational.html#method-i-2D)'
     'Rational#-' (Instance Method)

'- (http://ruby-doc.org/core-2.5.1/Time.html#method-i-2D)'
     'Time#-' (Instance Method)

'-0 (http://ruby-doc.org/core-2.5.1/Complex.html#method-i-2D0)'
     'Complex#-0' (Instance Method)

'-0 (http://ruby-doc.org/core-2.5.1/Float.html#method-i-2D0)'
     'Float#-0' (Instance Method)

'-0 (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-2D0)'
     'Integer#-0' (Instance Method)

'-0 (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-2D0)'
     'Numeric#-0' (Instance Method)

'-0 (http://ruby-doc.org/core-2.5.1/Rational.html#method-i-2D0)'
     'Rational#-0' (Instance Method)

'-0 (http://ruby-doc.org/core-2.5.1/String.html#method-i-2D0)'
     'String#-0' (Instance Method)

'/ (http://ruby-doc.org/core-2.5.1/Complex.html#method-i-2F)'
     'Complex#/' (Instance Method)

'/ (http://ruby-doc.org/core-2.5.1/Float.html#method-i-2F)'
     'Float#/' (Instance Method)

'/ (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-2F)'
     'Integer#/' (Instance Method)

'/ (http://ruby-doc.org/core-2.5.1/Rational.html#method-i-2F)'
     'Rational#/' (Instance Method)

'< (http://ruby-doc.org/core-2.5.1/Comparable.html#method-i-3C)'
     'Comparable#<' (Instance Method)

'< (http://ruby-doc.org/core-2.5.1/Float.html#method-i-3C)'
     'Float#<' (Instance Method)

'< (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-3C)'
     'Hash#<' (Instance Method)

'< (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-3C)'
     'Integer#<' (Instance Method)

'< (http://ruby-doc.org/core-2.5.1/Module.html#method-i-3C)'
     'Module#<' (Instance Method)

'<< (http://ruby-doc.org/core-2.5.1/Array.html#method-i-3C-3C)'
     'Array#<<' (Instance Method)

'<< (http://ruby-doc.org/core-2.5.1/IO.html#method-i-3C-3C)'
     'IO#<<' (Instance Method)

'<< (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-3C-3C)'
     'Integer#<<' (Instance Method)

'<< (http://ruby-doc.org/core-2.5.1/Queue.html#method-i-3C-3C)'
     'Queue#<<' (Instance Method)

'<< (http://ruby-doc.org/core-2.5.1/SizedQueue.html#method-i-3C-3C)'
     'SizedQueue#<<' (Instance Method)

'<< (http://ruby-doc.org/core-2.5.1/String.html#method-i-3C-3C)'
     'String#<<' (Instance Method)

'<= (http://ruby-doc.org/core-2.5.1/Comparable.html#method-i-3C-3D)'
     'Comparable#<=' (Instance Method)

'<= (http://ruby-doc.org/core-2.5.1/Float.html#method-i-3C-3D)'
     'Float#<=' (Instance Method)

'<= (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-3C-3D)'
     'Hash#<=' (Instance Method)

'<= (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-3C-3D)'
     'Integer#<=' (Instance Method)

'<= (http://ruby-doc.org/core-2.5.1/Module.html#method-i-3C-3D)'
     'Module#<=' (Instance Method)

'<=> (http://ruby-doc.org/core-2.5.1/Array.html#method-i-3C-3D-3E)'
     'Array#<=>' (Instance Method)

'<=> (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-3C-3D-3E)'
     'File/Stat#<=>' (Instance Method)

'<=> (http://ruby-doc.org/core-2.5.1/Float.html#method-i-3C-3D-3E)'
     'Float#<=>' (Instance Method)

'<=> (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-3C-3D-3E)'
     'Integer#<=>' (Instance Method)

'<=> (http://ruby-doc.org/core-2.5.1/Module.html#method-i-3C-3D-3E)'
     'Module#<=>' (Instance Method)

'<=> (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-3C-3D-3E)'
     'Numeric#<=>' (Instance Method)

'<=> (http://ruby-doc.org/core-2.5.1/Object.html#method-i-3C-3D-3E)'
     'Object#<=>' (Instance Method)

'<=> (http://ruby-doc.org/core-2.5.1/Rational.html#method-i-3C-3D-3E)'
     'Rational#<=>' (Instance Method)

'<=> (http://ruby-doc.org/core-2.5.1/String.html#method-i-3C-3D-3E)'
     'String#<=>' (Instance Method)

'<=> (http://ruby-doc.org/core-2.5.1/Symbol.html#method-i-3C-3D-3E)'
     'Symbol#<=>' (Instance Method)

'<=> (http://ruby-doc.org/core-2.5.1/Time.html#method-i-3C-3D-3E)'
     'Time#<=>' (Instance Method)

'== (http://ruby-doc.org/core-2.5.1/Array.html#method-i-3D-3D)'
     'Array#==' (Instance Method)

'== (http://ruby-doc.org/core-2.5.1/BasicObject.html#method-i-3D-3D)'
     'BasicObject#==' (Instance Method)

'== (http://ruby-doc.org/core-2.5.1/Comparable.html#method-i-3D-3D)'
     'Comparable#==' (Instance Method)

'== (http://ruby-doc.org/core-2.5.1/Complex.html#method-i-3D-3D)'
     'Complex#==' (Instance Method)

'== (http://ruby-doc.org/core-2.5.1/Encoding/Converter.html#method-i-3D-3D)'
     'Encoding/Converter#==' (Instance Method)

'== (http://ruby-doc.org/core-2.5.1/Exception.html#method-i-3D-3D)'
     'Exception#==' (Instance Method)

'== (http://ruby-doc.org/core-2.5.1/Float.html#method-i-3D-3D)'
     'Float#==' (Instance Method)

'== (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-3D-3D)'
     'Hash#==' (Instance Method)

'== (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-3D-3D)'
     'Integer#==' (Instance Method)

'== (http://ruby-doc.org/core-2.5.1/MatchData.html#method-i-3D-3D)'
     'MatchData#==' (Instance Method)

'== (http://ruby-doc.org/core-2.5.1/Method.html#method-i-3D-3D)'
     'Method#==' (Instance Method)

'== (http://ruby-doc.org/core-2.5.1/Module.html#method-i-3D-3D)'
     'Module#==' (Instance Method)

'== (http://ruby-doc.org/core-2.5.1/Process/Status.html#method-i-3D-3D)'
     'Process/Status#==' (Instance Method)

'== (http://ruby-doc.org/core-2.5.1/Random.html#method-i-3D-3D)'
     'Random#==' (Instance Method)

'== (http://ruby-doc.org/core-2.5.1/Range.html#method-i-3D-3D)'
     'Range#==' (Instance Method)

'== (http://ruby-doc.org/core-2.5.1/Rational.html#method-i-3D-3D)'
     'Rational#==' (Instance Method)

'== (http://ruby-doc.org/core-2.5.1/Regexp.html#method-i-3D-3D)'
     'Regexp#==' (Instance Method)

'== (http://ruby-doc.org/core-2.5.1/String.html#method-i-3D-3D)'
     'String#==' (Instance Method)

'== (http://ruby-doc.org/core-2.5.1/Struct.html#method-i-3D-3D)'
     'Struct#==' (Instance Method)

'== (http://ruby-doc.org/core-2.5.1/Symbol.html#method-i-3D-3D)'
     'Symbol#==' (Instance Method)

'== (http://ruby-doc.org/core-2.5.1/UnboundMethod.html#method-i-3D-3D)'
     'UnboundMethod#==' (Instance Method)

'=== (http://ruby-doc.org/core-2.5.1/FalseClass.html#method-i-3D-3D-3D)'
     'FalseClass#===' (Instance Method)

'=== (http://ruby-doc.org/core-2.5.1/Float.html#method-i-3D-3D-3D)'
     'Float#===' (Instance Method)

'=== (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-3D-3D-3D)'
     'Integer#===' (Instance Method)

'=== (http://ruby-doc.org/core-2.5.1/Method.html#method-i-3D-3D-3D)'
     'Method#===' (Instance Method)

'=== (http://ruby-doc.org/core-2.5.1/Module.html#method-i-3D-3D-3D)'
     'Module#===' (Instance Method)

'=== (http://ruby-doc.org/core-2.5.1/NilClass.html#method-i-3D-3D-3D)'
     'NilClass#===' (Instance Method)

'=== (http://ruby-doc.org/core-2.5.1/Object.html#method-i-3D-3D-3D)'
     'Object#===' (Instance Method)

'=== (http://ruby-doc.org/core-2.5.1/Proc.html#method-i-3D-3D-3D)'
     'Proc#===' (Instance Method)

'=== (http://ruby-doc.org/core-2.5.1/Range.html#method-i-3D-3D-3D)'
     'Range#===' (Instance Method)

'=== (http://ruby-doc.org/core-2.5.1/Regexp.html#method-i-3D-3D-3D)'
     'Regexp#===' (Instance Method)

'=== (http://ruby-doc.org/core-2.5.1/String.html#method-i-3D-3D-3D)'
     'String#===' (Instance Method)

'=== (http://ruby-doc.org/core-2.5.1/Symbol.html#method-i-3D-3D-3D)'
     'Symbol#===' (Instance Method)

'=== (http://ruby-doc.org/core-2.5.1/TrueClass.html#method-i-3D-3D-3D)'
     'TrueClass#===' (Instance Method)

'=~ (http://ruby-doc.org/core-2.5.1/Object.html#method-i-3D-7E)'
     'Object#=~' (Instance Method)

'=~ (http://ruby-doc.org/core-2.5.1/Regexp.html#method-i-3D-7E)'
     'Regexp#=~' (Instance Method)

'=~ (http://ruby-doc.org/core-2.5.1/String.html#method-i-3D-7E)'
     'String#=~' (Instance Method)

'=~ (http://ruby-doc.org/core-2.5.1/Symbol.html#method-i-3D-7E)'
     'Symbol#=~' (Instance Method)

'> (http://ruby-doc.org/core-2.5.1/Comparable.html#method-i-3E)'
     'Comparable#>' (Instance Method)

'> (http://ruby-doc.org/core-2.5.1/Float.html#method-i-3E)'
     'Float#>' (Instance Method)

'> (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-3E)'
     'Hash#>' (Instance Method)

'> (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-3E)'
     'Integer#>' (Instance Method)

'> (http://ruby-doc.org/core-2.5.1/Module.html#method-i-3E)'
     'Module#>' (Instance Method)

'>= (http://ruby-doc.org/core-2.5.1/Comparable.html#method-i-3E-3D)'
     'Comparable#>=' (Instance Method)

'>= (http://ruby-doc.org/core-2.5.1/Float.html#method-i-3E-3D)'
     'Float#>=' (Instance Method)

'>= (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-3E-3D)'
     'Hash#>=' (Instance Method)

'>= (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-3E-3D)'
     'Integer#>=' (Instance Method)

'>= (http://ruby-doc.org/core-2.5.1/Module.html#method-i-3E-3D)'
     'Module#>=' (Instance Method)

'>> (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-3E-3E)'
     'Integer#>>' (Instance Method)

'>> (http://ruby-doc.org/core-2.5.1/Process/Status.html#method-i-3E-3E)'
     'Process/Status#>>' (Instance Method)

'Array (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-Array)'
     'Kernel#Array' (Instance Method)

'Complex (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-Complex)'
     'Kernel#Complex' (Instance Method)

'Float (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-Float)'
     'Kernel#Float' (Instance Method)

'Hash (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-Hash)'
     'Kernel#Hash' (Instance Method)

'Integer (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-Integer)'
     'Kernel#Integer' (Instance Method)

'Rational (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-Rational)'
     'Kernel#Rational' (Instance Method)

'String (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-String)'
     'Kernel#String' (Instance Method)

'[] (http://ruby-doc.org/core-2.5.1/Array.html#method-i-5B-5D)'
     'Array#[]' (Instance Method)

'[] (http://ruby-doc.org/core-2.5.1/Continuation.html#method-i-5B-5D)'
     'Continuation#[]' (Instance Method)

'[] (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-5B-5D)'
     'Hash#[]' (Instance Method)

'[] (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-5B-5D)'
     'Integer#[]' (Instance Method)

'[] (http://ruby-doc.org/core-2.5.1/MatchData.html#method-i-5B-5D)'
     'MatchData#[]' (Instance Method)

'[] (http://ruby-doc.org/core-2.5.1/Method.html#method-i-5B-5D)'
     'Method#[]' (Instance Method)

'[] (http://ruby-doc.org/core-2.5.1/ObjectSpace/WeakMap.html#method-i-5B-5D)'
     'ObjectSpace/WeakMap#[]' (Instance Method)

'[] (http://ruby-doc.org/core-2.5.1/Proc.html#method-i-5B-5D)'
     'Proc#[]' (Instance Method)

'[] (http://ruby-doc.org/core-2.5.1/String.html#method-i-5B-5D)'
     'String#[]' (Instance Method)

'[] (http://ruby-doc.org/core-2.5.1/Struct.html#method-i-5B-5D)'
     'Struct#[]' (Instance Method)

'[] (http://ruby-doc.org/core-2.5.1/Symbol.html#method-i-5B-5D)'
     'Symbol#[]' (Instance Method)

'[] (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-5B-5D)'
     'Thread#[]' (Instance Method)

'[]= (http://ruby-doc.org/core-2.5.1/Array.html#method-i-5B-5D-3D)'
     'Array#[]=' (Instance Method)

'[]= (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-5B-5D-3D)'
     'Hash#[]=' (Instance Method)

'[]= (http://ruby-doc.org/core-2.5.1/ObjectSpace/WeakMap.html#method-i-5B-5D-3D)'
     'ObjectSpace/WeakMap#[]=' (Instance Method)

'[]= (http://ruby-doc.org/core-2.5.1/String.html#method-i-5B-5D-3D)'
     'String#[]=' (Instance Method)

'[]= (http://ruby-doc.org/core-2.5.1/Struct.html#method-i-5B-5D-3D)'
     'Struct#[]=' (Instance Method)

'[]= (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-5B-5D-3D)'
     'Thread#[]=' (Instance Method)

'^ (http://ruby-doc.org/core-2.5.1/FalseClass.html#method-i-5E)'
     'FalseClass#^' (Instance Method)

'^ (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-5E)'
     'Integer#^' (Instance Method)

'^ (http://ruby-doc.org/core-2.5.1/NilClass.html#method-i-5E)'
     'NilClass#^' (Instance Method)

'^ (http://ruby-doc.org/core-2.5.1/TrueClass.html#method-i-5E)'
     'TrueClass#^' (Instance Method)

'__callee__ (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-__callee__)'
     'Kernel#__callee__' (Instance Method)

'__dir__ (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-__dir__)'
     'Kernel#__dir__' (Instance Method)

'__id__ (http://ruby-doc.org/core-2.5.1/BasicObject.html#method-i-__id__)'
     'BasicObject#__id__' (Instance Method)

'__method__ (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-__method__)'
     'Kernel#__method__' (Instance Method)

'__send__ (http://ruby-doc.org/core-2.5.1/BasicObject.html#method-i-__send__)'
     'BasicObject#__send__' (Instance Method)

'` (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-`)'
     'Kernel#`' (Instance Method)

'abort (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-abort)'
     'Kernel#abort' (Instance Method)

'abort_on_exception (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-abort_on_exception)'
     'Thread#abort_on_exception' (Instance Method)

'abort_on_exception= (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-abort_on_exception-3D)'
     'Thread#abort_on_exception=' (Instance Method)

'abs (http://ruby-doc.org/core-2.5.1/Complex.html#method-i-abs)'
     'Complex#abs' (Instance Method)

'abs (http://ruby-doc.org/core-2.5.1/Float.html#method-i-abs)'
     'Float#abs' (Instance Method)

'abs (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-abs)'
     'Integer#abs' (Instance Method)

'abs (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-abs)'
     'Numeric#abs' (Instance Method)

'abs (http://ruby-doc.org/core-2.5.1/Rational.html#method-i-abs)'
     'Rational#abs' (Instance Method)

'abs2 (http://ruby-doc.org/core-2.5.1/Complex.html#method-i-abs2)'
     'Complex#abs2' (Instance Method)

'abs2 (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-abs2)'
     'Numeric#abs2' (Instance Method)

'absolute_path (http://ruby-doc.org/core-2.5.1/RubyVM/InstructionSequence.html#method-i-absolute_path)'
     'RubyVM/InstructionSequence#absolute_path' (Instance Method)

'absolute_path (http://ruby-doc.org/core-2.5.1/Thread/Backtrace/Location.html#method-i-absolute_path)'
     'Thread/Backtrace/Location#absolute_path' (Instance Method)

'add (http://ruby-doc.org/core-2.5.1/ThreadGroup.html#method-i-add)'
     'ThreadGroup#add' (Instance Method)

'add_trace_func (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-add_trace_func)'
     'Thread#add_trace_func' (Instance Method)

'advise (http://ruby-doc.org/core-2.5.1/IO.html#method-i-advise)'
     'IO#advise' (Instance Method)

'alias_method (http://ruby-doc.org/core-2.5.1/Module.html#method-i-alias_method)'
     'Module#alias_method' (Instance Method)

'alive? (http://ruby-doc.org/core-2.5.1/Fiber.html#method-i-alive-3F)'
     'Fiber#alive?' (Instance Method)

'alive? (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-alive-3F)'
     'Thread#alive?' (Instance Method)

'all? (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-all-3F)'
     'Enumerable#all?' (Instance Method)

'allbits? (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-allbits-3F)'
     'Integer#allbits?' (Instance Method)

'allocate (http://ruby-doc.org/core-2.5.1/Class.html#method-i-allocate)'
     'Class#allocate' (Instance Method)

'ancestors (http://ruby-doc.org/core-2.5.1/Module.html#method-i-ancestors)'
     'Module#ancestors' (Instance Method)

'angle (http://ruby-doc.org/core-2.5.1/Complex.html#method-i-angle)'
     'Complex#angle' (Instance Method)

'angle (http://ruby-doc.org/core-2.5.1/Float.html#method-i-angle)'
     'Float#angle' (Instance Method)

'angle (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-angle)'
     'Numeric#angle' (Instance Method)

'any? (http://ruby-doc.org/core-2.5.1/Array.html#method-i-any-3F)'
     'Array#any?' (Instance Method)

'any? (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-any-3F)'
     'Enumerable#any?' (Instance Method)

'any? (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-any-3F)'
     'Hash#any?' (Instance Method)

'anybits? (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-anybits-3F)'
     'Integer#anybits?' (Instance Method)

'append (http://ruby-doc.org/core-2.5.1/Array.html#method-i-append)'
     'Array#append' (Instance Method)

'append_features (http://ruby-doc.org/core-2.5.1/Module.html#method-i-append_features)'
     'Module#append_features' (Instance Method)

'arg (http://ruby-doc.org/core-2.5.1/Complex.html#method-i-arg)'
     'Complex#arg' (Instance Method)

'arg (http://ruby-doc.org/core-2.5.1/Float.html#method-i-arg)'
     'Float#arg' (Instance Method)

'arg (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-arg)'
     'Numeric#arg' (Instance Method)

'args (http://ruby-doc.org/core-2.5.1/NoMethodError.html#method-i-args)'
     'NoMethodError#args' (Instance Method)

'argv (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-argv)'
     'ARGF#argv' (Instance Method)

'arity (http://ruby-doc.org/core-2.5.1/Method.html#method-i-arity)'
     'Method#arity' (Instance Method)

'arity (http://ruby-doc.org/core-2.5.1/Proc.html#method-i-arity)'
     'Proc#arity' (Instance Method)

'arity (http://ruby-doc.org/core-2.5.1/UnboundMethod.html#method-i-arity)'
     'UnboundMethod#arity' (Instance Method)

'ascii_compatible? (http://ruby-doc.org/core-2.5.1/Encoding.html#method-i-ascii_compatible-3F)'
     'Encoding#ascii_compatible?' (Instance Method)

'ascii_only? (http://ruby-doc.org/core-2.5.1/String.html#method-i-ascii_only-3F)'
     'String#ascii_only?' (Instance Method)

'asctime (http://ruby-doc.org/core-2.5.1/Time.html#method-i-asctime)'
     'Time#asctime' (Instance Method)

'assoc (http://ruby-doc.org/core-2.5.1/Array.html#method-i-assoc)'
     'Array#assoc' (Instance Method)

'assoc (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-assoc)'
     'Hash#assoc' (Instance Method)

'at (http://ruby-doc.org/core-2.5.1/Array.html#method-i-at)'
     'Array#at' (Instance Method)

'at_exit (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-at_exit)'
     'Kernel#at_exit' (Instance Method)

'atime (http://ruby-doc.org/core-2.5.1/File.html#method-i-atime)'
     'File#atime' (Instance Method)

'atime (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-atime)'
     'File/Stat#atime' (Instance Method)

'attr (http://ruby-doc.org/core-2.5.1/Module.html#method-i-attr)'
     'Module#attr' (Instance Method)

'attr_accessor (http://ruby-doc.org/core-2.5.1/Module.html#method-i-attr_accessor)'
     'Module#attr_accessor' (Instance Method)

'attr_reader (http://ruby-doc.org/core-2.5.1/Module.html#method-i-attr_reader)'
     'Module#attr_reader' (Instance Method)

'attr_writer (http://ruby-doc.org/core-2.5.1/Module.html#method-i-attr_writer)'
     'Module#attr_writer' (Instance Method)

'autoclose= (http://ruby-doc.org/core-2.5.1/IO.html#method-i-autoclose-3D)'
     'IO#autoclose=' (Instance Method)

'autoclose? (http://ruby-doc.org/core-2.5.1/IO.html#method-i-autoclose-3F)'
     'IO#autoclose?' (Instance Method)

'autoload (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-autoload)'
     'Kernel#autoload' (Instance Method)

'autoload (http://ruby-doc.org/core-2.5.1/Module.html#method-i-autoload)'
     'Module#autoload' (Instance Method)

'autoload? (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-autoload-3F)'
     'Kernel#autoload?' (Instance Method)

'autoload? (http://ruby-doc.org/core-2.5.1/Module.html#method-i-autoload-3F)'
     'Module#autoload?' (Instance Method)

'b (http://ruby-doc.org/core-2.5.1/String.html#method-i-b)'
     'String#b' (Instance Method)

'backtrace (http://ruby-doc.org/core-2.5.1/Exception.html#method-i-backtrace)'
     'Exception#backtrace' (Instance Method)

'backtrace (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-backtrace)'
     'Thread#backtrace' (Instance Method)

'backtrace_locations (http://ruby-doc.org/core-2.5.1/Exception.html#method-i-backtrace_locations)'
     'Exception#backtrace_locations' (Instance Method)

'backtrace_locations (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-backtrace_locations)'
     'Thread#backtrace_locations' (Instance Method)

'base_label (http://ruby-doc.org/core-2.5.1/RubyVM/InstructionSequence.html#method-i-base_label)'
     'RubyVM/InstructionSequence#base_label' (Instance Method)

'base_label (http://ruby-doc.org/core-2.5.1/Thread/Backtrace/Location.html#method-i-base_label)'
     'Thread/Backtrace/Location#base_label' (Instance Method)

'begin (http://ruby-doc.org/core-2.5.1/MatchData.html#method-i-begin)'
     'MatchData#begin' (Instance Method)

'begin (http://ruby-doc.org/core-2.5.1/Range.html#method-i-begin)'
     'Range#begin' (Instance Method)

'between? (http://ruby-doc.org/core-2.5.1/Comparable.html#method-i-between-3F)'
     'Comparable#between?' (Instance Method)

'bind (http://ruby-doc.org/core-2.5.1/UnboundMethod.html#method-i-bind)'
     'UnboundMethod#bind' (Instance Method)

'binding (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-binding)'
     'Kernel#binding' (Instance Method)

'binding (http://ruby-doc.org/core-2.5.1/Proc.html#method-i-binding)'
     'Proc#binding' (Instance Method)

'binding (http://ruby-doc.org/core-2.5.1/TracePoint.html#method-i-binding)'
     'TracePoint#binding' (Instance Method)

'binmode (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-binmode)'
     'ARGF#binmode' (Instance Method)

'binmode (http://ruby-doc.org/core-2.5.1/IO.html#method-i-binmode)'
     'IO#binmode' (Instance Method)

'binmode? (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-binmode-3F)'
     'ARGF#binmode?' (Instance Method)

'binmode? (http://ruby-doc.org/core-2.5.1/IO.html#method-i-binmode-3F)'
     'IO#binmode?' (Instance Method)

'birthtime (http://ruby-doc.org/core-2.5.1/File.html#method-i-birthtime)'
     'File#birthtime' (Instance Method)

'birthtime (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-birthtime)'
     'File/Stat#birthtime' (Instance Method)

'bit_length (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-bit_length)'
     'Integer#bit_length' (Instance Method)

'blksize (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-blksize)'
     'File/Stat#blksize' (Instance Method)

'block_given? (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-block_given-3F)'
     'Kernel#block_given?' (Instance Method)

'blockdev? (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-blockdev-3F)'
     'File/Stat#blockdev?' (Instance Method)

'blockdev? (http://ruby-doc.org/core-2.5.1/FileTest.html#method-i-blockdev-3F)'
     'FileTest#blockdev?' (Instance Method)

'blocks (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-blocks)'
     'File/Stat#blocks' (Instance Method)

'broadcast (http://ruby-doc.org/core-2.5.1/ConditionVariable.html#method-i-broadcast)'
     'ConditionVariable#broadcast' (Instance Method)

'bsearch (http://ruby-doc.org/core-2.5.1/Array.html#method-i-bsearch)'
     'Array#bsearch' (Instance Method)

'bsearch (http://ruby-doc.org/core-2.5.1/Range.html#method-i-bsearch)'
     'Range#bsearch' (Instance Method)

'bsearch_index (http://ruby-doc.org/core-2.5.1/Array.html#method-i-bsearch_index)'
     'Array#bsearch_index' (Instance Method)

'bytes (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-bytes)'
     'ARGF#bytes' (Instance Method)

'bytes (http://ruby-doc.org/core-2.5.1/IO.html#method-i-bytes)'
     'IO#bytes' (Instance Method)

'bytes (http://ruby-doc.org/core-2.5.1/Random.html#method-i-bytes)'
     'Random#bytes' (Instance Method)

'bytes (http://ruby-doc.org/core-2.5.1/String.html#method-i-bytes)'
     'String#bytes' (Instance Method)

'bytesize (http://ruby-doc.org/core-2.5.1/String.html#method-i-bytesize)'
     'String#bytesize' (Instance Method)

'byteslice (http://ruby-doc.org/core-2.5.1/String.html#method-i-byteslice)'
     'String#byteslice' (Instance Method)

'call (http://ruby-doc.org/core-2.5.1/Continuation.html#method-i-call)'
     'Continuation#call' (Instance Method)

'call (http://ruby-doc.org/core-2.5.1/Method.html#method-i-call)'
     'Method#call' (Instance Method)

'call (http://ruby-doc.org/core-2.5.1/Proc.html#method-i-call)'
     'Proc#call' (Instance Method)

'callcc (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-callcc)'
     'Kernel#callcc' (Instance Method)

'callee_id (http://ruby-doc.org/core-2.5.1/TracePoint.html#method-i-callee_id)'
     'TracePoint#callee_id' (Instance Method)

'caller (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-caller)'
     'Kernel#caller' (Instance Method)

'caller_locations (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-caller_locations)'
     'Kernel#caller_locations' (Instance Method)

'capitalize (http://ruby-doc.org/core-2.5.1/String.html#method-i-capitalize)'
     'String#capitalize' (Instance Method)

'capitalize (http://ruby-doc.org/core-2.5.1/Symbol.html#method-i-capitalize)'
     'Symbol#capitalize' (Instance Method)

'capitalize! (http://ruby-doc.org/core-2.5.1/String.html#method-i-capitalize-21)'
     'String#capitalize!' (Instance Method)

'captures (http://ruby-doc.org/core-2.5.1/MatchData.html#method-i-captures)'
     'MatchData#captures' (Instance Method)

'casecmp (http://ruby-doc.org/core-2.5.1/String.html#method-i-casecmp)'
     'String#casecmp' (Instance Method)

'casecmp (http://ruby-doc.org/core-2.5.1/Symbol.html#method-i-casecmp)'
     'Symbol#casecmp' (Instance Method)

'casecmp? (http://ruby-doc.org/core-2.5.1/String.html#method-i-casecmp-3F)'
     'String#casecmp?' (Instance Method)

'casecmp? (http://ruby-doc.org/core-2.5.1/Symbol.html#method-i-casecmp-3F)'
     'Symbol#casecmp?' (Instance Method)

'casefold? (http://ruby-doc.org/core-2.5.1/Regexp.html#method-i-casefold-3F)'
     'Regexp#casefold?' (Instance Method)

'catch (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-catch)'
     'Kernel#catch' (Instance Method)

'cause (http://ruby-doc.org/core-2.5.1/Exception.html#method-i-cause)'
     'Exception#cause' (Instance Method)

'ceil (http://ruby-doc.org/core-2.5.1/Float.html#method-i-ceil)'
     'Float#ceil' (Instance Method)

'ceil (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-ceil)'
     'Integer#ceil' (Instance Method)

'ceil (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-ceil)'
     'Numeric#ceil' (Instance Method)

'ceil (http://ruby-doc.org/core-2.5.1/Rational.html#method-i-ceil)'
     'Rational#ceil' (Instance Method)

'center (http://ruby-doc.org/core-2.5.1/String.html#method-i-center)'
     'String#center' (Instance Method)

'chardev? (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-chardev-3F)'
     'File/Stat#chardev?' (Instance Method)

'chardev? (http://ruby-doc.org/core-2.5.1/FileTest.html#method-i-chardev-3F)'
     'FileTest#chardev?' (Instance Method)

'chars (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-chars)'
     'ARGF#chars' (Instance Method)

'chars (http://ruby-doc.org/core-2.5.1/IO.html#method-i-chars)'
     'IO#chars' (Instance Method)

'chars (http://ruby-doc.org/core-2.5.1/String.html#method-i-chars)'
     'String#chars' (Instance Method)

'chmod (http://ruby-doc.org/core-2.5.1/File.html#method-i-chmod)'
     'File#chmod' (Instance Method)

'chomp (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-chomp)'
     'Kernel#chomp' (Instance Method)

'chomp (http://ruby-doc.org/core-2.5.1/String.html#method-i-chomp)'
     'String#chomp' (Instance Method)

'chomp! (http://ruby-doc.org/core-2.5.1/String.html#method-i-chomp-21)'
     'String#chomp!' (Instance Method)

'chop (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-chop)'
     'Kernel#chop' (Instance Method)

'chop (http://ruby-doc.org/core-2.5.1/String.html#method-i-chop)'
     'String#chop' (Instance Method)

'chop! (http://ruby-doc.org/core-2.5.1/String.html#method-i-chop-21)'
     'String#chop!' (Instance Method)

'chown (http://ruby-doc.org/core-2.5.1/File.html#method-i-chown)'
     'File#chown' (Instance Method)

'chr (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-chr)'
     'Integer#chr' (Instance Method)

'chr (http://ruby-doc.org/core-2.5.1/String.html#method-i-chr)'
     'String#chr' (Instance Method)

'chunk (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-chunk)'
     'Enumerable#chunk' (Instance Method)

'chunk (http://ruby-doc.org/core-2.5.1/Enumerator/Lazy.html#method-i-chunk)'
     'Enumerator/Lazy#chunk' (Instance Method)

'chunk_while (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-chunk_while)'
     'Enumerable#chunk_while' (Instance Method)

'chunk_while (http://ruby-doc.org/core-2.5.1/Enumerator/Lazy.html#method-i-chunk_while)'
     'Enumerator/Lazy#chunk_while' (Instance Method)

'clamp (http://ruby-doc.org/core-2.5.1/Comparable.html#method-i-clamp)'
     'Comparable#clamp' (Instance Method)

'class (http://ruby-doc.org/core-2.5.1/Object.html#method-i-class)'
     'Object#class' (Instance Method)

'class_eval (http://ruby-doc.org/core-2.5.1/Module.html#method-i-class_eval)'
     'Module#class_eval' (Instance Method)

'class_exec (http://ruby-doc.org/core-2.5.1/Module.html#method-i-class_exec)'
     'Module#class_exec' (Instance Method)

'class_variable_defined? (http://ruby-doc.org/core-2.5.1/Module.html#method-i-class_variable_defined-3F)'
     'Module#class_variable_defined?' (Instance Method)

'class_variable_get (http://ruby-doc.org/core-2.5.1/Module.html#method-i-class_variable_get)'
     'Module#class_variable_get' (Instance Method)

'class_variable_set (http://ruby-doc.org/core-2.5.1/Module.html#method-i-class_variable_set)'
     'Module#class_variable_set' (Instance Method)

'class_variables (http://ruby-doc.org/core-2.5.1/Module.html#method-i-class_variables)'
     'Module#class_variables' (Instance Method)

'clear (http://ruby-doc.org/core-2.5.1/Array.html#method-i-clear)'
     'Array#clear' (Instance Method)

'clear (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-clear)'
     'Hash#clear' (Instance Method)

'clear (http://ruby-doc.org/core-2.5.1/Queue.html#method-i-clear)'
     'Queue#clear' (Instance Method)

'clear (http://ruby-doc.org/core-2.5.1/SizedQueue.html#method-i-clear)'
     'SizedQueue#clear' (Instance Method)

'clear (http://ruby-doc.org/core-2.5.1/String.html#method-i-clear)'
     'String#clear' (Instance Method)

'clone (http://ruby-doc.org/core-2.5.1/Method.html#method-i-clone)'
     'Method#clone' (Instance Method)

'clone (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-clone)'
     'Numeric#clone' (Instance Method)

'clone (http://ruby-doc.org/core-2.5.1/Object.html#method-i-clone)'
     'Object#clone' (Instance Method)

'clone (http://ruby-doc.org/core-2.5.1/UnboundMethod.html#method-i-clone)'
     'UnboundMethod#clone' (Instance Method)

'close (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-close)'
     'ARGF#close' (Instance Method)

'close (http://ruby-doc.org/core-2.5.1/Dir.html#method-i-close)'
     'Dir#close' (Instance Method)

'close (http://ruby-doc.org/core-2.5.1/IO.html#method-i-close)'
     'IO#close' (Instance Method)

'close (http://ruby-doc.org/core-2.5.1/Queue.html#method-i-close)'
     'Queue#close' (Instance Method)

'close (http://ruby-doc.org/core-2.5.1/SizedQueue.html#method-i-close)'
     'SizedQueue#close' (Instance Method)

'close_on_exec= (http://ruby-doc.org/core-2.5.1/IO.html#method-i-close_on_exec-3D)'
     'IO#close_on_exec=' (Instance Method)

'close_on_exec? (http://ruby-doc.org/core-2.5.1/IO.html#method-i-close_on_exec-3F)'
     'IO#close_on_exec?' (Instance Method)

'close_read (http://ruby-doc.org/core-2.5.1/IO.html#method-i-close_read)'
     'IO#close_read' (Instance Method)

'close_write (http://ruby-doc.org/core-2.5.1/IO.html#method-i-close_write)'
     'IO#close_write' (Instance Method)

'closed? (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-closed-3F)'
     'ARGF#closed?' (Instance Method)

'closed? (http://ruby-doc.org/core-2.5.1/IO.html#method-i-closed-3F)'
     'IO#closed?' (Instance Method)

'closed? (http://ruby-doc.org/core-2.5.1/Queue.html#method-i-closed-3F)'
     'Queue#closed?' (Instance Method)

'codepoints (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-codepoints)'
     'ARGF#codepoints' (Instance Method)

'codepoints (http://ruby-doc.org/core-2.5.1/IO.html#method-i-codepoints)'
     'IO#codepoints' (Instance Method)

'codepoints (http://ruby-doc.org/core-2.5.1/String.html#method-i-codepoints)'
     'String#codepoints' (Instance Method)

'coerce (http://ruby-doc.org/core-2.5.1/Float.html#method-i-coerce)'
     'Float#coerce' (Instance Method)

'coerce (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-coerce)'
     'Integer#coerce' (Instance Method)

'coerce (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-coerce)'
     'Numeric#coerce' (Instance Method)

'collect (http://ruby-doc.org/core-2.5.1/Array.html#method-i-collect)'
     'Array#collect' (Instance Method)

'collect (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-collect)'
     'Enumerable#collect' (Instance Method)

'collect (http://ruby-doc.org/core-2.5.1/Enumerator/Lazy.html#method-i-collect)'
     'Enumerator/Lazy#collect' (Instance Method)

'collect! (http://ruby-doc.org/core-2.5.1/Array.html#method-i-collect-21)'
     'Array#collect!' (Instance Method)

'collect_concat (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-collect_concat)'
     'Enumerable#collect_concat' (Instance Method)

'collect_concat (http://ruby-doc.org/core-2.5.1/Enumerator/Lazy.html#method-i-collect_concat)'
     'Enumerator/Lazy#collect_concat' (Instance Method)

'combination (http://ruby-doc.org/core-2.5.1/Array.html#method-i-combination)'
     'Array#combination' (Instance Method)

'compact (http://ruby-doc.org/core-2.5.1/Array.html#method-i-compact)'
     'Array#compact' (Instance Method)

'compact (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-compact)'
     'Hash#compact' (Instance Method)

'compact! (http://ruby-doc.org/core-2.5.1/Array.html#method-i-compact-21)'
     'Array#compact!' (Instance Method)

'compact! (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-compact-21)'
     'Hash#compact!' (Instance Method)

'compare_by_identity (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-compare_by_identity)'
     'Hash#compare_by_identity' (Instance Method)

'compare_by_identity? (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-compare_by_identity-3F)'
     'Hash#compare_by_identity?' (Instance Method)

'concat (http://ruby-doc.org/core-2.5.1/Array.html#method-i-concat)'
     'Array#concat' (Instance Method)

'concat (http://ruby-doc.org/core-2.5.1/String.html#method-i-concat)'
     'String#concat' (Instance Method)

'conj (http://ruby-doc.org/core-2.5.1/Complex.html#method-i-conj)'
     'Complex#conj' (Instance Method)

'conj (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-conj)'
     'Numeric#conj' (Instance Method)

'conjugate (http://ruby-doc.org/core-2.5.1/Complex.html#method-i-conjugate)'
     'Complex#conjugate' (Instance Method)

'conjugate (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-conjugate)'
     'Numeric#conjugate' (Instance Method)

'const_defined? (http://ruby-doc.org/core-2.5.1/Module.html#method-i-const_defined-3F)'
     'Module#const_defined?' (Instance Method)

'const_get (http://ruby-doc.org/core-2.5.1/Module.html#method-i-const_get)'
     'Module#const_get' (Instance Method)

'const_missing (http://ruby-doc.org/core-2.5.1/Module.html#method-i-const_missing)'
     'Module#const_missing' (Instance Method)

'const_set (http://ruby-doc.org/core-2.5.1/Module.html#method-i-const_set)'
     'Module#const_set' (Instance Method)

'constants (http://ruby-doc.org/core-2.5.1/Module.html#method-i-constants)'
     'Module#constants' (Instance Method)

'convert (http://ruby-doc.org/core-2.5.1/Encoding/Converter.html#method-i-convert)'
     'Encoding/Converter#convert' (Instance Method)

'convpath (http://ruby-doc.org/core-2.5.1/Encoding/Converter.html#method-i-convpath)'
     'Encoding/Converter#convpath' (Instance Method)

'coredump? (http://ruby-doc.org/core-2.5.1/Process/Status.html#method-i-coredump-3F)'
     'Process/Status#coredump?' (Instance Method)

'count (http://ruby-doc.org/core-2.5.1/Array.html#method-i-count)'
     'Array#count' (Instance Method)

'count (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-count)'
     'Enumerable#count' (Instance Method)

'count (http://ruby-doc.org/core-2.5.1/String.html#method-i-count)'
     'String#count' (Instance Method)

'cover? (http://ruby-doc.org/core-2.5.1/Range.html#method-i-cover-3F)'
     'Range#cover?' (Instance Method)

'crypt (http://ruby-doc.org/core-2.5.1/String.html#method-i-crypt)'
     'String#crypt' (Instance Method)

'ctime (http://ruby-doc.org/core-2.5.1/File.html#method-i-ctime)'
     'File#ctime' (Instance Method)

'ctime (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-ctime)'
     'File/Stat#ctime' (Instance Method)

'ctime (http://ruby-doc.org/core-2.5.1/Time.html#method-i-ctime)'
     'Time#ctime' (Instance Method)

'curry (http://ruby-doc.org/core-2.5.1/Method.html#method-i-curry)'
     'Method#curry' (Instance Method)

'curry (http://ruby-doc.org/core-2.5.1/Proc.html#method-i-curry)'
     'Proc#curry' (Instance Method)

'cycle (http://ruby-doc.org/core-2.5.1/Array.html#method-i-cycle)'
     'Array#cycle' (Instance Method)

'cycle (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-cycle)'
     'Enumerable#cycle' (Instance Method)

'day (http://ruby-doc.org/core-2.5.1/Time.html#method-i-day)'
     'Time#day' (Instance Method)

'default (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-default)'
     'Hash#default' (Instance Method)

'default= (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-default-3D)'
     'Hash#default=' (Instance Method)

'default_proc (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-default_proc)'
     'Hash#default_proc' (Instance Method)

'default_proc= (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-default_proc-3D)'
     'Hash#default_proc=' (Instance Method)

'define_method (http://ruby-doc.org/core-2.5.1/Module.html#method-i-define_method)'
     'Module#define_method' (Instance Method)

'define_singleton_method (http://ruby-doc.org/core-2.5.1/Object.html#method-i-define_singleton_method)'
     'Object#define_singleton_method' (Instance Method)

'defined_class (http://ruby-doc.org/core-2.5.1/TracePoint.html#method-i-defined_class)'
     'TracePoint#defined_class' (Instance Method)

'delete (http://ruby-doc.org/core-2.5.1/Array.html#method-i-delete)'
     'Array#delete' (Instance Method)

'delete (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-delete)'
     'Hash#delete' (Instance Method)

'delete (http://ruby-doc.org/core-2.5.1/String.html#method-i-delete)'
     'String#delete' (Instance Method)

'delete! (http://ruby-doc.org/core-2.5.1/String.html#method-i-delete-21)'
     'String#delete!' (Instance Method)

'delete_at (http://ruby-doc.org/core-2.5.1/Array.html#method-i-delete_at)'
     'Array#delete_at' (Instance Method)

'delete_if (http://ruby-doc.org/core-2.5.1/Array.html#method-i-delete_if)'
     'Array#delete_if' (Instance Method)

'delete_if (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-delete_if)'
     'Hash#delete_if' (Instance Method)

'delete_prefix (http://ruby-doc.org/core-2.5.1/String.html#method-i-delete_prefix)'
     'String#delete_prefix' (Instance Method)

'delete_prefix! (http://ruby-doc.org/core-2.5.1/String.html#method-i-delete_prefix-21)'
     'String#delete_prefix!' (Instance Method)

'delete_suffix (http://ruby-doc.org/core-2.5.1/String.html#method-i-delete_suffix)'
     'String#delete_suffix' (Instance Method)

'delete_suffix! (http://ruby-doc.org/core-2.5.1/String.html#method-i-delete_suffix-21)'
     'String#delete_suffix!' (Instance Method)

'denominator (http://ruby-doc.org/core-2.5.1/Complex.html#method-i-denominator)'
     'Complex#denominator' (Instance Method)

'denominator (http://ruby-doc.org/core-2.5.1/Float.html#method-i-denominator)'
     'Float#denominator' (Instance Method)

'denominator (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-denominator)'
     'Integer#denominator' (Instance Method)

'denominator (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-denominator)'
     'Numeric#denominator' (Instance Method)

'denominator (http://ruby-doc.org/core-2.5.1/Rational.html#method-i-denominator)'
     'Rational#denominator' (Instance Method)

'deprecate_constant (http://ruby-doc.org/core-2.5.1/Module.html#method-i-deprecate_constant)'
     'Module#deprecate_constant' (Instance Method)

'deq (http://ruby-doc.org/core-2.5.1/Queue.html#method-i-deq)'
     'Queue#deq' (Instance Method)

'deq (http://ruby-doc.org/core-2.5.1/SizedQueue.html#method-i-deq)'
     'SizedQueue#deq' (Instance Method)

'destination_encoding (http://ruby-doc.org/core-2.5.1/Encoding/Converter.html#method-i-destination_encoding)'
     'Encoding/Converter#destination_encoding' (Instance Method)

'destination_encoding (http://ruby-doc.org/core-2.5.1/Encoding/InvalidByteSequenceError.html#method-i-destination_encoding)'
     'Encoding/InvalidByteSequenceError#destination_encoding'
     (Instance Method)

'destination_encoding (http://ruby-doc.org/core-2.5.1/Encoding/UndefinedConversionError.html#method-i-destination_encoding)'
     'Encoding/UndefinedConversionError#destination_encoding'
     (Instance Method)

'destination_encoding_name (http://ruby-doc.org/core-2.5.1/Encoding/InvalidByteSequenceError.html#method-i-destination_encoding_name)'
     'Encoding/InvalidByteSequenceError#destination_encoding_name'
     (Instance Method)

'destination_encoding_name (http://ruby-doc.org/core-2.5.1/Encoding/UndefinedConversionError.html#method-i-destination_encoding_name)'
     'Encoding/UndefinedConversionError#destination_encoding_name'
     (Instance Method)

'detect (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-detect)'
     'Enumerable#detect' (Instance Method)

'dev (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-dev)'
     'File/Stat#dev' (Instance Method)

'dev_major (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-dev_major)'
     'File/Stat#dev_major' (Instance Method)

'dev_minor (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-dev_minor)'
     'File/Stat#dev_minor' (Instance Method)

'dig (http://ruby-doc.org/core-2.5.1/Array.html#method-i-dig)'
     'Array#dig' (Instance Method)

'dig (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-dig)'
     'Hash#dig' (Instance Method)

'dig (http://ruby-doc.org/core-2.5.1/Struct.html#method-i-dig)'
     'Struct#dig' (Instance Method)

'digits (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-digits)'
     'Integer#digits' (Instance Method)

'directory? (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-directory-3F)'
     'File/Stat#directory?' (Instance Method)

'directory? (http://ruby-doc.org/core-2.5.1/FileTest.html#method-i-directory-3F)'
     'FileTest#directory?' (Instance Method)

'disable (http://ruby-doc.org/core-2.5.1/TracePoint.html#method-i-disable)'
     'TracePoint#disable' (Instance Method)

'disasm (http://ruby-doc.org/core-2.5.1/RubyVM/InstructionSequence.html#method-i-disasm)'
     'RubyVM/InstructionSequence#disasm' (Instance Method)

'disassemble (http://ruby-doc.org/core-2.5.1/RubyVM/InstructionSequence.html#method-i-disassemble)'
     'RubyVM/InstructionSequence#disassemble' (Instance Method)

'display (http://ruby-doc.org/core-2.5.1/Object.html#method-i-display)'
     'Object#display' (Instance Method)

'div (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-div)'
     'Integer#div' (Instance Method)

'div (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-div)'
     'Numeric#div' (Instance Method)

'divmod (http://ruby-doc.org/core-2.5.1/Float.html#method-i-divmod)'
     'Float#divmod' (Instance Method)

'divmod (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-divmod)'
     'Integer#divmod' (Instance Method)

'divmod (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-divmod)'
     'Numeric#divmod' (Instance Method)

'downcase (http://ruby-doc.org/core-2.5.1/String.html#method-i-downcase)'
     'String#downcase' (Instance Method)

'downcase (http://ruby-doc.org/core-2.5.1/Symbol.html#method-i-downcase)'
     'Symbol#downcase' (Instance Method)

'downcase! (http://ruby-doc.org/core-2.5.1/String.html#method-i-downcase-21)'
     'String#downcase!' (Instance Method)

'downto (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-downto)'
     'Integer#downto' (Instance Method)

'drop (http://ruby-doc.org/core-2.5.1/Array.html#method-i-drop)'
     'Array#drop' (Instance Method)

'drop (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-drop)'
     'Enumerable#drop' (Instance Method)

'drop (http://ruby-doc.org/core-2.5.1/Enumerator/Lazy.html#method-i-drop)'
     'Enumerator/Lazy#drop' (Instance Method)

'drop_while (http://ruby-doc.org/core-2.5.1/Array.html#method-i-drop_while)'
     'Array#drop_while' (Instance Method)

'drop_while (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-drop_while)'
     'Enumerable#drop_while' (Instance Method)

'drop_while (http://ruby-doc.org/core-2.5.1/Enumerator/Lazy.html#method-i-drop_while)'
     'Enumerator/Lazy#drop_while' (Instance Method)

'dst? (http://ruby-doc.org/core-2.5.1/Time.html#method-i-dst-3F)'
     'Time#dst?' (Instance Method)

'dummy? (http://ruby-doc.org/core-2.5.1/Encoding.html#method-i-dummy-3F)'
     'Encoding#dummy?' (Instance Method)

'dump (http://ruby-doc.org/core-2.5.1/String.html#method-i-dump)'
     'String#dump' (Instance Method)

'dup (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-dup)'
     'Numeric#dup' (Instance Method)

'dup (http://ruby-doc.org/core-2.5.1/Object.html#method-i-dup)'
     'Object#dup' (Instance Method)

'each (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-each)'
     'ARGF#each' (Instance Method)

'each (http://ruby-doc.org/core-2.5.1/Array.html#method-i-each)'
     'Array#each' (Instance Method)

'each (http://ruby-doc.org/core-2.5.1/Dir.html#method-i-each)'
     'Dir#each' (Instance Method)

'each (http://ruby-doc.org/core-2.5.1/Enumerator.html#method-i-each)'
     'Enumerator#each' (Instance Method)

'each (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-each)'
     'Hash#each' (Instance Method)

'each (http://ruby-doc.org/core-2.5.1/IO.html#method-i-each)'
     'IO#each' (Instance Method)

'each (http://ruby-doc.org/core-2.5.1/ObjectSpace/WeakMap.html#method-i-each)'
     'ObjectSpace/WeakMap#each' (Instance Method)

'each (http://ruby-doc.org/core-2.5.1/Range.html#method-i-each)'
     'Range#each' (Instance Method)

'each (http://ruby-doc.org/core-2.5.1/Struct.html#method-i-each)'
     'Struct#each' (Instance Method)

'each_byte (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-each_byte)'
     'ARGF#each_byte' (Instance Method)

'each_byte (http://ruby-doc.org/core-2.5.1/IO.html#method-i-each_byte)'
     'IO#each_byte' (Instance Method)

'each_byte (http://ruby-doc.org/core-2.5.1/String.html#method-i-each_byte)'
     'String#each_byte' (Instance Method)

'each_char (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-each_char)'
     'ARGF#each_char' (Instance Method)

'each_char (http://ruby-doc.org/core-2.5.1/IO.html#method-i-each_char)'
     'IO#each_char' (Instance Method)

'each_char (http://ruby-doc.org/core-2.5.1/String.html#method-i-each_char)'
     'String#each_char' (Instance Method)

'each_child (http://ruby-doc.org/core-2.5.1/RubyVM/InstructionSequence.html#method-i-each_child)'
     'RubyVM/InstructionSequence#each_child' (Instance Method)

'each_codepoint (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-each_codepoint)'
     'ARGF#each_codepoint' (Instance Method)

'each_codepoint (http://ruby-doc.org/core-2.5.1/IO.html#method-i-each_codepoint)'
     'IO#each_codepoint' (Instance Method)

'each_codepoint (http://ruby-doc.org/core-2.5.1/String.html#method-i-each_codepoint)'
     'String#each_codepoint' (Instance Method)

'each_cons (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-each_cons)'
     'Enumerable#each_cons' (Instance Method)

'each_entry (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-each_entry)'
     'Enumerable#each_entry' (Instance Method)

'each_grapheme_cluster (http://ruby-doc.org/core-2.5.1/String.html#method-i-each_grapheme_cluster)'
     'String#each_grapheme_cluster' (Instance Method)

'each_index (http://ruby-doc.org/core-2.5.1/Array.html#method-i-each_index)'
     'Array#each_index' (Instance Method)

'each_key (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-each_key)'
     'Hash#each_key' (Instance Method)

'each_key (http://ruby-doc.org/core-2.5.1/ObjectSpace/WeakMap.html#method-i-each_key)'
     'ObjectSpace/WeakMap#each_key' (Instance Method)

'each_line (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-each_line)'
     'ARGF#each_line' (Instance Method)

'each_line (http://ruby-doc.org/core-2.5.1/IO.html#method-i-each_line)'
     'IO#each_line' (Instance Method)

'each_line (http://ruby-doc.org/core-2.5.1/String.html#method-i-each_line)'
     'String#each_line' (Instance Method)

'each_pair (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-each_pair)'
     'Hash#each_pair' (Instance Method)

'each_pair (http://ruby-doc.org/core-2.5.1/ObjectSpace/WeakMap.html#method-i-each_pair)'
     'ObjectSpace/WeakMap#each_pair' (Instance Method)

'each_pair (http://ruby-doc.org/core-2.5.1/Struct.html#method-i-each_pair)'
     'Struct#each_pair' (Instance Method)

'each_slice (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-each_slice)'
     'Enumerable#each_slice' (Instance Method)

'each_value (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-each_value)'
     'Hash#each_value' (Instance Method)

'each_value (http://ruby-doc.org/core-2.5.1/ObjectSpace/WeakMap.html#method-i-each_value)'
     'ObjectSpace/WeakMap#each_value' (Instance Method)

'each_with_index (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-each_with_index)'
     'Enumerable#each_with_index' (Instance Method)

'each_with_index (http://ruby-doc.org/core-2.5.1/Enumerator.html#method-i-each_with_index)'
     'Enumerator#each_with_index' (Instance Method)

'each_with_object (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-each_with_object)'
     'Enumerable#each_with_object' (Instance Method)

'each_with_object (http://ruby-doc.org/core-2.5.1/Enumerator.html#method-i-each_with_object)'
     'Enumerator#each_with_object' (Instance Method)

'empty? (http://ruby-doc.org/core-2.5.1/Array.html#method-i-empty-3F)'
     'Array#empty?' (Instance Method)

'empty? (http://ruby-doc.org/core-2.5.1/FileTest.html#method-i-empty-3F)'
     'FileTest#empty?' (Instance Method)

'empty? (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-empty-3F)'
     'Hash#empty?' (Instance Method)

'empty? (http://ruby-doc.org/core-2.5.1/Queue.html#method-i-empty-3F)'
     'Queue#empty?' (Instance Method)

'empty? (http://ruby-doc.org/core-2.5.1/SizedQueue.html#method-i-empty-3F)'
     'SizedQueue#empty?' (Instance Method)

'empty? (http://ruby-doc.org/core-2.5.1/String.html#method-i-empty-3F)'
     'String#empty?' (Instance Method)

'empty? (http://ruby-doc.org/core-2.5.1/Symbol.html#method-i-empty-3F)'
     'Symbol#empty?' (Instance Method)

'enable (http://ruby-doc.org/core-2.5.1/TracePoint.html#method-i-enable)'
     'TracePoint#enable' (Instance Method)

'enabled? (http://ruby-doc.org/core-2.5.1/TracePoint.html#method-i-enabled-3F)'
     'TracePoint#enabled?' (Instance Method)

'enclose (http://ruby-doc.org/core-2.5.1/ThreadGroup.html#method-i-enclose)'
     'ThreadGroup#enclose' (Instance Method)

'enclosed? (http://ruby-doc.org/core-2.5.1/ThreadGroup.html#method-i-enclosed-3F)'
     'ThreadGroup#enclosed?' (Instance Method)

'encode (http://ruby-doc.org/core-2.5.1/String.html#method-i-encode)'
     'String#encode' (Instance Method)

'encode! (http://ruby-doc.org/core-2.5.1/String.html#method-i-encode-21)'
     'String#encode!' (Instance Method)

'encoding (http://ruby-doc.org/core-2.5.1/Regexp.html#method-i-encoding)'
     'Regexp#encoding' (Instance Method)

'encoding (http://ruby-doc.org/core-2.5.1/String.html#method-i-encoding)'
     'String#encoding' (Instance Method)

'encoding (http://ruby-doc.org/core-2.5.1/Symbol.html#method-i-encoding)'
     'Symbol#encoding' (Instance Method)

'end (http://ruby-doc.org/core-2.5.1/MatchData.html#method-i-end)'
     'MatchData#end' (Instance Method)

'end (http://ruby-doc.org/core-2.5.1/Range.html#method-i-end)'
     'Range#end' (Instance Method)

'end_with? (http://ruby-doc.org/core-2.5.1/String.html#method-i-end_with-3F)'
     'String#end_with?' (Instance Method)

'enq (http://ruby-doc.org/core-2.5.1/Queue.html#method-i-enq)'
     'Queue#enq' (Instance Method)

'enq (http://ruby-doc.org/core-2.5.1/SizedQueue.html#method-i-enq)'
     'SizedQueue#enq' (Instance Method)

'entries (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-entries)'
     'Enumerable#entries' (Instance Method)

'enum_for (http://ruby-doc.org/core-2.5.1/Enumerator/Lazy.html#method-i-enum_for)'
     'Enumerator/Lazy#enum_for' (Instance Method)

'enum_for (http://ruby-doc.org/core-2.5.1/Object.html#method-i-enum_for)'
     'Object#enum_for' (Instance Method)

'eof (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-eof)'
     'ARGF#eof' (Instance Method)

'eof (http://ruby-doc.org/core-2.5.1/IO.html#method-i-eof)'
     'IO#eof' (Instance Method)

'eof? (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-eof-3F)'
     'ARGF#eof?' (Instance Method)

'eof? (http://ruby-doc.org/core-2.5.1/IO.html#method-i-eof-3F)'
     'IO#eof?' (Instance Method)

'eql? (http://ruby-doc.org/core-2.5.1/Array.html#method-i-eql-3F)'
     'Array#eql?' (Instance Method)

'eql? (http://ruby-doc.org/core-2.5.1/Float.html#method-i-eql-3F)'
     'Float#eql?' (Instance Method)

'eql? (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-eql-3F)'
     'Hash#eql?' (Instance Method)

'eql? (http://ruby-doc.org/core-2.5.1/MatchData.html#method-i-eql-3F)'
     'MatchData#eql?' (Instance Method)

'eql? (http://ruby-doc.org/core-2.5.1/Method.html#method-i-eql-3F)'
     'Method#eql?' (Instance Method)

'eql? (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-eql-3F)'
     'Numeric#eql?' (Instance Method)

'eql? (http://ruby-doc.org/core-2.5.1/Object.html#method-i-eql-3F)'
     'Object#eql?' (Instance Method)

'eql? (http://ruby-doc.org/core-2.5.1/Range.html#method-i-eql-3F)'
     'Range#eql?' (Instance Method)

'eql? (http://ruby-doc.org/core-2.5.1/Regexp.html#method-i-eql-3F)'
     'Regexp#eql?' (Instance Method)

'eql? (http://ruby-doc.org/core-2.5.1/String.html#method-i-eql-3F)'
     'String#eql?' (Instance Method)

'eql? (http://ruby-doc.org/core-2.5.1/Struct.html#method-i-eql-3F)'
     'Struct#eql?' (Instance Method)

'eql? (http://ruby-doc.org/core-2.5.1/Time.html#method-i-eql-3F)'
     'Time#eql?' (Instance Method)

'eql? (http://ruby-doc.org/core-2.5.1/UnboundMethod.html#method-i-eql-3F)'
     'UnboundMethod#eql?' (Instance Method)

'equal? (http://ruby-doc.org/core-2.5.1/BasicObject.html#method-i-equal-3F)'
     'BasicObject#equal?' (Instance Method)

'errno (http://ruby-doc.org/core-2.5.1/SystemCallError.html#method-i-errno)'
     'SystemCallError#errno' (Instance Method)

'error_bytes (http://ruby-doc.org/core-2.5.1/Encoding/InvalidByteSequenceError.html#method-i-error_bytes)'
     'Encoding/InvalidByteSequenceError#error_bytes' (Instance Method)

'error_char (http://ruby-doc.org/core-2.5.1/Encoding/UndefinedConversionError.html#method-i-error_char)'
     'Encoding/UndefinedConversionError#error_char' (Instance Method)

'eval (http://ruby-doc.org/core-2.5.1/Binding.html#method-i-eval)'
     'Binding#eval' (Instance Method)

'eval (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-eval)'
     'Kernel#eval' (Instance Method)

'eval (http://ruby-doc.org/core-2.5.1/RubyVM/InstructionSequence.html#method-i-eval)'
     'RubyVM/InstructionSequence#eval' (Instance Method)

'even? (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-even-3F)'
     'Integer#even?' (Instance Method)

'event (http://ruby-doc.org/core-2.5.1/TracePoint.html#method-i-event)'
     'TracePoint#event' (Instance Method)

'exception (http://ruby-doc.org/core-2.5.1/Exception.html#method-i-exception)'
     'Exception#exception' (Instance Method)

'exclude_end? (http://ruby-doc.org/core-2.5.1/Range.html#method-i-exclude_end-3F)'
     'Range#exclude_end?' (Instance Method)

'exec (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-exec)'
     'Kernel#exec' (Instance Method)

'executable? (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-executable-3F)'
     'File/Stat#executable?' (Instance Method)

'executable? (http://ruby-doc.org/core-2.5.1/FileTest.html#method-i-executable-3F)'
     'FileTest#executable?' (Instance Method)

'executable_real? (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-executable_real-3F)'
     'File/Stat#executable_real?' (Instance Method)

'executable_real? (http://ruby-doc.org/core-2.5.1/FileTest.html#method-i-executable_real-3F)'
     'FileTest#executable_real?' (Instance Method)

'exist? (http://ruby-doc.org/core-2.5.1/FileTest.html#method-i-exist-3F)'
     'FileTest#exist?' (Instance Method)

'exists? (http://ruby-doc.org/core-2.5.1/FileTest.html#method-i-exists-3F)'
     'FileTest#exists?' (Instance Method)

'exit (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-exit)'
     'Kernel#exit' (Instance Method)

'exit (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-exit)'
     'Thread#exit' (Instance Method)

'exit! (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-exit-21)'
     'Kernel#exit!' (Instance Method)

'exit_value (http://ruby-doc.org/core-2.5.1/LocalJumpError.html#method-i-exit_value)'
     'LocalJumpError#exit_value' (Instance Method)

'exited? (http://ruby-doc.org/core-2.5.1/Process/Status.html#method-i-exited-3F)'
     'Process/Status#exited?' (Instance Method)

'exitstatus (http://ruby-doc.org/core-2.5.1/Process/Status.html#method-i-exitstatus)'
     'Process/Status#exitstatus' (Instance Method)

'extend (http://ruby-doc.org/core-2.5.1/Object.html#method-i-extend)'
     'Object#extend' (Instance Method)

'extend_object (http://ruby-doc.org/core-2.5.1/Module.html#method-i-extend_object)'
     'Module#extend_object' (Instance Method)

'extended (http://ruby-doc.org/core-2.5.1/Module.html#method-i-extended)'
     'Module#extended' (Instance Method)

'external_encoding (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-external_encoding)'
     'ARGF#external_encoding' (Instance Method)

'external_encoding (http://ruby-doc.org/core-2.5.1/IO.html#method-i-external_encoding)'
     'IO#external_encoding' (Instance Method)

'fail (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-fail)'
     'Kernel#fail' (Instance Method)

'fcntl (http://ruby-doc.org/core-2.5.1/IO.html#method-i-fcntl)'
     'IO#fcntl' (Instance Method)

'fdatasync (http://ruby-doc.org/core-2.5.1/IO.html#method-i-fdatasync)'
     'IO#fdatasync' (Instance Method)

'fdiv (http://ruby-doc.org/core-2.5.1/Complex.html#method-i-fdiv)'
     'Complex#fdiv' (Instance Method)

'fdiv (http://ruby-doc.org/core-2.5.1/Float.html#method-i-fdiv)'
     'Float#fdiv' (Instance Method)

'fdiv (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-fdiv)'
     'Integer#fdiv' (Instance Method)

'fdiv (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-fdiv)'
     'Numeric#fdiv' (Instance Method)

'fdiv (http://ruby-doc.org/core-2.5.1/Rational.html#method-i-fdiv)'
     'Rational#fdiv' (Instance Method)

'feed (http://ruby-doc.org/core-2.5.1/Enumerator.html#method-i-feed)'
     'Enumerator#feed' (Instance Method)

'fetch (http://ruby-doc.org/core-2.5.1/Array.html#method-i-fetch)'
     'Array#fetch' (Instance Method)

'fetch (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-fetch)'
     'Hash#fetch' (Instance Method)

'fetch (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-fetch)'
     'Thread#fetch' (Instance Method)

'fetch_values (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-fetch_values)'
     'Hash#fetch_values' (Instance Method)

'file (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-file)'
     'ARGF#file' (Instance Method)

'file? (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-file-3F)'
     'File/Stat#file?' (Instance Method)

'file? (http://ruby-doc.org/core-2.5.1/FileTest.html#method-i-file-3F)'
     'FileTest#file?' (Instance Method)

'filename (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-filename)'
     'ARGF#filename' (Instance Method)

'fileno (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-fileno)'
     'ARGF#fileno' (Instance Method)

'fileno (http://ruby-doc.org/core-2.5.1/Dir.html#method-i-fileno)'
     'Dir#fileno' (Instance Method)

'fileno (http://ruby-doc.org/core-2.5.1/IO.html#method-i-fileno)'
     'IO#fileno' (Instance Method)

'fill (http://ruby-doc.org/core-2.5.1/Array.html#method-i-fill)'
     'Array#fill' (Instance Method)

'finalize (http://ruby-doc.org/core-2.5.1/ObjectSpace/WeakMap.html#method-i-finalize)'
     'ObjectSpace/WeakMap#finalize' (Instance Method)

'find (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-find)'
     'Enumerable#find' (Instance Method)

'find_all (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-find_all)'
     'Enumerable#find_all' (Instance Method)

'find_all (http://ruby-doc.org/core-2.5.1/Enumerator/Lazy.html#method-i-find_all)'
     'Enumerator/Lazy#find_all' (Instance Method)

'find_index (http://ruby-doc.org/core-2.5.1/Array.html#method-i-find_index)'
     'Array#find_index' (Instance Method)

'find_index (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-find_index)'
     'Enumerable#find_index' (Instance Method)

'finish (http://ruby-doc.org/core-2.5.1/Encoding/Converter.html#method-i-finish)'
     'Encoding/Converter#finish' (Instance Method)

'finite? (http://ruby-doc.org/core-2.5.1/Complex.html#method-i-finite-3F)'
     'Complex#finite?' (Instance Method)

'finite? (http://ruby-doc.org/core-2.5.1/Float.html#method-i-finite-3F)'
     'Float#finite?' (Instance Method)

'finite? (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-finite-3F)'
     'Numeric#finite?' (Instance Method)

'first (http://ruby-doc.org/core-2.5.1/Array.html#method-i-first)'
     'Array#first' (Instance Method)

'first (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-first)'
     'Enumerable#first' (Instance Method)

'first (http://ruby-doc.org/core-2.5.1/Range.html#method-i-first)'
     'Range#first' (Instance Method)

'first_lineno (http://ruby-doc.org/core-2.5.1/RubyVM/InstructionSequence.html#method-i-first_lineno)'
     'RubyVM/InstructionSequence#first_lineno' (Instance Method)

'fixed_encoding? (http://ruby-doc.org/core-2.5.1/Regexp.html#method-i-fixed_encoding-3F)'
     'Regexp#fixed_encoding?' (Instance Method)

'flat_map (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-flat_map)'
     'Enumerable#flat_map' (Instance Method)

'flat_map (http://ruby-doc.org/core-2.5.1/Enumerator/Lazy.html#method-i-flat_map)'
     'Enumerator/Lazy#flat_map' (Instance Method)

'flatten (http://ruby-doc.org/core-2.5.1/Array.html#method-i-flatten)'
     'Array#flatten' (Instance Method)

'flatten (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-flatten)'
     'Hash#flatten' (Instance Method)

'flatten! (http://ruby-doc.org/core-2.5.1/Array.html#method-i-flatten-21)'
     'Array#flatten!' (Instance Method)

'flock (http://ruby-doc.org/core-2.5.1/File.html#method-i-flock)'
     'File#flock' (Instance Method)

'floor (http://ruby-doc.org/core-2.5.1/Float.html#method-i-floor)'
     'Float#floor' (Instance Method)

'floor (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-floor)'
     'Integer#floor' (Instance Method)

'floor (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-floor)'
     'Numeric#floor' (Instance Method)

'floor (http://ruby-doc.org/core-2.5.1/Rational.html#method-i-floor)'
     'Rational#floor' (Instance Method)

'flush (http://ruby-doc.org/core-2.5.1/IO.html#method-i-flush)'
     'IO#flush' (Instance Method)

'force_encoding (http://ruby-doc.org/core-2.5.1/String.html#method-i-force_encoding)'
     'String#force_encoding' (Instance Method)

'fork (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-fork)'
     'Kernel#fork' (Instance Method)

'format (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-format)'
     'Kernel#format' (Instance Method)

'freeze (http://ruby-doc.org/core-2.5.1/Module.html#method-i-freeze)'
     'Module#freeze' (Instance Method)

'freeze (http://ruby-doc.org/core-2.5.1/Object.html#method-i-freeze)'
     'Object#freeze' (Instance Method)

'freeze (http://ruby-doc.org/core-2.5.1/String.html#method-i-freeze)'
     'String#freeze' (Instance Method)

'friday? (http://ruby-doc.org/core-2.5.1/Time.html#method-i-friday-3F)'
     'Time#friday?' (Instance Method)

'frozen? (http://ruby-doc.org/core-2.5.1/Array.html#method-i-frozen-3F)'
     'Array#frozen?' (Instance Method)

'frozen? (http://ruby-doc.org/core-2.5.1/Object.html#method-i-frozen-3F)'
     'Object#frozen?' (Instance Method)

'fsync (http://ruby-doc.org/core-2.5.1/IO.html#method-i-fsync)'
     'IO#fsync' (Instance Method)

'ftype (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-ftype)'
     'File/Stat#ftype' (Instance Method)

'full_message (http://ruby-doc.org/core-2.5.1/Exception.html#method-i-full_message)'
     'Exception#full_message' (Instance Method)

'garbage_collect (http://ruby-doc.org/core-2.5.1/GC.html#method-i-garbage_collect)'
     'GC#garbage_collect' (Instance Method)

'gcd (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-gcd)'
     'Integer#gcd' (Instance Method)

'gcdlcm (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-gcdlcm)'
     'Integer#gcdlcm' (Instance Method)

'getbyte (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-getbyte)'
     'ARGF#getbyte' (Instance Method)

'getbyte (http://ruby-doc.org/core-2.5.1/IO.html#method-i-getbyte)'
     'IO#getbyte' (Instance Method)

'getbyte (http://ruby-doc.org/core-2.5.1/String.html#method-i-getbyte)'
     'String#getbyte' (Instance Method)

'getc (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-getc)'
     'ARGF#getc' (Instance Method)

'getc (http://ruby-doc.org/core-2.5.1/IO.html#method-i-getc)'
     'IO#getc' (Instance Method)

'getgm (http://ruby-doc.org/core-2.5.1/Time.html#method-i-getgm)'
     'Time#getgm' (Instance Method)

'getlocal (http://ruby-doc.org/core-2.5.1/Time.html#method-i-getlocal)'
     'Time#getlocal' (Instance Method)

'gets (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-gets)'
     'ARGF#gets' (Instance Method)

'gets (http://ruby-doc.org/core-2.5.1/IO.html#method-i-gets)'
     'IO#gets' (Instance Method)

'gets (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-gets)'
     'Kernel#gets' (Instance Method)

'getutc (http://ruby-doc.org/core-2.5.1/Time.html#method-i-getutc)'
     'Time#getutc' (Instance Method)

'gid (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-gid)'
     'File/Stat#gid' (Instance Method)

'global_variables (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-global_variables)'
     'Kernel#global_variables' (Instance Method)

'gmt? (http://ruby-doc.org/core-2.5.1/Time.html#method-i-gmt-3F)'
     'Time#gmt?' (Instance Method)

'gmt_offset (http://ruby-doc.org/core-2.5.1/Time.html#method-i-gmt_offset)'
     'Time#gmt_offset' (Instance Method)

'gmtime (http://ruby-doc.org/core-2.5.1/Time.html#method-i-gmtime)'
     'Time#gmtime' (Instance Method)

'gmtoff (http://ruby-doc.org/core-2.5.1/Time.html#method-i-gmtoff)'
     'Time#gmtoff' (Instance Method)

'grapheme_clusters (http://ruby-doc.org/core-2.5.1/String.html#method-i-grapheme_clusters)'
     'String#grapheme_clusters' (Instance Method)

'grep (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-grep)'
     'Enumerable#grep' (Instance Method)

'grep (http://ruby-doc.org/core-2.5.1/Enumerator/Lazy.html#method-i-grep)'
     'Enumerator/Lazy#grep' (Instance Method)

'grep_v (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-grep_v)'
     'Enumerable#grep_v' (Instance Method)

'grep_v (http://ruby-doc.org/core-2.5.1/Enumerator/Lazy.html#method-i-grep_v)'
     'Enumerator/Lazy#grep_v' (Instance Method)

'group (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-group)'
     'Thread#group' (Instance Method)

'group_by (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-group_by)'
     'Enumerable#group_by' (Instance Method)

'grpowned? (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-grpowned-3F)'
     'File/Stat#grpowned?' (Instance Method)

'grpowned? (http://ruby-doc.org/core-2.5.1/FileTest.html#method-i-grpowned-3F)'
     'FileTest#grpowned?' (Instance Method)

'gsub (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-gsub)'
     'Kernel#gsub' (Instance Method)

'gsub (http://ruby-doc.org/core-2.5.1/String.html#method-i-gsub)'
     'String#gsub' (Instance Method)

'gsub! (http://ruby-doc.org/core-2.5.1/String.html#method-i-gsub-21)'
     'String#gsub!' (Instance Method)

'has_key? (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-has_key-3F)'
     'Hash#has_key?' (Instance Method)

'has_value? (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-has_value-3F)'
     'Hash#has_value?' (Instance Method)

'hash (http://ruby-doc.org/core-2.5.1/Array.html#method-i-hash)'
     'Array#hash' (Instance Method)

'hash (http://ruby-doc.org/core-2.5.1/Float.html#method-i-hash)'
     'Float#hash' (Instance Method)

'hash (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-hash)'
     'Hash#hash' (Instance Method)

'hash (http://ruby-doc.org/core-2.5.1/MatchData.html#method-i-hash)'
     'MatchData#hash' (Instance Method)

'hash (http://ruby-doc.org/core-2.5.1/Method.html#method-i-hash)'
     'Method#hash' (Instance Method)

'hash (http://ruby-doc.org/core-2.5.1/Proc.html#method-i-hash)'
     'Proc#hash' (Instance Method)

'hash (http://ruby-doc.org/core-2.5.1/Range.html#method-i-hash)'
     'Range#hash' (Instance Method)

'hash (http://ruby-doc.org/core-2.5.1/Regexp.html#method-i-hash)'
     'Regexp#hash' (Instance Method)

'hash (http://ruby-doc.org/core-2.5.1/String.html#method-i-hash)'
     'String#hash' (Instance Method)

'hash (http://ruby-doc.org/core-2.5.1/Struct.html#method-i-hash)'
     'Struct#hash' (Instance Method)

'hash (http://ruby-doc.org/core-2.5.1/Time.html#method-i-hash)'
     'Time#hash' (Instance Method)

'hash (http://ruby-doc.org/core-2.5.1/UnboundMethod.html#method-i-hash)'
     'UnboundMethod#hash' (Instance Method)

'hex (http://ruby-doc.org/core-2.5.1/String.html#method-i-hex)'
     'String#hex' (Instance Method)

'hour (http://ruby-doc.org/core-2.5.1/Time.html#method-i-hour)'
     'Time#hour' (Instance Method)

'i (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-i)'
     'Numeric#i' (Instance Method)

'id2name (http://ruby-doc.org/core-2.5.1/Symbol.html#method-i-id2name)'
     'Symbol#id2name' (Instance Method)

'identical? (http://ruby-doc.org/core-2.5.1/FileTest.html#method-i-identical-3F)'
     'FileTest#identical?' (Instance Method)

'imag (http://ruby-doc.org/core-2.5.1/Complex.html#method-i-imag)'
     'Complex#imag' (Instance Method)

'imag (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-imag)'
     'Numeric#imag' (Instance Method)

'imaginary (http://ruby-doc.org/core-2.5.1/Complex.html#method-i-imaginary)'
     'Complex#imaginary' (Instance Method)

'imaginary (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-imaginary)'
     'Numeric#imaginary' (Instance Method)

'include (http://ruby-doc.org/core-2.5.1/Module.html#method-i-include)'
     'Module#include' (Instance Method)

'include? (http://ruby-doc.org/core-2.5.1/Array.html#method-i-include-3F)'
     'Array#include?' (Instance Method)

'include? (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-include-3F)'
     'Enumerable#include?' (Instance Method)

'include? (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-include-3F)'
     'Hash#include?' (Instance Method)

'include? (http://ruby-doc.org/core-2.5.1/Module.html#method-i-include-3F)'
     'Module#include?' (Instance Method)

'include? (http://ruby-doc.org/core-2.5.1/ObjectSpace/WeakMap.html#method-i-include-3F)'
     'ObjectSpace/WeakMap#include?' (Instance Method)

'include? (http://ruby-doc.org/core-2.5.1/Range.html#method-i-include-3F)'
     'Range#include?' (Instance Method)

'include? (http://ruby-doc.org/core-2.5.1/String.html#method-i-include-3F)'
     'String#include?' (Instance Method)

'included (http://ruby-doc.org/core-2.5.1/Module.html#method-i-included)'
     'Module#included' (Instance Method)

'included_modules (http://ruby-doc.org/core-2.5.1/Module.html#method-i-included_modules)'
     'Module#included_modules' (Instance Method)

'incomplete_input? (http://ruby-doc.org/core-2.5.1/Encoding/InvalidByteSequenceError.html#method-i-incomplete_input-3F)'
     'Encoding/InvalidByteSequenceError#incomplete_input?' (Instance
     Method)

'index (http://ruby-doc.org/core-2.5.1/Array.html#method-i-index)'
     'Array#index' (Instance Method)

'index (http://ruby-doc.org/core-2.5.1/String.html#method-i-index)'
     'String#index' (Instance Method)

'infinite? (http://ruby-doc.org/core-2.5.1/Complex.html#method-i-infinite-3F)'
     'Complex#infinite?' (Instance Method)

'infinite? (http://ruby-doc.org/core-2.5.1/Float.html#method-i-infinite-3F)'
     'Float#infinite?' (Instance Method)

'infinite? (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-infinite-3F)'
     'Numeric#infinite?' (Instance Method)

'inherited (http://ruby-doc.org/core-2.5.1/Class.html#method-i-inherited)'
     'Class#inherited' (Instance Method)

'initialize_copy (http://ruby-doc.org/core-2.5.1/Array.html#method-i-initialize_copy)'
     'Array#initialize_copy' (Instance Method)

'initialize_copy (http://ruby-doc.org/core-2.5.1/String.html#method-i-initialize_copy)'
     'String#initialize_copy' (Instance Method)

'inject (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-inject)'
     'Enumerable#inject' (Instance Method)

'ino (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-ino)'
     'File/Stat#ino' (Instance Method)

'inplace_mode (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-inplace_mode)'
     'ARGF#inplace_mode' (Instance Method)

'inplace_mode= (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-inplace_mode-3D)'
     'ARGF#inplace_mode=' (Instance Method)

'insert (http://ruby-doc.org/core-2.5.1/Array.html#method-i-insert)'
     'Array#insert' (Instance Method)

'insert (http://ruby-doc.org/core-2.5.1/String.html#method-i-insert)'
     'String#insert' (Instance Method)

'insert_output (http://ruby-doc.org/core-2.5.1/Encoding/Converter.html#method-i-insert_output)'
     'Encoding/Converter#insert_output' (Instance Method)

'inspect (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-inspect)'
     'ARGF#inspect' (Instance Method)

'inspect (http://ruby-doc.org/core-2.5.1/Array.html#method-i-inspect)'
     'Array#inspect' (Instance Method)

'inspect (http://ruby-doc.org/core-2.5.1/Complex.html#method-i-inspect)'
     'Complex#inspect' (Instance Method)

'inspect (http://ruby-doc.org/core-2.5.1/Dir.html#method-i-inspect)'
     'Dir#inspect' (Instance Method)

'inspect (http://ruby-doc.org/core-2.5.1/Encoding.html#method-i-inspect)'
     'Encoding#inspect' (Instance Method)

'inspect (http://ruby-doc.org/core-2.5.1/Encoding/Converter.html#method-i-inspect)'
     'Encoding/Converter#inspect' (Instance Method)

'inspect (http://ruby-doc.org/core-2.5.1/Enumerator.html#method-i-inspect)'
     'Enumerator#inspect' (Instance Method)

'inspect (http://ruby-doc.org/core-2.5.1/Exception.html#method-i-inspect)'
     'Exception#inspect' (Instance Method)

'inspect (http://ruby-doc.org/core-2.5.1/FalseClass.html#method-i-inspect)'
     'FalseClass#inspect' (Instance Method)

'inspect (http://ruby-doc.org/core-2.5.1/Fiber.html#method-i-inspect)'
     'Fiber#inspect' (Instance Method)

'inspect (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-inspect)'
     'File/Stat#inspect' (Instance Method)

'inspect (http://ruby-doc.org/core-2.5.1/Float.html#method-i-inspect)'
     'Float#inspect' (Instance Method)

'inspect (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-inspect)'
     'Hash#inspect' (Instance Method)

'inspect (http://ruby-doc.org/core-2.5.1/IO.html#method-i-inspect)'
     'IO#inspect' (Instance Method)

'inspect (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-inspect)'
     'Integer#inspect' (Instance Method)

'inspect (http://ruby-doc.org/core-2.5.1/MatchData.html#method-i-inspect)'
     'MatchData#inspect' (Instance Method)

'inspect (http://ruby-doc.org/core-2.5.1/Method.html#method-i-inspect)'
     'Method#inspect' (Instance Method)

'inspect (http://ruby-doc.org/core-2.5.1/Module.html#method-i-inspect)'
     'Module#inspect' (Instance Method)

'inspect (http://ruby-doc.org/core-2.5.1/NilClass.html#method-i-inspect)'
     'NilClass#inspect' (Instance Method)

'inspect (http://ruby-doc.org/core-2.5.1/Object.html#method-i-inspect)'
     'Object#inspect' (Instance Method)

'inspect (http://ruby-doc.org/core-2.5.1/ObjectSpace/WeakMap.html#method-i-inspect)'
     'ObjectSpace/WeakMap#inspect' (Instance Method)

'inspect (http://ruby-doc.org/core-2.5.1/Proc.html#method-i-inspect)'
     'Proc#inspect' (Instance Method)

'inspect (http://ruby-doc.org/core-2.5.1/Process/Status.html#method-i-inspect)'
     'Process/Status#inspect' (Instance Method)

'inspect (http://ruby-doc.org/core-2.5.1/Range.html#method-i-inspect)'
     'Range#inspect' (Instance Method)

'inspect (http://ruby-doc.org/core-2.5.1/Rational.html#method-i-inspect)'
     'Rational#inspect' (Instance Method)

'inspect (http://ruby-doc.org/core-2.5.1/Regexp.html#method-i-inspect)'
     'Regexp#inspect' (Instance Method)

'inspect (http://ruby-doc.org/core-2.5.1/RubyVM/InstructionSequence.html#method-i-inspect)'
     'RubyVM/InstructionSequence#inspect' (Instance Method)

'inspect (http://ruby-doc.org/core-2.5.1/String.html#method-i-inspect)'
     'String#inspect' (Instance Method)

'inspect (http://ruby-doc.org/core-2.5.1/Struct.html#method-i-inspect)'
     'Struct#inspect' (Instance Method)

'inspect (http://ruby-doc.org/core-2.5.1/Symbol.html#method-i-inspect)'
     'Symbol#inspect' (Instance Method)

'inspect (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-inspect)'
     'Thread#inspect' (Instance Method)

'inspect (http://ruby-doc.org/core-2.5.1/Thread/Backtrace/Location.html#method-i-inspect)'
     'Thread/Backtrace/Location#inspect' (Instance Method)

'inspect (http://ruby-doc.org/core-2.5.1/Time.html#method-i-inspect)'
     'Time#inspect' (Instance Method)

'inspect (http://ruby-doc.org/core-2.5.1/TracePoint.html#method-i-inspect)'
     'TracePoint#inspect' (Instance Method)

'inspect (http://ruby-doc.org/core-2.5.1/TrueClass.html#method-i-inspect)'
     'TrueClass#inspect' (Instance Method)

'inspect (http://ruby-doc.org/core-2.5.1/UnboundMethod.html#method-i-inspect)'
     'UnboundMethod#inspect' (Instance Method)

'instance_eval (http://ruby-doc.org/core-2.5.1/BasicObject.html#method-i-instance_eval)'
     'BasicObject#instance_eval' (Instance Method)

'instance_exec (http://ruby-doc.org/core-2.5.1/BasicObject.html#method-i-instance_exec)'
     'BasicObject#instance_exec' (Instance Method)

'instance_method (http://ruby-doc.org/core-2.5.1/Module.html#method-i-instance_method)'
     'Module#instance_method' (Instance Method)

'instance_methods (http://ruby-doc.org/core-2.5.1/Module.html#method-i-instance_methods)'
     'Module#instance_methods' (Instance Method)

'instance_of? (http://ruby-doc.org/core-2.5.1/Object.html#method-i-instance_of-3F)'
     'Object#instance_of?' (Instance Method)

'instance_variable_defined? (http://ruby-doc.org/core-2.5.1/Object.html#method-i-instance_variable_defined-3F)'
     'Object#instance_variable_defined?' (Instance Method)

'instance_variable_get (http://ruby-doc.org/core-2.5.1/Object.html#method-i-instance_variable_get)'
     'Object#instance_variable_get' (Instance Method)

'instance_variable_set (http://ruby-doc.org/core-2.5.1/Object.html#method-i-instance_variable_set)'
     'Object#instance_variable_set' (Instance Method)

'instance_variables (http://ruby-doc.org/core-2.5.1/Object.html#method-i-instance_variables)'
     'Object#instance_variables' (Instance Method)

'integer? (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-integer-3F)'
     'Integer#integer?' (Instance Method)

'integer? (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-integer-3F)'
     'Numeric#integer?' (Instance Method)

'intern (http://ruby-doc.org/core-2.5.1/String.html#method-i-intern)'
     'String#intern' (Instance Method)

'intern (http://ruby-doc.org/core-2.5.1/Symbol.html#method-i-intern)'
     'Symbol#intern' (Instance Method)

'internal_encoding (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-internal_encoding)'
     'ARGF#internal_encoding' (Instance Method)

'internal_encoding (http://ruby-doc.org/core-2.5.1/IO.html#method-i-internal_encoding)'
     'IO#internal_encoding' (Instance Method)

'invert (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-invert)'
     'Hash#invert' (Instance Method)

'ioctl (http://ruby-doc.org/core-2.5.1/IO.html#method-i-ioctl)'
     'IO#ioctl' (Instance Method)

'is_a? (http://ruby-doc.org/core-2.5.1/Object.html#method-i-is_a-3F)'
     'Object#is_a?' (Instance Method)

'isatty (http://ruby-doc.org/core-2.5.1/IO.html#method-i-isatty)'
     'IO#isatty' (Instance Method)

'isdst (http://ruby-doc.org/core-2.5.1/Time.html#method-i-isdst)'
     'Time#isdst' (Instance Method)

'iterator? (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-iterator-3F)'
     'Kernel#iterator?' (Instance Method)

'itself (http://ruby-doc.org/core-2.5.1/Object.html#method-i-itself)'
     'Object#itself' (Instance Method)

'join (http://ruby-doc.org/core-2.5.1/Array.html#method-i-join)'
     'Array#join' (Instance Method)

'join (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-join)'
     'Thread#join' (Instance Method)

'keep_if (http://ruby-doc.org/core-2.5.1/Array.html#method-i-keep_if)'
     'Array#keep_if' (Instance Method)

'keep_if (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-keep_if)'
     'Hash#keep_if' (Instance Method)

'key (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-key)'
     'Hash#key' (Instance Method)

'key (http://ruby-doc.org/core-2.5.1/KeyError.html#method-i-key)'
     'KeyError#key' (Instance Method)

'key? (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-key-3F)'
     'Hash#key?' (Instance Method)

'key? (http://ruby-doc.org/core-2.5.1/ObjectSpace/WeakMap.html#method-i-key-3F)'
     'ObjectSpace/WeakMap#key?' (Instance Method)

'key? (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-key-3F)'
     'Thread#key?' (Instance Method)

'keys (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-keys)'
     'Hash#keys' (Instance Method)

'keys (http://ruby-doc.org/core-2.5.1/ObjectSpace/WeakMap.html#method-i-keys)'
     'ObjectSpace/WeakMap#keys' (Instance Method)

'keys (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-keys)'
     'Thread#keys' (Instance Method)

'kill (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-kill)'
     'Thread#kill' (Instance Method)

'kind_of? (http://ruby-doc.org/core-2.5.1/Object.html#method-i-kind_of-3F)'
     'Object#kind_of?' (Instance Method)

'label (http://ruby-doc.org/core-2.5.1/RubyVM/InstructionSequence.html#method-i-label)'
     'RubyVM/InstructionSequence#label' (Instance Method)

'label (http://ruby-doc.org/core-2.5.1/Thread/Backtrace/Location.html#method-i-label)'
     'Thread/Backtrace/Location#label' (Instance Method)

'lambda (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-lambda)'
     'Kernel#lambda' (Instance Method)

'lambda? (http://ruby-doc.org/core-2.5.1/Proc.html#method-i-lambda-3F)'
     'Proc#lambda?' (Instance Method)

'last (http://ruby-doc.org/core-2.5.1/Array.html#method-i-last)'
     'Array#last' (Instance Method)

'last (http://ruby-doc.org/core-2.5.1/Range.html#method-i-last)'
     'Range#last' (Instance Method)

'last_error (http://ruby-doc.org/core-2.5.1/Encoding/Converter.html#method-i-last_error)'
     'Encoding/Converter#last_error' (Instance Method)

'lazy (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-lazy)'
     'Enumerable#lazy' (Instance Method)

'lazy (http://ruby-doc.org/core-2.5.1/Enumerator/Lazy.html#method-i-lazy)'
     'Enumerator/Lazy#lazy' (Instance Method)

'lcm (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-lcm)'
     'Integer#lcm' (Instance Method)

'length (http://ruby-doc.org/core-2.5.1/Array.html#method-i-length)'
     'Array#length' (Instance Method)

'length (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-length)'
     'Hash#length' (Instance Method)

'length (http://ruby-doc.org/core-2.5.1/MatchData.html#method-i-length)'
     'MatchData#length' (Instance Method)

'length (http://ruby-doc.org/core-2.5.1/ObjectSpace/WeakMap.html#method-i-length)'
     'ObjectSpace/WeakMap#length' (Instance Method)

'length (http://ruby-doc.org/core-2.5.1/Queue.html#method-i-length)'
     'Queue#length' (Instance Method)

'length (http://ruby-doc.org/core-2.5.1/SizedQueue.html#method-i-length)'
     'SizedQueue#length' (Instance Method)

'length (http://ruby-doc.org/core-2.5.1/String.html#method-i-length)'
     'String#length' (Instance Method)

'length (http://ruby-doc.org/core-2.5.1/Struct.html#method-i-length)'
     'Struct#length' (Instance Method)

'length (http://ruby-doc.org/core-2.5.1/Symbol.html#method-i-length)'
     'Symbol#length' (Instance Method)

'lineno (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-lineno)'
     'ARGF#lineno' (Instance Method)

'lineno (http://ruby-doc.org/core-2.5.1/IO.html#method-i-lineno)'
     'IO#lineno' (Instance Method)

'lineno (http://ruby-doc.org/core-2.5.1/Thread/Backtrace/Location.html#method-i-lineno)'
     'Thread/Backtrace/Location#lineno' (Instance Method)

'lineno (http://ruby-doc.org/core-2.5.1/TracePoint.html#method-i-lineno)'
     'TracePoint#lineno' (Instance Method)

'lineno= (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-lineno-3D)'
     'ARGF#lineno=' (Instance Method)

'lineno= (http://ruby-doc.org/core-2.5.1/IO.html#method-i-lineno-3D)'
     'IO#lineno=' (Instance Method)

'lines (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-lines)'
     'ARGF#lines' (Instance Method)

'lines (http://ruby-doc.org/core-2.5.1/IO.html#method-i-lines)'
     'IO#lines' (Instance Method)

'lines (http://ruby-doc.org/core-2.5.1/String.html#method-i-lines)'
     'String#lines' (Instance Method)

'list (http://ruby-doc.org/core-2.5.1/ThreadGroup.html#method-i-list)'
     'ThreadGroup#list' (Instance Method)

'ljust (http://ruby-doc.org/core-2.5.1/String.html#method-i-ljust)'
     'String#ljust' (Instance Method)

'load (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-load)'
     'Kernel#load' (Instance Method)

'local_variable_defined? (http://ruby-doc.org/core-2.5.1/Binding.html#method-i-local_variable_defined-3F)'
     'Binding#local_variable_defined?' (Instance Method)

'local_variable_get (http://ruby-doc.org/core-2.5.1/Binding.html#method-i-local_variable_get)'
     'Binding#local_variable_get' (Instance Method)

'local_variable_set (http://ruby-doc.org/core-2.5.1/Binding.html#method-i-local_variable_set)'
     'Binding#local_variable_set' (Instance Method)

'local_variables (http://ruby-doc.org/core-2.5.1/Binding.html#method-i-local_variables)'
     'Binding#local_variables' (Instance Method)

'local_variables (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-local_variables)'
     'Kernel#local_variables' (Instance Method)

'local_variables (http://ruby-doc.org/core-2.5.1/NameError.html#method-i-local_variables)'
     'NameError#local_variables' (Instance Method)

'localtime (http://ruby-doc.org/core-2.5.1/Time.html#method-i-localtime)'
     'Time#localtime' (Instance Method)

'lock (http://ruby-doc.org/core-2.5.1/Mutex.html#method-i-lock)'
     'Mutex#lock' (Instance Method)

'locked? (http://ruby-doc.org/core-2.5.1/Mutex.html#method-i-locked-3F)'
     'Mutex#locked?' (Instance Method)

'loop (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-loop)'
     'Kernel#loop' (Instance Method)

'lstat (http://ruby-doc.org/core-2.5.1/File.html#method-i-lstat)'
     'File#lstat' (Instance Method)

'lstrip (http://ruby-doc.org/core-2.5.1/String.html#method-i-lstrip)'
     'String#lstrip' (Instance Method)

'lstrip! (http://ruby-doc.org/core-2.5.1/String.html#method-i-lstrip-21)'
     'String#lstrip!' (Instance Method)

'magnitude (http://ruby-doc.org/core-2.5.1/Complex.html#method-i-magnitude)'
     'Complex#magnitude' (Instance Method)

'magnitude (http://ruby-doc.org/core-2.5.1/Float.html#method-i-magnitude)'
     'Float#magnitude' (Instance Method)

'magnitude (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-magnitude)'
     'Integer#magnitude' (Instance Method)

'magnitude (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-magnitude)'
     'Numeric#magnitude' (Instance Method)

'magnitude (http://ruby-doc.org/core-2.5.1/Rational.html#method-i-magnitude)'
     'Rational#magnitude' (Instance Method)

'map (http://ruby-doc.org/core-2.5.1/Array.html#method-i-map)'
     'Array#map' (Instance Method)

'map (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-map)'
     'Enumerable#map' (Instance Method)

'map (http://ruby-doc.org/core-2.5.1/Enumerator/Lazy.html#method-i-map)'
     'Enumerator/Lazy#map' (Instance Method)

'map! (http://ruby-doc.org/core-2.5.1/Array.html#method-i-map-21)'
     'Array#map!' (Instance Method)

'match (http://ruby-doc.org/core-2.5.1/Regexp.html#method-i-match)'
     'Regexp#match' (Instance Method)

'match (http://ruby-doc.org/core-2.5.1/String.html#method-i-match)'
     'String#match' (Instance Method)

'match (http://ruby-doc.org/core-2.5.1/Symbol.html#method-i-match)'
     'Symbol#match' (Instance Method)

'match? (http://ruby-doc.org/core-2.5.1/Regexp.html#method-i-match-3F)'
     'Regexp#match?' (Instance Method)

'match? (http://ruby-doc.org/core-2.5.1/String.html#method-i-match-3F)'
     'String#match?' (Instance Method)

'match? (http://ruby-doc.org/core-2.5.1/Symbol.html#method-i-match-3F)'
     'Symbol#match?' (Instance Method)

'max (http://ruby-doc.org/core-2.5.1/Array.html#method-i-max)'
     'Array#max' (Instance Method)

'max (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-max)'
     'Enumerable#max' (Instance Method)

'max (http://ruby-doc.org/core-2.5.1/Range.html#method-i-max)'
     'Range#max' (Instance Method)

'max (http://ruby-doc.org/core-2.5.1/SizedQueue.html#method-i-max)'
     'SizedQueue#max' (Instance Method)

'max= (http://ruby-doc.org/core-2.5.1/SizedQueue.html#method-i-max-3D)'
     'SizedQueue#max=' (Instance Method)

'max_by (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-max_by)'
     'Enumerable#max_by' (Instance Method)

'mday (http://ruby-doc.org/core-2.5.1/Time.html#method-i-mday)'
     'Time#mday' (Instance Method)

'member? (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-member-3F)'
     'Enumerable#member?' (Instance Method)

'member? (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-member-3F)'
     'Hash#member?' (Instance Method)

'member? (http://ruby-doc.org/core-2.5.1/ObjectSpace/WeakMap.html#method-i-member-3F)'
     'ObjectSpace/WeakMap#member?' (Instance Method)

'member? (http://ruby-doc.org/core-2.5.1/Range.html#method-i-member-3F)'
     'Range#member?' (Instance Method)

'members (http://ruby-doc.org/core-2.5.1/Struct.html#method-i-members)'
     'Struct#members' (Instance Method)

'merge (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-merge)'
     'Hash#merge' (Instance Method)

'merge! (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-merge-21)'
     'Hash#merge!' (Instance Method)

'message (http://ruby-doc.org/core-2.5.1/Exception.html#method-i-message)'
     'Exception#message' (Instance Method)

'method (http://ruby-doc.org/core-2.5.1/Object.html#method-i-method)'
     'Object#method' (Instance Method)

'method_added (http://ruby-doc.org/core-2.5.1/Module.html#method-i-method_added)'
     'Module#method_added' (Instance Method)

'method_defined? (http://ruby-doc.org/core-2.5.1/Module.html#method-i-method_defined-3F)'
     'Module#method_defined?' (Instance Method)

'method_id (http://ruby-doc.org/core-2.5.1/TracePoint.html#method-i-method_id)'
     'TracePoint#method_id' (Instance Method)

'method_missing (http://ruby-doc.org/core-2.5.1/BasicObject.html#method-i-method_missing)'
     'BasicObject#method_missing' (Instance Method)

'method_removed (http://ruby-doc.org/core-2.5.1/Module.html#method-i-method_removed)'
     'Module#method_removed' (Instance Method)

'method_undefined (http://ruby-doc.org/core-2.5.1/Module.html#method-i-method_undefined)'
     'Module#method_undefined' (Instance Method)

'methods (http://ruby-doc.org/core-2.5.1/Object.html#method-i-methods)'
     'Object#methods' (Instance Method)

'min (http://ruby-doc.org/core-2.5.1/Array.html#method-i-min)'
     'Array#min' (Instance Method)

'min (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-min)'
     'Enumerable#min' (Instance Method)

'min (http://ruby-doc.org/core-2.5.1/Range.html#method-i-min)'
     'Range#min' (Instance Method)

'min (http://ruby-doc.org/core-2.5.1/Time.html#method-i-min)'
     'Time#min' (Instance Method)

'min_by (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-min_by)'
     'Enumerable#min_by' (Instance Method)

'minmax (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-minmax)'
     'Enumerable#minmax' (Instance Method)

'minmax_by (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-minmax_by)'
     'Enumerable#minmax_by' (Instance Method)

'mode (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-mode)'
     'File/Stat#mode' (Instance Method)

'module_eval (http://ruby-doc.org/core-2.5.1/Module.html#method-i-module_eval)'
     'Module#module_eval' (Instance Method)

'module_exec (http://ruby-doc.org/core-2.5.1/Module.html#method-i-module_exec)'
     'Module#module_exec' (Instance Method)

'module_function (http://ruby-doc.org/core-2.5.1/Module.html#method-i-module_function)'
     'Module#module_function' (Instance Method)

'modulo (http://ruby-doc.org/core-2.5.1/Float.html#method-i-modulo)'
     'Float#modulo' (Instance Method)

'modulo (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-modulo)'
     'Integer#modulo' (Instance Method)

'modulo (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-modulo)'
     'Numeric#modulo' (Instance Method)

'mon (http://ruby-doc.org/core-2.5.1/Time.html#method-i-mon)'
     'Time#mon' (Instance Method)

'monday? (http://ruby-doc.org/core-2.5.1/Time.html#method-i-monday-3F)'
     'Time#monday?' (Instance Method)

'month (http://ruby-doc.org/core-2.5.1/Time.html#method-i-month)'
     'Time#month' (Instance Method)

'mtime (http://ruby-doc.org/core-2.5.1/File.html#method-i-mtime)'
     'File#mtime' (Instance Method)

'mtime (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-mtime)'
     'File/Stat#mtime' (Instance Method)

'name (http://ruby-doc.org/core-2.5.1/Encoding.html#method-i-name)'
     'Encoding#name' (Instance Method)

'name (http://ruby-doc.org/core-2.5.1/Method.html#method-i-name)'
     'Method#name' (Instance Method)

'name (http://ruby-doc.org/core-2.5.1/Module.html#method-i-name)'
     'Module#name' (Instance Method)

'name (http://ruby-doc.org/core-2.5.1/NameError.html#method-i-name)'
     'NameError#name' (Instance Method)

'name (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-name)'
     'Thread#name' (Instance Method)

'name (http://ruby-doc.org/core-2.5.1/UnboundMethod.html#method-i-name)'
     'UnboundMethod#name' (Instance Method)

'name= (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-name-3D)'
     'Thread#name=' (Instance Method)

'named_captures (http://ruby-doc.org/core-2.5.1/MatchData.html#method-i-named_captures)'
     'MatchData#named_captures' (Instance Method)

'named_captures (http://ruby-doc.org/core-2.5.1/Regexp.html#method-i-named_captures)'
     'Regexp#named_captures' (Instance Method)

'names (http://ruby-doc.org/core-2.5.1/Encoding.html#method-i-names)'
     'Encoding#names' (Instance Method)

'names (http://ruby-doc.org/core-2.5.1/MatchData.html#method-i-names)'
     'MatchData#names' (Instance Method)

'names (http://ruby-doc.org/core-2.5.1/Regexp.html#method-i-names)'
     'Regexp#names' (Instance Method)

'nan? (http://ruby-doc.org/core-2.5.1/Float.html#method-i-nan-3F)'
     'Float#nan?' (Instance Method)

'negative? (http://ruby-doc.org/core-2.5.1/Float.html#method-i-negative-3F)'
     'Float#negative?' (Instance Method)

'negative? (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-negative-3F)'
     'Numeric#negative?' (Instance Method)

'negative? (http://ruby-doc.org/core-2.5.1/Rational.html#method-i-negative-3F)'
     'Rational#negative?' (Instance Method)

'new (http://ruby-doc.org/core-2.5.1/Class.html#method-i-new)'
     'Class#new' (Instance Method)

'next (http://ruby-doc.org/core-2.5.1/Enumerator.html#method-i-next)'
     'Enumerator#next' (Instance Method)

'next (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-next)'
     'Integer#next' (Instance Method)

'next (http://ruby-doc.org/core-2.5.1/String.html#method-i-next)'
     'String#next' (Instance Method)

'next (http://ruby-doc.org/core-2.5.1/Symbol.html#method-i-next)'
     'Symbol#next' (Instance Method)

'next! (http://ruby-doc.org/core-2.5.1/String.html#method-i-next-21)'
     'String#next!' (Instance Method)

'next_float (http://ruby-doc.org/core-2.5.1/Float.html#method-i-next_float)'
     'Float#next_float' (Instance Method)

'next_values (http://ruby-doc.org/core-2.5.1/Enumerator.html#method-i-next_values)'
     'Enumerator#next_values' (Instance Method)

'nil? (http://ruby-doc.org/core-2.5.1/NilClass.html#method-i-nil-3F)'
     'NilClass#nil?' (Instance Method)

'nil? (http://ruby-doc.org/core-2.5.1/Object.html#method-i-nil-3F)'
     'Object#nil?' (Instance Method)

'nlink (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-nlink)'
     'File/Stat#nlink' (Instance Method)

'nobits? (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-nobits-3F)'
     'Integer#nobits?' (Instance Method)

'none? (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-none-3F)'
     'Enumerable#none?' (Instance Method)

'nonzero? (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-nonzero-3F)'
     'Numeric#nonzero?' (Instance Method)

'nsec (http://ruby-doc.org/core-2.5.1/Time.html#method-i-nsec)'
     'Time#nsec' (Instance Method)

'num_waiting (http://ruby-doc.org/core-2.5.1/Queue.html#method-i-num_waiting)'
     'Queue#num_waiting' (Instance Method)

'num_waiting (http://ruby-doc.org/core-2.5.1/SizedQueue.html#method-i-num_waiting)'
     'SizedQueue#num_waiting' (Instance Method)

'numerator (http://ruby-doc.org/core-2.5.1/Complex.html#method-i-numerator)'
     'Complex#numerator' (Instance Method)

'numerator (http://ruby-doc.org/core-2.5.1/Float.html#method-i-numerator)'
     'Float#numerator' (Instance Method)

'numerator (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-numerator)'
     'Integer#numerator' (Instance Method)

'numerator (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-numerator)'
     'Numeric#numerator' (Instance Method)

'numerator (http://ruby-doc.org/core-2.5.1/Rational.html#method-i-numerator)'
     'Rational#numerator' (Instance Method)

'object_id (http://ruby-doc.org/core-2.5.1/Object.html#method-i-object_id)'
     'Object#object_id' (Instance Method)

'oct (http://ruby-doc.org/core-2.5.1/String.html#method-i-oct)'
     'String#oct' (Instance Method)

'odd? (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-odd-3F)'
     'Integer#odd?' (Instance Method)

'offset (http://ruby-doc.org/core-2.5.1/MatchData.html#method-i-offset)'
     'MatchData#offset' (Instance Method)

'one? (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-one-3F)'
     'Enumerable#one?' (Instance Method)

'open (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-open)'
     'Kernel#open' (Instance Method)

'options (http://ruby-doc.org/core-2.5.1/Regexp.html#method-i-options)'
     'Regexp#options' (Instance Method)

'ord (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-ord)'
     'Integer#ord' (Instance Method)

'ord (http://ruby-doc.org/core-2.5.1/String.html#method-i-ord)'
     'String#ord' (Instance Method)

'original_name (http://ruby-doc.org/core-2.5.1/Method.html#method-i-original_name)'
     'Method#original_name' (Instance Method)

'original_name (http://ruby-doc.org/core-2.5.1/UnboundMethod.html#method-i-original_name)'
     'UnboundMethod#original_name' (Instance Method)

'owned? (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-owned-3F)'
     'File/Stat#owned?' (Instance Method)

'owned? (http://ruby-doc.org/core-2.5.1/FileTest.html#method-i-owned-3F)'
     'FileTest#owned?' (Instance Method)

'owned? (http://ruby-doc.org/core-2.5.1/Mutex.html#method-i-owned-3F)'
     'Mutex#owned?' (Instance Method)

'owner (http://ruby-doc.org/core-2.5.1/Method.html#method-i-owner)'
     'Method#owner' (Instance Method)

'owner (http://ruby-doc.org/core-2.5.1/UnboundMethod.html#method-i-owner)'
     'UnboundMethod#owner' (Instance Method)

'p (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-p)'
     'Kernel#p' (Instance Method)

'pack (http://ruby-doc.org/core-2.5.1/Array.html#method-i-pack)'
     'Array#pack' (Instance Method)

'parameters (http://ruby-doc.org/core-2.5.1/Method.html#method-i-parameters)'
     'Method#parameters' (Instance Method)

'parameters (http://ruby-doc.org/core-2.5.1/Proc.html#method-i-parameters)'
     'Proc#parameters' (Instance Method)

'parameters (http://ruby-doc.org/core-2.5.1/UnboundMethod.html#method-i-parameters)'
     'UnboundMethod#parameters' (Instance Method)

'partition (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-partition)'
     'Enumerable#partition' (Instance Method)

'partition (http://ruby-doc.org/core-2.5.1/String.html#method-i-partition)'
     'String#partition' (Instance Method)

'path (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-path)'
     'ARGF#path' (Instance Method)

'path (http://ruby-doc.org/core-2.5.1/Dir.html#method-i-path)'
     'Dir#path' (Instance Method)

'path (http://ruby-doc.org/core-2.5.1/File.html#method-i-path)'
     'File#path' (Instance Method)

'path (http://ruby-doc.org/core-2.5.1/RubyVM/InstructionSequence.html#method-i-path)'
     'RubyVM/InstructionSequence#path' (Instance Method)

'path (http://ruby-doc.org/core-2.5.1/Thread/Backtrace/Location.html#method-i-path)'
     'Thread/Backtrace/Location#path' (Instance Method)

'path (http://ruby-doc.org/core-2.5.1/TracePoint.html#method-i-path)'
     'TracePoint#path' (Instance Method)

'peek (http://ruby-doc.org/core-2.5.1/Enumerator.html#method-i-peek)'
     'Enumerator#peek' (Instance Method)

'peek_values (http://ruby-doc.org/core-2.5.1/Enumerator.html#method-i-peek_values)'
     'Enumerator#peek_values' (Instance Method)

'pending_interrupt? (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-pending_interrupt-3F)'
     'Thread#pending_interrupt?' (Instance Method)

'permutation (http://ruby-doc.org/core-2.5.1/Array.html#method-i-permutation)'
     'Array#permutation' (Instance Method)

'phase (http://ruby-doc.org/core-2.5.1/Complex.html#method-i-phase)'
     'Complex#phase' (Instance Method)

'phase (http://ruby-doc.org/core-2.5.1/Float.html#method-i-phase)'
     'Float#phase' (Instance Method)

'phase (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-phase)'
     'Numeric#phase' (Instance Method)

'pid (http://ruby-doc.org/core-2.5.1/IO.html#method-i-pid)'
     'IO#pid' (Instance Method)

'pid (http://ruby-doc.org/core-2.5.1/Process/Status.html#method-i-pid)'
     'Process/Status#pid' (Instance Method)

'pid (http://ruby-doc.org/core-2.5.1/Process/Waiter.html#method-i-pid)'
     'Process/Waiter#pid' (Instance Method)

'pipe? (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-pipe-3F)'
     'File/Stat#pipe?' (Instance Method)

'pipe? (http://ruby-doc.org/core-2.5.1/FileTest.html#method-i-pipe-3F)'
     'FileTest#pipe?' (Instance Method)

'polar (http://ruby-doc.org/core-2.5.1/Complex.html#method-i-polar)'
     'Complex#polar' (Instance Method)

'polar (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-polar)'
     'Numeric#polar' (Instance Method)

'pop (http://ruby-doc.org/core-2.5.1/Array.html#method-i-pop)'
     'Array#pop' (Instance Method)

'pop (http://ruby-doc.org/core-2.5.1/Queue.html#method-i-pop)'
     'Queue#pop' (Instance Method)

'pop (http://ruby-doc.org/core-2.5.1/SizedQueue.html#method-i-pop)'
     'SizedQueue#pop' (Instance Method)

'pos (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-pos)'
     'ARGF#pos' (Instance Method)

'pos (http://ruby-doc.org/core-2.5.1/Dir.html#method-i-pos)'
     'Dir#pos' (Instance Method)

'pos (http://ruby-doc.org/core-2.5.1/IO.html#method-i-pos)'
     'IO#pos' (Instance Method)

'pos= (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-pos-3D)'
     'ARGF#pos=' (Instance Method)

'pos= (http://ruby-doc.org/core-2.5.1/Dir.html#method-i-pos-3D)'
     'Dir#pos=' (Instance Method)

'pos= (http://ruby-doc.org/core-2.5.1/IO.html#method-i-pos-3D)'
     'IO#pos=' (Instance Method)

'positive? (http://ruby-doc.org/core-2.5.1/Float.html#method-i-positive-3F)'
     'Float#positive?' (Instance Method)

'positive? (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-positive-3F)'
     'Numeric#positive?' (Instance Method)

'positive? (http://ruby-doc.org/core-2.5.1/Rational.html#method-i-positive-3F)'
     'Rational#positive?' (Instance Method)

'post_match (http://ruby-doc.org/core-2.5.1/MatchData.html#method-i-post_match)'
     'MatchData#post_match' (Instance Method)

'pow (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-pow)'
     'Integer#pow' (Instance Method)

'pre_match (http://ruby-doc.org/core-2.5.1/MatchData.html#method-i-pre_match)'
     'MatchData#pre_match' (Instance Method)

'pread (http://ruby-doc.org/core-2.5.1/IO.html#method-i-pread)'
     'IO#pread' (Instance Method)

'pred (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-pred)'
     'Integer#pred' (Instance Method)

'prepend (http://ruby-doc.org/core-2.5.1/Array.html#method-i-prepend)'
     'Array#prepend' (Instance Method)

'prepend (http://ruby-doc.org/core-2.5.1/Module.html#method-i-prepend)'
     'Module#prepend' (Instance Method)

'prepend (http://ruby-doc.org/core-2.5.1/String.html#method-i-prepend)'
     'String#prepend' (Instance Method)

'prepend_features (http://ruby-doc.org/core-2.5.1/Module.html#method-i-prepend_features)'
     'Module#prepend_features' (Instance Method)

'prepended (http://ruby-doc.org/core-2.5.1/Module.html#method-i-prepended)'
     'Module#prepended' (Instance Method)

'prev_float (http://ruby-doc.org/core-2.5.1/Float.html#method-i-prev_float)'
     'Float#prev_float' (Instance Method)

'primitive_convert (http://ruby-doc.org/core-2.5.1/Encoding/Converter.html#method-i-primitive_convert)'
     'Encoding/Converter#primitive_convert' (Instance Method)

'primitive_errinfo (http://ruby-doc.org/core-2.5.1/Encoding/Converter.html#method-i-primitive_errinfo)'
     'Encoding/Converter#primitive_errinfo' (Instance Method)

'print (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-print)'
     'ARGF#print' (Instance Method)

'print (http://ruby-doc.org/core-2.5.1/IO.html#method-i-print)'
     'IO#print' (Instance Method)

'print (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-print)'
     'Kernel#print' (Instance Method)

'printf (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-printf)'
     'ARGF#printf' (Instance Method)

'printf (http://ruby-doc.org/core-2.5.1/IO.html#method-i-printf)'
     'IO#printf' (Instance Method)

'printf (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-printf)'
     'Kernel#printf' (Instance Method)

'priority (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-priority)'
     'Thread#priority' (Instance Method)

'priority= (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-priority-3D)'
     'Thread#priority=' (Instance Method)

'private (http://ruby-doc.org/core-2.5.1/Module.html#method-i-private)'
     'Module#private' (Instance Method)

'private_call? (http://ruby-doc.org/core-2.5.1/NoMethodError.html#method-i-private_call-3F)'
     'NoMethodError#private_call?' (Instance Method)

'private_class_method (http://ruby-doc.org/core-2.5.1/Module.html#method-i-private_class_method)'
     'Module#private_class_method' (Instance Method)

'private_constant (http://ruby-doc.org/core-2.5.1/Module.html#method-i-private_constant)'
     'Module#private_constant' (Instance Method)

'private_instance_methods (http://ruby-doc.org/core-2.5.1/Module.html#method-i-private_instance_methods)'
     'Module#private_instance_methods' (Instance Method)

'private_method_defined? (http://ruby-doc.org/core-2.5.1/Module.html#method-i-private_method_defined-3F)'
     'Module#private_method_defined?' (Instance Method)

'private_methods (http://ruby-doc.org/core-2.5.1/Object.html#method-i-private_methods)'
     'Object#private_methods' (Instance Method)

'proc (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-proc)'
     'Kernel#proc' (Instance Method)

'product (http://ruby-doc.org/core-2.5.1/Array.html#method-i-product)'
     'Array#product' (Instance Method)

'protected (http://ruby-doc.org/core-2.5.1/Module.html#method-i-protected)'
     'Module#protected' (Instance Method)

'protected_instance_methods (http://ruby-doc.org/core-2.5.1/Module.html#method-i-protected_instance_methods)'
     'Module#protected_instance_methods' (Instance Method)

'protected_method_defined? (http://ruby-doc.org/core-2.5.1/Module.html#method-i-protected_method_defined-3F)'
     'Module#protected_method_defined?' (Instance Method)

'protected_methods (http://ruby-doc.org/core-2.5.1/Object.html#method-i-protected_methods)'
     'Object#protected_methods' (Instance Method)

'public (http://ruby-doc.org/core-2.5.1/Module.html#method-i-public)'
     'Module#public' (Instance Method)

'public_class_method (http://ruby-doc.org/core-2.5.1/Module.html#method-i-public_class_method)'
     'Module#public_class_method' (Instance Method)

'public_constant (http://ruby-doc.org/core-2.5.1/Module.html#method-i-public_constant)'
     'Module#public_constant' (Instance Method)

'public_instance_method (http://ruby-doc.org/core-2.5.1/Module.html#method-i-public_instance_method)'
     'Module#public_instance_method' (Instance Method)

'public_instance_methods (http://ruby-doc.org/core-2.5.1/Module.html#method-i-public_instance_methods)'
     'Module#public_instance_methods' (Instance Method)

'public_method (http://ruby-doc.org/core-2.5.1/Object.html#method-i-public_method)'
     'Object#public_method' (Instance Method)

'public_method_defined? (http://ruby-doc.org/core-2.5.1/Module.html#method-i-public_method_defined-3F)'
     'Module#public_method_defined?' (Instance Method)

'public_methods (http://ruby-doc.org/core-2.5.1/Object.html#method-i-public_methods)'
     'Object#public_methods' (Instance Method)

'public_send (http://ruby-doc.org/core-2.5.1/Object.html#method-i-public_send)'
     'Object#public_send' (Instance Method)

'push (http://ruby-doc.org/core-2.5.1/Array.html#method-i-push)'
     'Array#push' (Instance Method)

'push (http://ruby-doc.org/core-2.5.1/Queue.html#method-i-push)'
     'Queue#push' (Instance Method)

'push (http://ruby-doc.org/core-2.5.1/SizedQueue.html#method-i-push)'
     'SizedQueue#push' (Instance Method)

'putback (http://ruby-doc.org/core-2.5.1/Encoding/Converter.html#method-i-putback)'
     'Encoding/Converter#putback' (Instance Method)

'putc (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-putc)'
     'ARGF#putc' (Instance Method)

'putc (http://ruby-doc.org/core-2.5.1/IO.html#method-i-putc)'
     'IO#putc' (Instance Method)

'putc (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-putc)'
     'Kernel#putc' (Instance Method)

'puts (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-puts)'
     'ARGF#puts' (Instance Method)

'puts (http://ruby-doc.org/core-2.5.1/IO.html#method-i-puts)'
     'IO#puts' (Instance Method)

'puts (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-puts)'
     'Kernel#puts' (Instance Method)

'pwrite (http://ruby-doc.org/core-2.5.1/IO.html#method-i-pwrite)'
     'IO#pwrite' (Instance Method)

'quo (http://ruby-doc.org/core-2.5.1/Complex.html#method-i-quo)'
     'Complex#quo' (Instance Method)

'quo (http://ruby-doc.org/core-2.5.1/Float.html#method-i-quo)'
     'Float#quo' (Instance Method)

'quo (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-quo)'
     'Numeric#quo' (Instance Method)

'quo (http://ruby-doc.org/core-2.5.1/Rational.html#method-i-quo)'
     'Rational#quo' (Instance Method)

'raise (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-raise)'
     'Kernel#raise' (Instance Method)

'raise (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-raise)'
     'Thread#raise' (Instance Method)

'raised_exception (http://ruby-doc.org/core-2.5.1/TracePoint.html#method-i-raised_exception)'
     'TracePoint#raised_exception' (Instance Method)

'rand (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-rand)'
     'Kernel#rand' (Instance Method)

'rand (http://ruby-doc.org/core-2.5.1/Random.html#method-i-rand)'
     'Random#rand' (Instance Method)

'rand (http://ruby-doc.org/core-2.5.1/Random/Formatter.html#method-i-rand)'
     'Random/Formatter#rand' (Instance Method)

'random_number (http://ruby-doc.org/core-2.5.1/Random/Formatter.html#method-i-random_number)'
     'Random/Formatter#random_number' (Instance Method)

'rassoc (http://ruby-doc.org/core-2.5.1/Array.html#method-i-rassoc)'
     'Array#rassoc' (Instance Method)

'rassoc (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-rassoc)'
     'Hash#rassoc' (Instance Method)

'rationalize (http://ruby-doc.org/core-2.5.1/Complex.html#method-i-rationalize)'
     'Complex#rationalize' (Instance Method)

'rationalize (http://ruby-doc.org/core-2.5.1/Float.html#method-i-rationalize)'
     'Float#rationalize' (Instance Method)

'rationalize (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-rationalize)'
     'Integer#rationalize' (Instance Method)

'rationalize (http://ruby-doc.org/core-2.5.1/NilClass.html#method-i-rationalize)'
     'NilClass#rationalize' (Instance Method)

'rationalize (http://ruby-doc.org/core-2.5.1/Rational.html#method-i-rationalize)'
     'Rational#rationalize' (Instance Method)

'rdev (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-rdev)'
     'File/Stat#rdev' (Instance Method)

'rdev_major (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-rdev_major)'
     'File/Stat#rdev_major' (Instance Method)

'rdev_minor (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-rdev_minor)'
     'File/Stat#rdev_minor' (Instance Method)

'read (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-read)'
     'ARGF#read' (Instance Method)

'read (http://ruby-doc.org/core-2.5.1/Dir.html#method-i-read)'
     'Dir#read' (Instance Method)

'read (http://ruby-doc.org/core-2.5.1/IO.html#method-i-read)'
     'IO#read' (Instance Method)

'read_nonblock (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-read_nonblock)'
     'ARGF#read_nonblock' (Instance Method)

'read_nonblock (http://ruby-doc.org/core-2.5.1/IO.html#method-i-read_nonblock)'
     'IO#read_nonblock' (Instance Method)

'readable? (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-readable-3F)'
     'File/Stat#readable?' (Instance Method)

'readable? (http://ruby-doc.org/core-2.5.1/FileTest.html#method-i-readable-3F)'
     'FileTest#readable?' (Instance Method)

'readable_real? (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-readable_real-3F)'
     'File/Stat#readable_real?' (Instance Method)

'readable_real? (http://ruby-doc.org/core-2.5.1/FileTest.html#method-i-readable_real-3F)'
     'FileTest#readable_real?' (Instance Method)

'readagain_bytes (http://ruby-doc.org/core-2.5.1/Encoding/InvalidByteSequenceError.html#method-i-readagain_bytes)'
     'Encoding/InvalidByteSequenceError#readagain_bytes' (Instance
     Method)

'readbyte (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-readbyte)'
     'ARGF#readbyte' (Instance Method)

'readbyte (http://ruby-doc.org/core-2.5.1/IO.html#method-i-readbyte)'
     'IO#readbyte' (Instance Method)

'readchar (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-readchar)'
     'ARGF#readchar' (Instance Method)

'readchar (http://ruby-doc.org/core-2.5.1/IO.html#method-i-readchar)'
     'IO#readchar' (Instance Method)

'readline (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-readline)'
     'ARGF#readline' (Instance Method)

'readline (http://ruby-doc.org/core-2.5.1/IO.html#method-i-readline)'
     'IO#readline' (Instance Method)

'readline (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-readline)'
     'Kernel#readline' (Instance Method)

'readlines (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-readlines)'
     'ARGF#readlines' (Instance Method)

'readlines (http://ruby-doc.org/core-2.5.1/IO.html#method-i-readlines)'
     'IO#readlines' (Instance Method)

'readlines (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-readlines)'
     'Kernel#readlines' (Instance Method)

'readpartial (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-readpartial)'
     'ARGF#readpartial' (Instance Method)

'readpartial (http://ruby-doc.org/core-2.5.1/IO.html#method-i-readpartial)'
     'IO#readpartial' (Instance Method)

'real (http://ruby-doc.org/core-2.5.1/Complex.html#method-i-real)'
     'Complex#real' (Instance Method)

'real (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-real)'
     'Numeric#real' (Instance Method)

'real? (http://ruby-doc.org/core-2.5.1/Complex.html#method-i-real-3F)'
     'Complex#real?' (Instance Method)

'real? (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-real-3F)'
     'Numeric#real?' (Instance Method)

'reason (http://ruby-doc.org/core-2.5.1/LocalJumpError.html#method-i-reason)'
     'LocalJumpError#reason' (Instance Method)

'receiver (http://ruby-doc.org/core-2.5.1/Binding.html#method-i-receiver)'
     'Binding#receiver' (Instance Method)

'receiver (http://ruby-doc.org/core-2.5.1/KeyError.html#method-i-receiver)'
     'KeyError#receiver' (Instance Method)

'receiver (http://ruby-doc.org/core-2.5.1/Method.html#method-i-receiver)'
     'Method#receiver' (Instance Method)

'receiver (http://ruby-doc.org/core-2.5.1/NameError.html#method-i-receiver)'
     'NameError#receiver' (Instance Method)

'rect (http://ruby-doc.org/core-2.5.1/Complex.html#method-i-rect)'
     'Complex#rect' (Instance Method)

'rect (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-rect)'
     'Numeric#rect' (Instance Method)

'rectangular (http://ruby-doc.org/core-2.5.1/Complex.html#method-i-rectangular)'
     'Complex#rectangular' (Instance Method)

'rectangular (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-rectangular)'
     'Numeric#rectangular' (Instance Method)

'reduce (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-reduce)'
     'Enumerable#reduce' (Instance Method)

'refine (http://ruby-doc.org/core-2.5.1/Module.html#method-i-refine)'
     'Module#refine' (Instance Method)

'regexp (http://ruby-doc.org/core-2.5.1/MatchData.html#method-i-regexp)'
     'MatchData#regexp' (Instance Method)

'rehash (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-rehash)'
     'Hash#rehash' (Instance Method)

'reject (http://ruby-doc.org/core-2.5.1/Array.html#method-i-reject)'
     'Array#reject' (Instance Method)

'reject (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-reject)'
     'Enumerable#reject' (Instance Method)

'reject (http://ruby-doc.org/core-2.5.1/Enumerator/Lazy.html#method-i-reject)'
     'Enumerator/Lazy#reject' (Instance Method)

'reject (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-reject)'
     'Hash#reject' (Instance Method)

'reject! (http://ruby-doc.org/core-2.5.1/Array.html#method-i-reject-21)'
     'Array#reject!' (Instance Method)

'reject! (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-reject-21)'
     'Hash#reject!' (Instance Method)

'remainder (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-remainder)'
     'Integer#remainder' (Instance Method)

'remainder (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-remainder)'
     'Numeric#remainder' (Instance Method)

'remove_class_variable (http://ruby-doc.org/core-2.5.1/Module.html#method-i-remove_class_variable)'
     'Module#remove_class_variable' (Instance Method)

'remove_const (http://ruby-doc.org/core-2.5.1/Module.html#method-i-remove_const)'
     'Module#remove_const' (Instance Method)

'remove_instance_variable (http://ruby-doc.org/core-2.5.1/Object.html#method-i-remove_instance_variable)'
     'Object#remove_instance_variable' (Instance Method)

'remove_method (http://ruby-doc.org/core-2.5.1/Module.html#method-i-remove_method)'
     'Module#remove_method' (Instance Method)

'reopen (http://ruby-doc.org/core-2.5.1/IO.html#method-i-reopen)'
     'IO#reopen' (Instance Method)

'repeated_combination (http://ruby-doc.org/core-2.5.1/Array.html#method-i-repeated_combination)'
     'Array#repeated_combination' (Instance Method)

'repeated_permutation (http://ruby-doc.org/core-2.5.1/Array.html#method-i-repeated_permutation)'
     'Array#repeated_permutation' (Instance Method)

'replace (http://ruby-doc.org/core-2.5.1/Array.html#method-i-replace)'
     'Array#replace' (Instance Method)

'replace (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-replace)'
     'Hash#replace' (Instance Method)

'replace (http://ruby-doc.org/core-2.5.1/String.html#method-i-replace)'
     'String#replace' (Instance Method)

'replacement (http://ruby-doc.org/core-2.5.1/Encoding/Converter.html#method-i-replacement)'
     'Encoding/Converter#replacement' (Instance Method)

'replacement= (http://ruby-doc.org/core-2.5.1/Encoding/Converter.html#method-i-replacement-3D)'
     'Encoding/Converter#replacement=' (Instance Method)

'replicate (http://ruby-doc.org/core-2.5.1/Encoding.html#method-i-replicate)'
     'Encoding#replicate' (Instance Method)

'report_on_exception (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-report_on_exception)'
     'Thread#report_on_exception' (Instance Method)

'report_on_exception= (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-report_on_exception-3D)'
     'Thread#report_on_exception=' (Instance Method)

'require (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-require)'
     'Kernel#require' (Instance Method)

'require_relative (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-require_relative)'
     'Kernel#require_relative' (Instance Method)

'respond_to? (http://ruby-doc.org/core-2.5.1/Object.html#method-i-respond_to-3F)'
     'Object#respond_to?' (Instance Method)

'respond_to_missing? (http://ruby-doc.org/core-2.5.1/Object.html#method-i-respond_to_missing-3F)'
     'Object#respond_to_missing?' (Instance Method)

'result (http://ruby-doc.org/core-2.5.1/StopIteration.html#method-i-result)'
     'StopIteration#result' (Instance Method)

'resume (http://ruby-doc.org/core-2.5.1/Fiber.html#method-i-resume)'
     'Fiber#resume' (Instance Method)

'return_value (http://ruby-doc.org/core-2.5.1/TracePoint.html#method-i-return_value)'
     'TracePoint#return_value' (Instance Method)

'reverse (http://ruby-doc.org/core-2.5.1/Array.html#method-i-reverse)'
     'Array#reverse' (Instance Method)

'reverse (http://ruby-doc.org/core-2.5.1/String.html#method-i-reverse)'
     'String#reverse' (Instance Method)

'reverse! (http://ruby-doc.org/core-2.5.1/Array.html#method-i-reverse-21)'
     'Array#reverse!' (Instance Method)

'reverse! (http://ruby-doc.org/core-2.5.1/String.html#method-i-reverse-21)'
     'String#reverse!' (Instance Method)

'reverse_each (http://ruby-doc.org/core-2.5.1/Array.html#method-i-reverse_each)'
     'Array#reverse_each' (Instance Method)

'reverse_each (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-reverse_each)'
     'Enumerable#reverse_each' (Instance Method)

'rewind (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-rewind)'
     'ARGF#rewind' (Instance Method)

'rewind (http://ruby-doc.org/core-2.5.1/Dir.html#method-i-rewind)'
     'Dir#rewind' (Instance Method)

'rewind (http://ruby-doc.org/core-2.5.1/Enumerator.html#method-i-rewind)'
     'Enumerator#rewind' (Instance Method)

'rewind (http://ruby-doc.org/core-2.5.1/IO.html#method-i-rewind)'
     'IO#rewind' (Instance Method)

'rindex (http://ruby-doc.org/core-2.5.1/Array.html#method-i-rindex)'
     'Array#rindex' (Instance Method)

'rindex (http://ruby-doc.org/core-2.5.1/String.html#method-i-rindex)'
     'String#rindex' (Instance Method)

'rjust (http://ruby-doc.org/core-2.5.1/String.html#method-i-rjust)'
     'String#rjust' (Instance Method)

'rotate (http://ruby-doc.org/core-2.5.1/Array.html#method-i-rotate)'
     'Array#rotate' (Instance Method)

'rotate! (http://ruby-doc.org/core-2.5.1/Array.html#method-i-rotate-21)'
     'Array#rotate!' (Instance Method)

'round (http://ruby-doc.org/core-2.5.1/Float.html#method-i-round)'
     'Float#round' (Instance Method)

'round (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-round)'
     'Integer#round' (Instance Method)

'round (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-round)'
     'Numeric#round' (Instance Method)

'round (http://ruby-doc.org/core-2.5.1/Rational.html#method-i-round)'
     'Rational#round' (Instance Method)

'round (http://ruby-doc.org/core-2.5.1/Time.html#method-i-round)'
     'Time#round' (Instance Method)

'rpartition (http://ruby-doc.org/core-2.5.1/String.html#method-i-rpartition)'
     'String#rpartition' (Instance Method)

'rstrip (http://ruby-doc.org/core-2.5.1/String.html#method-i-rstrip)'
     'String#rstrip' (Instance Method)

'rstrip! (http://ruby-doc.org/core-2.5.1/String.html#method-i-rstrip-21)'
     'String#rstrip!' (Instance Method)

'run (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-run)'
     'Thread#run' (Instance Method)

'safe_level (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-safe_level)'
     'Thread#safe_level' (Instance Method)

'sample (http://ruby-doc.org/core-2.5.1/Array.html#method-i-sample)'
     'Array#sample' (Instance Method)

'saturday? (http://ruby-doc.org/core-2.5.1/Time.html#method-i-saturday-3F)'
     'Time#saturday?' (Instance Method)

'scan (http://ruby-doc.org/core-2.5.1/String.html#method-i-scan)'
     'String#scan' (Instance Method)

'scrub (http://ruby-doc.org/core-2.5.1/String.html#method-i-scrub)'
     'String#scrub' (Instance Method)

'scrub! (http://ruby-doc.org/core-2.5.1/String.html#method-i-scrub-21)'
     'String#scrub!' (Instance Method)

'sec (http://ruby-doc.org/core-2.5.1/Time.html#method-i-sec)'
     'Time#sec' (Instance Method)

'seed (http://ruby-doc.org/core-2.5.1/Random.html#method-i-seed)'
     'Random#seed' (Instance Method)

'seek (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-seek)'
     'ARGF#seek' (Instance Method)

'seek (http://ruby-doc.org/core-2.5.1/Dir.html#method-i-seek)'
     'Dir#seek' (Instance Method)

'seek (http://ruby-doc.org/core-2.5.1/IO.html#method-i-seek)'
     'IO#seek' (Instance Method)

'select (http://ruby-doc.org/core-2.5.1/Array.html#method-i-select)'
     'Array#select' (Instance Method)

'select (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-select)'
     'Enumerable#select' (Instance Method)

'select (http://ruby-doc.org/core-2.5.1/Enumerator/Lazy.html#method-i-select)'
     'Enumerator/Lazy#select' (Instance Method)

'select (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-select)'
     'Hash#select' (Instance Method)

'select (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-select)'
     'Kernel#select' (Instance Method)

'select (http://ruby-doc.org/core-2.5.1/Struct.html#method-i-select)'
     'Struct#select' (Instance Method)

'select! (http://ruby-doc.org/core-2.5.1/Array.html#method-i-select-21)'
     'Array#select!' (Instance Method)

'select! (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-select-21)'
     'Hash#select!' (Instance Method)

'self (http://ruby-doc.org/core-2.5.1/TracePoint.html#method-i-self)'
     'TracePoint#self' (Instance Method)

'send (http://ruby-doc.org/core-2.5.1/Object.html#method-i-send)'
     'Object#send' (Instance Method)

'set_backtrace (http://ruby-doc.org/core-2.5.1/Exception.html#method-i-set_backtrace)'
     'Exception#set_backtrace' (Instance Method)

'set_encoding (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-set_encoding)'
     'ARGF#set_encoding' (Instance Method)

'set_encoding (http://ruby-doc.org/core-2.5.1/IO.html#method-i-set_encoding)'
     'IO#set_encoding' (Instance Method)

'set_trace_func (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-set_trace_func)'
     'Kernel#set_trace_func' (Instance Method)

'set_trace_func (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-set_trace_func)'
     'Thread#set_trace_func' (Instance Method)

'setbyte (http://ruby-doc.org/core-2.5.1/String.html#method-i-setbyte)'
     'String#setbyte' (Instance Method)

'setgid? (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-setgid-3F)'
     'File/Stat#setgid?' (Instance Method)

'setgid? (http://ruby-doc.org/core-2.5.1/FileTest.html#method-i-setgid-3F)'
     'FileTest#setgid?' (Instance Method)

'setuid? (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-setuid-3F)'
     'File/Stat#setuid?' (Instance Method)

'setuid? (http://ruby-doc.org/core-2.5.1/FileTest.html#method-i-setuid-3F)'
     'FileTest#setuid?' (Instance Method)

'shift (http://ruby-doc.org/core-2.5.1/Array.html#method-i-shift)'
     'Array#shift' (Instance Method)

'shift (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-shift)'
     'Hash#shift' (Instance Method)

'shift (http://ruby-doc.org/core-2.5.1/Queue.html#method-i-shift)'
     'Queue#shift' (Instance Method)

'shift (http://ruby-doc.org/core-2.5.1/SizedQueue.html#method-i-shift)'
     'SizedQueue#shift' (Instance Method)

'shuffle (http://ruby-doc.org/core-2.5.1/Array.html#method-i-shuffle)'
     'Array#shuffle' (Instance Method)

'shuffle! (http://ruby-doc.org/core-2.5.1/Array.html#method-i-shuffle-21)'
     'Array#shuffle!' (Instance Method)

'signal (http://ruby-doc.org/core-2.5.1/ConditionVariable.html#method-i-signal)'
     'ConditionVariable#signal' (Instance Method)

'signaled? (http://ruby-doc.org/core-2.5.1/Process/Status.html#method-i-signaled-3F)'
     'Process/Status#signaled?' (Instance Method)

'signo (http://ruby-doc.org/core-2.5.1/SignalException.html#method-i-signo)'
     'SignalException#signo' (Instance Method)

'singleton_class (http://ruby-doc.org/core-2.5.1/Object.html#method-i-singleton_class)'
     'Object#singleton_class' (Instance Method)

'singleton_class? (http://ruby-doc.org/core-2.5.1/Module.html#method-i-singleton_class-3F)'
     'Module#singleton_class?' (Instance Method)

'singleton_method (http://ruby-doc.org/core-2.5.1/Object.html#method-i-singleton_method)'
     'Object#singleton_method' (Instance Method)

'singleton_method_added (http://ruby-doc.org/core-2.5.1/BasicObject.html#method-i-singleton_method_added)'
     'BasicObject#singleton_method_added' (Instance Method)

'singleton_method_removed (http://ruby-doc.org/core-2.5.1/BasicObject.html#method-i-singleton_method_removed)'
     'BasicObject#singleton_method_removed' (Instance Method)

'singleton_method_undefined (http://ruby-doc.org/core-2.5.1/BasicObject.html#method-i-singleton_method_undefined)'
     'BasicObject#singleton_method_undefined' (Instance Method)

'singleton_methods (http://ruby-doc.org/core-2.5.1/Object.html#method-i-singleton_methods)'
     'Object#singleton_methods' (Instance Method)

'size (http://ruby-doc.org/core-2.5.1/Array.html#method-i-size)'
     'Array#size' (Instance Method)

'size (http://ruby-doc.org/core-2.5.1/Enumerator.html#method-i-size)'
     'Enumerator#size' (Instance Method)

'size (http://ruby-doc.org/core-2.5.1/File.html#method-i-size)'
     'File#size' (Instance Method)

'size (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-size)'
     'File/Stat#size' (Instance Method)

'size (http://ruby-doc.org/core-2.5.1/FileTest.html#method-i-size)'
     'FileTest#size' (Instance Method)

'size (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-size)'
     'Hash#size' (Instance Method)

'size (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-size)'
     'Integer#size' (Instance Method)

'size (http://ruby-doc.org/core-2.5.1/MatchData.html#method-i-size)'
     'MatchData#size' (Instance Method)

'size (http://ruby-doc.org/core-2.5.1/ObjectSpace/WeakMap.html#method-i-size)'
     'ObjectSpace/WeakMap#size' (Instance Method)

'size (http://ruby-doc.org/core-2.5.1/Queue.html#method-i-size)'
     'Queue#size' (Instance Method)

'size (http://ruby-doc.org/core-2.5.1/Range.html#method-i-size)'
     'Range#size' (Instance Method)

'size (http://ruby-doc.org/core-2.5.1/SizedQueue.html#method-i-size)'
     'SizedQueue#size' (Instance Method)

'size (http://ruby-doc.org/core-2.5.1/String.html#method-i-size)'
     'String#size' (Instance Method)

'size (http://ruby-doc.org/core-2.5.1/Struct.html#method-i-size)'
     'Struct#size' (Instance Method)

'size (http://ruby-doc.org/core-2.5.1/Symbol.html#method-i-size)'
     'Symbol#size' (Instance Method)

'size? (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-size-3F)'
     'File/Stat#size?' (Instance Method)

'size? (http://ruby-doc.org/core-2.5.1/FileTest.html#method-i-size-3F)'
     'FileTest#size?' (Instance Method)

'skip (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-skip)'
     'ARGF#skip' (Instance Method)

'sleep (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-sleep)'
     'Kernel#sleep' (Instance Method)

'sleep (http://ruby-doc.org/core-2.5.1/Mutex.html#method-i-sleep)'
     'Mutex#sleep' (Instance Method)

'slice (http://ruby-doc.org/core-2.5.1/Array.html#method-i-slice)'
     'Array#slice' (Instance Method)

'slice (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-slice)'
     'Hash#slice' (Instance Method)

'slice (http://ruby-doc.org/core-2.5.1/String.html#method-i-slice)'
     'String#slice' (Instance Method)

'slice (http://ruby-doc.org/core-2.5.1/Symbol.html#method-i-slice)'
     'Symbol#slice' (Instance Method)

'slice! (http://ruby-doc.org/core-2.5.1/Array.html#method-i-slice-21)'
     'Array#slice!' (Instance Method)

'slice! (http://ruby-doc.org/core-2.5.1/String.html#method-i-slice-21)'
     'String#slice!' (Instance Method)

'slice_after (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-slice_after)'
     'Enumerable#slice_after' (Instance Method)

'slice_after (http://ruby-doc.org/core-2.5.1/Enumerator/Lazy.html#method-i-slice_after)'
     'Enumerator/Lazy#slice_after' (Instance Method)

'slice_before (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-slice_before)'
     'Enumerable#slice_before' (Instance Method)

'slice_before (http://ruby-doc.org/core-2.5.1/Enumerator/Lazy.html#method-i-slice_before)'
     'Enumerator/Lazy#slice_before' (Instance Method)

'slice_when (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-slice_when)'
     'Enumerable#slice_when' (Instance Method)

'slice_when (http://ruby-doc.org/core-2.5.1/Enumerator/Lazy.html#method-i-slice_when)'
     'Enumerator/Lazy#slice_when' (Instance Method)

'socket? (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-socket-3F)'
     'File/Stat#socket?' (Instance Method)

'socket? (http://ruby-doc.org/core-2.5.1/FileTest.html#method-i-socket-3F)'
     'FileTest#socket?' (Instance Method)

'sort (http://ruby-doc.org/core-2.5.1/Array.html#method-i-sort)'
     'Array#sort' (Instance Method)

'sort (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-sort)'
     'Enumerable#sort' (Instance Method)

'sort! (http://ruby-doc.org/core-2.5.1/Array.html#method-i-sort-21)'
     'Array#sort!' (Instance Method)

'sort_by (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-sort_by)'
     'Enumerable#sort_by' (Instance Method)

'sort_by! (http://ruby-doc.org/core-2.5.1/Array.html#method-i-sort_by-21)'
     'Array#sort_by!' (Instance Method)

'source (http://ruby-doc.org/core-2.5.1/Regexp.html#method-i-source)'
     'Regexp#source' (Instance Method)

'source_encoding (http://ruby-doc.org/core-2.5.1/Encoding/Converter.html#method-i-source_encoding)'
     'Encoding/Converter#source_encoding' (Instance Method)

'source_encoding (http://ruby-doc.org/core-2.5.1/Encoding/InvalidByteSequenceError.html#method-i-source_encoding)'
     'Encoding/InvalidByteSequenceError#source_encoding' (Instance
     Method)

'source_encoding (http://ruby-doc.org/core-2.5.1/Encoding/UndefinedConversionError.html#method-i-source_encoding)'
     'Encoding/UndefinedConversionError#source_encoding' (Instance
     Method)

'source_encoding_name (http://ruby-doc.org/core-2.5.1/Encoding/InvalidByteSequenceError.html#method-i-source_encoding_name)'
     'Encoding/InvalidByteSequenceError#source_encoding_name'
     (Instance Method)

'source_encoding_name (http://ruby-doc.org/core-2.5.1/Encoding/UndefinedConversionError.html#method-i-source_encoding_name)'
     'Encoding/UndefinedConversionError#source_encoding_name'
     (Instance Method)

'source_location (http://ruby-doc.org/core-2.5.1/Method.html#method-i-source_location)'
     'Method#source_location' (Instance Method)

'source_location (http://ruby-doc.org/core-2.5.1/Proc.html#method-i-source_location)'
     'Proc#source_location' (Instance Method)

'source_location (http://ruby-doc.org/core-2.5.1/UnboundMethod.html#method-i-source_location)'
     'UnboundMethod#source_location' (Instance Method)

'spawn (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-spawn)'
     'Kernel#spawn' (Instance Method)

'split (http://ruby-doc.org/core-2.5.1/String.html#method-i-split)'
     'String#split' (Instance Method)

'sprintf (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-sprintf)'
     'Kernel#sprintf' (Instance Method)

'squeeze (http://ruby-doc.org/core-2.5.1/String.html#method-i-squeeze)'
     'String#squeeze' (Instance Method)

'squeeze! (http://ruby-doc.org/core-2.5.1/String.html#method-i-squeeze-21)'
     'String#squeeze!' (Instance Method)

'srand (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-srand)'
     'Kernel#srand' (Instance Method)

'start_with? (http://ruby-doc.org/core-2.5.1/String.html#method-i-start_with-3F)'
     'String#start_with?' (Instance Method)

'stat (http://ruby-doc.org/core-2.5.1/IO.html#method-i-stat)'
     'IO#stat' (Instance Method)

'status (http://ruby-doc.org/core-2.5.1/SystemExit.html#method-i-status)'
     'SystemExit#status' (Instance Method)

'status (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-status)'
     'Thread#status' (Instance Method)

'step (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-step)'
     'Numeric#step' (Instance Method)

'step (http://ruby-doc.org/core-2.5.1/Range.html#method-i-step)'
     'Range#step' (Instance Method)

'sticky? (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-sticky-3F)'
     'File/Stat#sticky?' (Instance Method)

'sticky? (http://ruby-doc.org/core-2.5.1/FileTest.html#method-i-sticky-3F)'
     'FileTest#sticky?' (Instance Method)

'stop? (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-stop-3F)'
     'Thread#stop?' (Instance Method)

'stopped? (http://ruby-doc.org/core-2.5.1/Process/Status.html#method-i-stopped-3F)'
     'Process/Status#stopped?' (Instance Method)

'stopsig (http://ruby-doc.org/core-2.5.1/Process/Status.html#method-i-stopsig)'
     'Process/Status#stopsig' (Instance Method)

'store (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-store)'
     'Hash#store' (Instance Method)

'strftime (http://ruby-doc.org/core-2.5.1/Time.html#method-i-strftime)'
     'Time#strftime' (Instance Method)

'string (http://ruby-doc.org/core-2.5.1/MatchData.html#method-i-string)'
     'MatchData#string' (Instance Method)

'strip (http://ruby-doc.org/core-2.5.1/String.html#method-i-strip)'
     'String#strip' (Instance Method)

'strip! (http://ruby-doc.org/core-2.5.1/String.html#method-i-strip-21)'
     'String#strip!' (Instance Method)

'sub (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-sub)'
     'Kernel#sub' (Instance Method)

'sub (http://ruby-doc.org/core-2.5.1/String.html#method-i-sub)'
     'String#sub' (Instance Method)

'sub! (http://ruby-doc.org/core-2.5.1/String.html#method-i-sub-21)'
     'String#sub!' (Instance Method)

'subsec (http://ruby-doc.org/core-2.5.1/Time.html#method-i-subsec)'
     'Time#subsec' (Instance Method)

'succ (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-succ)'
     'Integer#succ' (Instance Method)

'succ (http://ruby-doc.org/core-2.5.1/String.html#method-i-succ)'
     'String#succ' (Instance Method)

'succ (http://ruby-doc.org/core-2.5.1/Symbol.html#method-i-succ)'
     'Symbol#succ' (Instance Method)

'succ (http://ruby-doc.org/core-2.5.1/Time.html#method-i-succ)'
     'Time#succ' (Instance Method)

'succ! (http://ruby-doc.org/core-2.5.1/String.html#method-i-succ-21)'
     'String#succ!' (Instance Method)

'success? (http://ruby-doc.org/core-2.5.1/Process/Status.html#method-i-success-3F)'
     'Process/Status#success?' (Instance Method)

'success? (http://ruby-doc.org/core-2.5.1/SystemExit.html#method-i-success-3F)'
     'SystemExit#success?' (Instance Method)

'sum (http://ruby-doc.org/core-2.5.1/Array.html#method-i-sum)'
     'Array#sum' (Instance Method)

'sum (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-sum)'
     'Enumerable#sum' (Instance Method)

'sum (http://ruby-doc.org/core-2.5.1/String.html#method-i-sum)'
     'String#sum' (Instance Method)

'sunday? (http://ruby-doc.org/core-2.5.1/Time.html#method-i-sunday-3F)'
     'Time#sunday?' (Instance Method)

'super_method (http://ruby-doc.org/core-2.5.1/Method.html#method-i-super_method)'
     'Method#super_method' (Instance Method)

'super_method (http://ruby-doc.org/core-2.5.1/UnboundMethod.html#method-i-super_method)'
     'UnboundMethod#super_method' (Instance Method)

'superclass (http://ruby-doc.org/core-2.5.1/Class.html#method-i-superclass)'
     'Class#superclass' (Instance Method)

'swapcase (http://ruby-doc.org/core-2.5.1/String.html#method-i-swapcase)'
     'String#swapcase' (Instance Method)

'swapcase (http://ruby-doc.org/core-2.5.1/Symbol.html#method-i-swapcase)'
     'Symbol#swapcase' (Instance Method)

'swapcase! (http://ruby-doc.org/core-2.5.1/String.html#method-i-swapcase-21)'
     'String#swapcase!' (Instance Method)

'symlink? (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-symlink-3F)'
     'File/Stat#symlink?' (Instance Method)

'symlink? (http://ruby-doc.org/core-2.5.1/FileTest.html#method-i-symlink-3F)'
     'FileTest#symlink?' (Instance Method)

'sync (http://ruby-doc.org/core-2.5.1/IO.html#method-i-sync)'
     'IO#sync' (Instance Method)

'sync= (http://ruby-doc.org/core-2.5.1/IO.html#method-i-sync-3D)'
     'IO#sync=' (Instance Method)

'synchronize (http://ruby-doc.org/core-2.5.1/Mutex.html#method-i-synchronize)'
     'Mutex#synchronize' (Instance Method)

'syscall (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-syscall)'
     'Kernel#syscall' (Instance Method)

'sysread (http://ruby-doc.org/core-2.5.1/IO.html#method-i-sysread)'
     'IO#sysread' (Instance Method)

'sysseek (http://ruby-doc.org/core-2.5.1/IO.html#method-i-sysseek)'
     'IO#sysseek' (Instance Method)

'system (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-system)'
     'Kernel#system' (Instance Method)

'syswrite (http://ruby-doc.org/core-2.5.1/IO.html#method-i-syswrite)'
     'IO#syswrite' (Instance Method)

'tag (http://ruby-doc.org/core-2.5.1/UncaughtThrowError.html#method-i-tag)'
     'UncaughtThrowError#tag' (Instance Method)

'taint (http://ruby-doc.org/core-2.5.1/Object.html#method-i-taint)'
     'Object#taint' (Instance Method)

'tainted? (http://ruby-doc.org/core-2.5.1/Object.html#method-i-tainted-3F)'
     'Object#tainted?' (Instance Method)

'take (http://ruby-doc.org/core-2.5.1/Array.html#method-i-take)'
     'Array#take' (Instance Method)

'take (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-take)'
     'Enumerable#take' (Instance Method)

'take (http://ruby-doc.org/core-2.5.1/Enumerator/Lazy.html#method-i-take)'
     'Enumerator/Lazy#take' (Instance Method)

'take_while (http://ruby-doc.org/core-2.5.1/Array.html#method-i-take_while)'
     'Array#take_while' (Instance Method)

'take_while (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-take_while)'
     'Enumerable#take_while' (Instance Method)

'take_while (http://ruby-doc.org/core-2.5.1/Enumerator/Lazy.html#method-i-take_while)'
     'Enumerator/Lazy#take_while' (Instance Method)

'tap (http://ruby-doc.org/core-2.5.1/Object.html#method-i-tap)'
     'Object#tap' (Instance Method)

'tell (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-tell)'
     'ARGF#tell' (Instance Method)

'tell (http://ruby-doc.org/core-2.5.1/Dir.html#method-i-tell)'
     'Dir#tell' (Instance Method)

'tell (http://ruby-doc.org/core-2.5.1/IO.html#method-i-tell)'
     'IO#tell' (Instance Method)

'terminate (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-terminate)'
     'Thread#terminate' (Instance Method)

'termsig (http://ruby-doc.org/core-2.5.1/Process/Status.html#method-i-termsig)'
     'Process/Status#termsig' (Instance Method)

'test (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-test)'
     'Kernel#test' (Instance Method)

'thread_variable? (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-thread_variable-3F)'
     'Thread#thread_variable?' (Instance Method)

'thread_variable_get (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-thread_variable_get)'
     'Thread#thread_variable_get' (Instance Method)

'thread_variable_set (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-thread_variable_set)'
     'Thread#thread_variable_set' (Instance Method)

'thread_variables (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-thread_variables)'
     'Thread#thread_variables' (Instance Method)

'throw (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-throw)'
     'Kernel#throw' (Instance Method)

'thursday? (http://ruby-doc.org/core-2.5.1/Time.html#method-i-thursday-3F)'
     'Time#thursday?' (Instance Method)

'times (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-times)'
     'Integer#times' (Instance Method)

'to_a (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-to_a)'
     'ARGF#to_a' (Instance Method)

'to_a (http://ruby-doc.org/core-2.5.1/Array.html#method-i-to_a)'
     'Array#to_a' (Instance Method)

'to_a (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-to_a)'
     'Enumerable#to_a' (Instance Method)

'to_a (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-to_a)'
     'Hash#to_a' (Instance Method)

'to_a (http://ruby-doc.org/core-2.5.1/MatchData.html#method-i-to_a)'
     'MatchData#to_a' (Instance Method)

'to_a (http://ruby-doc.org/core-2.5.1/NilClass.html#method-i-to_a)'
     'NilClass#to_a' (Instance Method)

'to_a (http://ruby-doc.org/core-2.5.1/RubyVM/InstructionSequence.html#method-i-to_a)'
     'RubyVM/InstructionSequence#to_a' (Instance Method)

'to_a (http://ruby-doc.org/core-2.5.1/Struct.html#method-i-to_a)'
     'Struct#to_a' (Instance Method)

'to_a (http://ruby-doc.org/core-2.5.1/Time.html#method-i-to_a)'
     'Time#to_a' (Instance Method)

'to_ary (http://ruby-doc.org/core-2.5.1/Array.html#method-i-to_ary)'
     'Array#to_ary' (Instance Method)

'to_binary (http://ruby-doc.org/core-2.5.1/RubyVM/InstructionSequence.html#method-i-to_binary)'
     'RubyVM/InstructionSequence#to_binary' (Instance Method)

'to_c (http://ruby-doc.org/core-2.5.1/Complex.html#method-i-to_c)'
     'Complex#to_c' (Instance Method)

'to_c (http://ruby-doc.org/core-2.5.1/NilClass.html#method-i-to_c)'
     'NilClass#to_c' (Instance Method)

'to_c (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-to_c)'
     'Numeric#to_c' (Instance Method)

'to_c (http://ruby-doc.org/core-2.5.1/String.html#method-i-to_c)'
     'String#to_c' (Instance Method)

'to_enum (http://ruby-doc.org/core-2.5.1/Enumerator/Lazy.html#method-i-to_enum)'
     'Enumerator/Lazy#to_enum' (Instance Method)

'to_enum (http://ruby-doc.org/core-2.5.1/Object.html#method-i-to_enum)'
     'Object#to_enum' (Instance Method)

'to_f (http://ruby-doc.org/core-2.5.1/Complex.html#method-i-to_f)'
     'Complex#to_f' (Instance Method)

'to_f (http://ruby-doc.org/core-2.5.1/Float.html#method-i-to_f)'
     'Float#to_f' (Instance Method)

'to_f (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-to_f)'
     'Integer#to_f' (Instance Method)

'to_f (http://ruby-doc.org/core-2.5.1/NilClass.html#method-i-to_f)'
     'NilClass#to_f' (Instance Method)

'to_f (http://ruby-doc.org/core-2.5.1/Rational.html#method-i-to_f)'
     'Rational#to_f' (Instance Method)

'to_f (http://ruby-doc.org/core-2.5.1/String.html#method-i-to_f)'
     'String#to_f' (Instance Method)

'to_f (http://ruby-doc.org/core-2.5.1/Time.html#method-i-to_f)'
     'Time#to_f' (Instance Method)

'to_h (http://ruby-doc.org/core-2.5.1/Array.html#method-i-to_h)'
     'Array#to_h' (Instance Method)

'to_h (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-to_h)'
     'Enumerable#to_h' (Instance Method)

'to_h (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-to_h)'
     'Hash#to_h' (Instance Method)

'to_h (http://ruby-doc.org/core-2.5.1/NilClass.html#method-i-to_h)'
     'NilClass#to_h' (Instance Method)

'to_h (http://ruby-doc.org/core-2.5.1/Struct.html#method-i-to_h)'
     'Struct#to_h' (Instance Method)

'to_hash (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-to_hash)'
     'Hash#to_hash' (Instance Method)

'to_i (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-to_i)'
     'ARGF#to_i' (Instance Method)

'to_i (http://ruby-doc.org/core-2.5.1/Complex.html#method-i-to_i)'
     'Complex#to_i' (Instance Method)

'to_i (http://ruby-doc.org/core-2.5.1/Float.html#method-i-to_i)'
     'Float#to_i' (Instance Method)

'to_i (http://ruby-doc.org/core-2.5.1/IO.html#method-i-to_i)'
     'IO#to_i' (Instance Method)

'to_i (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-to_i)'
     'Integer#to_i' (Instance Method)

'to_i (http://ruby-doc.org/core-2.5.1/NilClass.html#method-i-to_i)'
     'NilClass#to_i' (Instance Method)

'to_i (http://ruby-doc.org/core-2.5.1/Process/Status.html#method-i-to_i)'
     'Process/Status#to_i' (Instance Method)

'to_i (http://ruby-doc.org/core-2.5.1/Rational.html#method-i-to_i)'
     'Rational#to_i' (Instance Method)

'to_i (http://ruby-doc.org/core-2.5.1/String.html#method-i-to_i)'
     'String#to_i' (Instance Method)

'to_i (http://ruby-doc.org/core-2.5.1/Time.html#method-i-to_i)'
     'Time#to_i' (Instance Method)

'to_int (http://ruby-doc.org/core-2.5.1/Float.html#method-i-to_int)'
     'Float#to_int' (Instance Method)

'to_int (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-to_int)'
     'Integer#to_int' (Instance Method)

'to_int (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-to_int)'
     'Numeric#to_int' (Instance Method)

'to_io (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-to_io)'
     'ARGF#to_io' (Instance Method)

'to_io (http://ruby-doc.org/core-2.5.1/IO.html#method-i-to_io)'
     'IO#to_io' (Instance Method)

'to_path (http://ruby-doc.org/core-2.5.1/Dir.html#method-i-to_path)'
     'Dir#to_path' (Instance Method)

'to_path (http://ruby-doc.org/core-2.5.1/File.html#method-i-to_path)'
     'File#to_path' (Instance Method)

'to_proc (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-to_proc)'
     'Hash#to_proc' (Instance Method)

'to_proc (http://ruby-doc.org/core-2.5.1/Method.html#method-i-to_proc)'
     'Method#to_proc' (Instance Method)

'to_proc (http://ruby-doc.org/core-2.5.1/Proc.html#method-i-to_proc)'
     'Proc#to_proc' (Instance Method)

'to_proc (http://ruby-doc.org/core-2.5.1/Symbol.html#method-i-to_proc)'
     'Symbol#to_proc' (Instance Method)

'to_r (http://ruby-doc.org/core-2.5.1/Complex.html#method-i-to_r)'
     'Complex#to_r' (Instance Method)

'to_r (http://ruby-doc.org/core-2.5.1/Float.html#method-i-to_r)'
     'Float#to_r' (Instance Method)

'to_r (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-to_r)'
     'Integer#to_r' (Instance Method)

'to_r (http://ruby-doc.org/core-2.5.1/NilClass.html#method-i-to_r)'
     'NilClass#to_r' (Instance Method)

'to_r (http://ruby-doc.org/core-2.5.1/Rational.html#method-i-to_r)'
     'Rational#to_r' (Instance Method)

'to_r (http://ruby-doc.org/core-2.5.1/String.html#method-i-to_r)'
     'String#to_r' (Instance Method)

'to_r (http://ruby-doc.org/core-2.5.1/Time.html#method-i-to_r)'
     'Time#to_r' (Instance Method)

'to_s (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-to_s)'
     'ARGF#to_s' (Instance Method)

'to_s (http://ruby-doc.org/core-2.5.1/Array.html#method-i-to_s)'
     'Array#to_s' (Instance Method)

'to_s (http://ruby-doc.org/core-2.5.1/Complex.html#method-i-to_s)'
     'Complex#to_s' (Instance Method)

'to_s (http://ruby-doc.org/core-2.5.1/Encoding.html#method-i-to_s)'
     'Encoding#to_s' (Instance Method)

'to_s (http://ruby-doc.org/core-2.5.1/Exception.html#method-i-to_s)'
     'Exception#to_s' (Instance Method)

'to_s (http://ruby-doc.org/core-2.5.1/FalseClass.html#method-i-to_s)'
     'FalseClass#to_s' (Instance Method)

'to_s (http://ruby-doc.org/core-2.5.1/Fiber.html#method-i-to_s)'
     'Fiber#to_s' (Instance Method)

'to_s (http://ruby-doc.org/core-2.5.1/Float.html#method-i-to_s)'
     'Float#to_s' (Instance Method)

'to_s (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-to_s)'
     'Hash#to_s' (Instance Method)

'to_s (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-to_s)'
     'Integer#to_s' (Instance Method)

'to_s (http://ruby-doc.org/core-2.5.1/MatchData.html#method-i-to_s)'
     'MatchData#to_s' (Instance Method)

'to_s (http://ruby-doc.org/core-2.5.1/Method.html#method-i-to_s)'
     'Method#to_s' (Instance Method)

'to_s (http://ruby-doc.org/core-2.5.1/Module.html#method-i-to_s)'
     'Module#to_s' (Instance Method)

'to_s (http://ruby-doc.org/core-2.5.1/NilClass.html#method-i-to_s)'
     'NilClass#to_s' (Instance Method)

'to_s (http://ruby-doc.org/core-2.5.1/Object.html#method-i-to_s)'
     'Object#to_s' (Instance Method)

'to_s (http://ruby-doc.org/core-2.5.1/Proc.html#method-i-to_s)'
     'Proc#to_s' (Instance Method)

'to_s (http://ruby-doc.org/core-2.5.1/Process/Status.html#method-i-to_s)'
     'Process/Status#to_s' (Instance Method)

'to_s (http://ruby-doc.org/core-2.5.1/Range.html#method-i-to_s)'
     'Range#to_s' (Instance Method)

'to_s (http://ruby-doc.org/core-2.5.1/Rational.html#method-i-to_s)'
     'Rational#to_s' (Instance Method)

'to_s (http://ruby-doc.org/core-2.5.1/Regexp.html#method-i-to_s)'
     'Regexp#to_s' (Instance Method)

'to_s (http://ruby-doc.org/core-2.5.1/String.html#method-i-to_s)'
     'String#to_s' (Instance Method)

'to_s (http://ruby-doc.org/core-2.5.1/Struct.html#method-i-to_s)'
     'Struct#to_s' (Instance Method)

'to_s (http://ruby-doc.org/core-2.5.1/Symbol.html#method-i-to_s)'
     'Symbol#to_s' (Instance Method)

'to_s (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-to_s)'
     'Thread#to_s' (Instance Method)

'to_s (http://ruby-doc.org/core-2.5.1/Thread/Backtrace/Location.html#method-i-to_s)'
     'Thread/Backtrace/Location#to_s' (Instance Method)

'to_s (http://ruby-doc.org/core-2.5.1/Time.html#method-i-to_s)'
     'Time#to_s' (Instance Method)

'to_s (http://ruby-doc.org/core-2.5.1/TrueClass.html#method-i-to_s)'
     'TrueClass#to_s' (Instance Method)

'to_s (http://ruby-doc.org/core-2.5.1/UnboundMethod.html#method-i-to_s)'
     'UnboundMethod#to_s' (Instance Method)

'to_s (http://ruby-doc.org/core-2.5.1/UncaughtThrowError.html#method-i-to_s)'
     'UncaughtThrowError#to_s' (Instance Method)

'to_str (http://ruby-doc.org/core-2.5.1/String.html#method-i-to_str)'
     'String#to_str' (Instance Method)

'to_sym (http://ruby-doc.org/core-2.5.1/String.html#method-i-to_sym)'
     'String#to_sym' (Instance Method)

'to_sym (http://ruby-doc.org/core-2.5.1/Symbol.html#method-i-to_sym)'
     'Symbol#to_sym' (Instance Method)

'to_write_io (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-to_write_io)'
     'ARGF#to_write_io' (Instance Method)

'tr (http://ruby-doc.org/core-2.5.1/String.html#method-i-tr)'
     'String#tr' (Instance Method)

'tr! (http://ruby-doc.org/core-2.5.1/String.html#method-i-tr-21)'
     'String#tr!' (Instance Method)

'tr_s (http://ruby-doc.org/core-2.5.1/String.html#method-i-tr_s)'
     'String#tr_s' (Instance Method)

'tr_s! (http://ruby-doc.org/core-2.5.1/String.html#method-i-tr_s-21)'
     'String#tr_s!' (Instance Method)

'trace_points (http://ruby-doc.org/core-2.5.1/RubyVM/InstructionSequence.html#method-i-trace_points)'
     'RubyVM/InstructionSequence#trace_points' (Instance Method)

'trace_var (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-trace_var)'
     'Kernel#trace_var' (Instance Method)

'transfer (http://ruby-doc.org/core-2.5.1/Fiber.html#method-i-transfer)'
     'Fiber#transfer' (Instance Method)

'transform_keys (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-transform_keys)'
     'Hash#transform_keys' (Instance Method)

'transform_keys! (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-transform_keys-21)'
     'Hash#transform_keys!' (Instance Method)

'transform_values (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-transform_values)'
     'Hash#transform_values' (Instance Method)

'transform_values! (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-transform_values-21)'
     'Hash#transform_values!' (Instance Method)

'transpose (http://ruby-doc.org/core-2.5.1/Array.html#method-i-transpose)'
     'Array#transpose' (Instance Method)

'trap (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-trap)'
     'Kernel#trap' (Instance Method)

'truncate (http://ruby-doc.org/core-2.5.1/File.html#method-i-truncate)'
     'File#truncate' (Instance Method)

'truncate (http://ruby-doc.org/core-2.5.1/Float.html#method-i-truncate)'
     'Float#truncate' (Instance Method)

'truncate (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-truncate)'
     'Integer#truncate' (Instance Method)

'truncate (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-truncate)'
     'Numeric#truncate' (Instance Method)

'truncate (http://ruby-doc.org/core-2.5.1/Rational.html#method-i-truncate)'
     'Rational#truncate' (Instance Method)

'trust (http://ruby-doc.org/core-2.5.1/Object.html#method-i-trust)'
     'Object#trust' (Instance Method)

'try_lock (http://ruby-doc.org/core-2.5.1/Mutex.html#method-i-try_lock)'
     'Mutex#try_lock' (Instance Method)

'tty? (http://ruby-doc.org/core-2.5.1/IO.html#method-i-tty-3F)'
     'IO#tty?' (Instance Method)

'tuesday? (http://ruby-doc.org/core-2.5.1/Time.html#method-i-tuesday-3F)'
     'Time#tuesday?' (Instance Method)

'tv_nsec (http://ruby-doc.org/core-2.5.1/Time.html#method-i-tv_nsec)'
     'Time#tv_nsec' (Instance Method)

'tv_sec (http://ruby-doc.org/core-2.5.1/Time.html#method-i-tv_sec)'
     'Time#tv_sec' (Instance Method)

'tv_usec (http://ruby-doc.org/core-2.5.1/Time.html#method-i-tv_usec)'
     'Time#tv_usec' (Instance Method)

'uid (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-uid)'
     'File/Stat#uid' (Instance Method)

'unbind (http://ruby-doc.org/core-2.5.1/Method.html#method-i-unbind)'
     'Method#unbind' (Instance Method)

'undef_method (http://ruby-doc.org/core-2.5.1/Module.html#method-i-undef_method)'
     'Module#undef_method' (Instance Method)

'undump (http://ruby-doc.org/core-2.5.1/String.html#method-i-undump)'
     'String#undump' (Instance Method)

'ungetbyte (http://ruby-doc.org/core-2.5.1/IO.html#method-i-ungetbyte)'
     'IO#ungetbyte' (Instance Method)

'ungetc (http://ruby-doc.org/core-2.5.1/IO.html#method-i-ungetc)'
     'IO#ungetc' (Instance Method)

'unicode_normalize (http://ruby-doc.org/core-2.5.1/String.html#method-i-unicode_normalize)'
     'String#unicode_normalize' (Instance Method)

'unicode_normalize! (http://ruby-doc.org/core-2.5.1/String.html#method-i-unicode_normalize-21)'
     'String#unicode_normalize!' (Instance Method)

'unicode_normalized? (http://ruby-doc.org/core-2.5.1/String.html#method-i-unicode_normalized-3F)'
     'String#unicode_normalized?' (Instance Method)

'uniq (http://ruby-doc.org/core-2.5.1/Array.html#method-i-uniq)'
     'Array#uniq' (Instance Method)

'uniq (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-uniq)'
     'Enumerable#uniq' (Instance Method)

'uniq (http://ruby-doc.org/core-2.5.1/Enumerator/Lazy.html#method-i-uniq)'
     'Enumerator/Lazy#uniq' (Instance Method)

'uniq! (http://ruby-doc.org/core-2.5.1/Array.html#method-i-uniq-21)'
     'Array#uniq!' (Instance Method)

'unlock (http://ruby-doc.org/core-2.5.1/Mutex.html#method-i-unlock)'
     'Mutex#unlock' (Instance Method)

'unpack (http://ruby-doc.org/core-2.5.1/String.html#method-i-unpack)'
     'String#unpack' (Instance Method)

'unpack1 (http://ruby-doc.org/core-2.5.1/String.html#method-i-unpack1)'
     'String#unpack1' (Instance Method)

'unshift (http://ruby-doc.org/core-2.5.1/Array.html#method-i-unshift)'
     'Array#unshift' (Instance Method)

'untaint (http://ruby-doc.org/core-2.5.1/Object.html#method-i-untaint)'
     'Object#untaint' (Instance Method)

'untrace_var (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-untrace_var)'
     'Kernel#untrace_var' (Instance Method)

'untrust (http://ruby-doc.org/core-2.5.1/Object.html#method-i-untrust)'
     'Object#untrust' (Instance Method)

'untrusted? (http://ruby-doc.org/core-2.5.1/Object.html#method-i-untrusted-3F)'
     'Object#untrusted?' (Instance Method)

'upcase (http://ruby-doc.org/core-2.5.1/String.html#method-i-upcase)'
     'String#upcase' (Instance Method)

'upcase (http://ruby-doc.org/core-2.5.1/Symbol.html#method-i-upcase)'
     'Symbol#upcase' (Instance Method)

'upcase! (http://ruby-doc.org/core-2.5.1/String.html#method-i-upcase-21)'
     'String#upcase!' (Instance Method)

'update (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-update)'
     'Hash#update' (Instance Method)

'upto (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-upto)'
     'Integer#upto' (Instance Method)

'upto (http://ruby-doc.org/core-2.5.1/String.html#method-i-upto)'
     'String#upto' (Instance Method)

'usec (http://ruby-doc.org/core-2.5.1/Time.html#method-i-usec)'
     'Time#usec' (Instance Method)

'using (http://ruby-doc.org/core-2.5.1/Module.html#method-i-using)'
     'Module#using' (Instance Method)

'utc (http://ruby-doc.org/core-2.5.1/Time.html#method-i-utc)'
     'Time#utc' (Instance Method)

'utc? (http://ruby-doc.org/core-2.5.1/Time.html#method-i-utc-3F)'
     'Time#utc?' (Instance Method)

'utc_offset (http://ruby-doc.org/core-2.5.1/Time.html#method-i-utc_offset)'
     'Time#utc_offset' (Instance Method)

'valid_encoding? (http://ruby-doc.org/core-2.5.1/String.html#method-i-valid_encoding-3F)'
     'String#valid_encoding?' (Instance Method)

'value (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-value)'
     'Thread#value' (Instance Method)

'value (http://ruby-doc.org/core-2.5.1/UncaughtThrowError.html#method-i-value)'
     'UncaughtThrowError#value' (Instance Method)

'value? (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-value-3F)'
     'Hash#value?' (Instance Method)

'values (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-values)'
     'Hash#values' (Instance Method)

'values (http://ruby-doc.org/core-2.5.1/ObjectSpace/WeakMap.html#method-i-values)'
     'ObjectSpace/WeakMap#values' (Instance Method)

'values (http://ruby-doc.org/core-2.5.1/Struct.html#method-i-values)'
     'Struct#values' (Instance Method)

'values_at (http://ruby-doc.org/core-2.5.1/Array.html#method-i-values_at)'
     'Array#values_at' (Instance Method)

'values_at (http://ruby-doc.org/core-2.5.1/Hash.html#method-i-values_at)'
     'Hash#values_at' (Instance Method)

'values_at (http://ruby-doc.org/core-2.5.1/MatchData.html#method-i-values_at)'
     'MatchData#values_at' (Instance Method)

'values_at (http://ruby-doc.org/core-2.5.1/Struct.html#method-i-values_at)'
     'Struct#values_at' (Instance Method)

'wait (http://ruby-doc.org/core-2.5.1/ConditionVariable.html#method-i-wait)'
     'ConditionVariable#wait' (Instance Method)

'wakeup (http://ruby-doc.org/core-2.5.1/Thread.html#method-i-wakeup)'
     'Thread#wakeup' (Instance Method)

'warn (http://ruby-doc.org/core-2.5.1/Kernel.html#method-i-warn)'
     'Kernel#warn' (Instance Method)

'warn (http://ruby-doc.org/core-2.5.1/Warning.html#method-i-warn)'
     'Warning#warn' (Instance Method)

'wday (http://ruby-doc.org/core-2.5.1/Time.html#method-i-wday)'
     'Time#wday' (Instance Method)

'wednesday? (http://ruby-doc.org/core-2.5.1/Time.html#method-i-wednesday-3F)'
     'Time#wednesday?' (Instance Method)

'with_index (http://ruby-doc.org/core-2.5.1/Enumerator.html#method-i-with_index)'
     'Enumerator#with_index' (Instance Method)

'with_object (http://ruby-doc.org/core-2.5.1/Enumerator.html#method-i-with_object)'
     'Enumerator#with_object' (Instance Method)

'world_readable? (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-world_readable-3F)'
     'File/Stat#world_readable?' (Instance Method)

'world_readable? (http://ruby-doc.org/core-2.5.1/FileTest.html#method-i-world_readable-3F)'
     'FileTest#world_readable?' (Instance Method)

'world_writable? (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-world_writable-3F)'
     'File/Stat#world_writable?' (Instance Method)

'world_writable? (http://ruby-doc.org/core-2.5.1/FileTest.html#method-i-world_writable-3F)'
     'FileTest#world_writable?' (Instance Method)

'writable? (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-writable-3F)'
     'File/Stat#writable?' (Instance Method)

'writable? (http://ruby-doc.org/core-2.5.1/FileTest.html#method-i-writable-3F)'
     'FileTest#writable?' (Instance Method)

'writable_real? (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-writable_real-3F)'
     'File/Stat#writable_real?' (Instance Method)

'writable_real? (http://ruby-doc.org/core-2.5.1/FileTest.html#method-i-writable_real-3F)'
     'FileTest#writable_real?' (Instance Method)

'write (http://ruby-doc.org/core-2.5.1/ARGF.html#method-i-write)'
     'ARGF#write' (Instance Method)

'write (http://ruby-doc.org/core-2.5.1/IO.html#method-i-write)'
     'IO#write' (Instance Method)

'write (http://ruby-doc.org/core-2.5.1/Warning/buffer.html#method-i-write)'
     'Warning/buffer#write' (Instance Method)

'write_nonblock (http://ruby-doc.org/core-2.5.1/IO.html#method-i-write_nonblock)'
     'IO#write_nonblock' (Instance Method)

'yday (http://ruby-doc.org/core-2.5.1/Time.html#method-i-yday)'
     'Time#yday' (Instance Method)

'year (http://ruby-doc.org/core-2.5.1/Time.html#method-i-year)'
     'Time#year' (Instance Method)

'yield (http://ruby-doc.org/core-2.5.1/Proc.html#method-i-yield)'
     'Proc#yield' (Instance Method)

'yield_self (http://ruby-doc.org/core-2.5.1/Object.html#method-i-yield_self)'
     'Object#yield_self' (Instance Method)

'zero? (http://ruby-doc.org/core-2.5.1/File/Stat.html#method-i-zero-3F)'
     'File/Stat#zero?' (Instance Method)

'zero? (http://ruby-doc.org/core-2.5.1/FileTest.html#method-i-zero-3F)'
     'FileTest#zero?' (Instance Method)

'zero? (http://ruby-doc.org/core-2.5.1/Float.html#method-i-zero-3F)'
     'Float#zero?' (Instance Method)

'zero? (http://ruby-doc.org/core-2.5.1/Numeric.html#method-i-zero-3F)'
     'Numeric#zero?' (Instance Method)

'zip (http://ruby-doc.org/core-2.5.1/Array.html#method-i-zip)'
     'Array#zip' (Instance Method)

'zip (http://ruby-doc.org/core-2.5.1/Enumerable.html#method-i-zip)'
     'Enumerable#zip' (Instance Method)

'zip (http://ruby-doc.org/core-2.5.1/Enumerator/Lazy.html#method-i-zip)'
     'Enumerator/Lazy#zip' (Instance Method)

'zone (http://ruby-doc.org/core-2.5.1/Time.html#method-i-zone)'
     'Time#zone' (Instance Method)

'| (http://ruby-doc.org/core-2.5.1/Array.html#method-i-7C)'
     'Array#|' (Instance Method)

'| (http://ruby-doc.org/core-2.5.1/FalseClass.html#method-i-7C)'
     'FalseClass#|' (Instance Method)

'| (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-7C)'
     'Integer#|' (Instance Method)

'| (http://ruby-doc.org/core-2.5.1/NilClass.html#method-i-7C)'
     'NilClass#|' (Instance Method)

'| (http://ruby-doc.org/core-2.5.1/TrueClass.html#method-i-7C)'
     'TrueClass#|' (Instance Method)

'~ (http://ruby-doc.org/core-2.5.1/Complex.html#method-i-7E)'
     'Complex#~' (Instance Method)

'~ (http://ruby-doc.org/core-2.5.1/Integer.html#method-i-7E)'
     'Integer#~' (Instance Method)

'~ (http://ruby-doc.org/core-2.5.1/Regexp.html#method-i-7E)'
     'Regexp#~' (Instance Method)

Table A.3: List of API Methods

