% Ruby2_5.twjr file.
% Uncomment the 1st \input line if you need the MF logo
% \input mftmac % for Metafont logo
\input texinfo   @c -*-texinfo-*-
@c %**start of header (This is for running Texinfo on a region.)
@setfilename Ruby2_5.info
@settitle Ruby2_5 Information
@c %**end of header (This is for running Texinfo on a region.)

@c Change how xref titles are quoted.
@dquotexrefs
@c And let braces in index entries work.
@allowindexbraces
@ifclear FORPRINT
@pdflinkcolor
@urllinkcolor
@hideurls
@end ifclear


@c The following information should be updated here only!
@c This sets the edition of the document.

@c These apply across the board.
@set UPDATE-MONTH OCTOBER, 2018
@set EDITION 0.2c

@set TITLE Ruby 2.5 Information and Documentation
@set SHORTTITLE Ruby 2.5 Info

@iftex
@set DOCUMENT book
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end iftex
@ifhtml
@set DOCUMENT Web page
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end ifhtml
@ifinfo
@set DOCUMENT Info file
@set CHAPTER major node
@set APPENDIX major node
@set SECTION minor node
@set SUBSECTION node
@end ifinfo
@ifdocbook
@set DOCUMENT book
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end ifdocbook

@c some special symbols
@ifnottex
@macro ii{text}
@i{\text\}
@end macro
@end ifnottex

@c Uncomment this if you want the metafont logo.
@ignore
@ifnottex
@macro MF{}
@sc{METAFONT}
@end macro
@end ifnottex
@end ignore

@c merge the function and variable indexes into the concept index
@c do so without the code font, and in the index entries do the
@c font management ourselves.  Also merge in the chunk definition
@c and reference entries, which jrweave creates for us.
@ifnothtml
@synindex fn cp
@synindex vr cp
@synindex cd cp
@synindex cr cp
@end ifnothtml

@c If "finalout" is commented out, the printed output will show
@c black boxes that mark lines that are too long.  Thus, it is
@c unwise to comment it out when running a master in case there are
@c overfulls which are deemed okay.

@iftex
@c @finalout
@end iftex

@copying
@docbook
<para>Published by:</para>

<literallayout class="normal">Full Name
Address Line 1
Address Line 2
etc.
Email: <email>wlharvey4@@mac.com</email>
URL: <ulink url="http://www.example.com/">http://www.example.com/</ulink></literallayout>

<literallayout class="normal">Copyright &copy; 2018
wlharvey4
All Rights Reserved.</literallayout>
@end docbook

@ifnotdocbook
Copyright @copyright{} 2018 @*
wlharvey4 @*
All Rights Reserved.
@end ifnotdocbook
@sp 1
The Ruby2.5 Information and Documentation program is copyright
@copyright{} 2018 by wlharvey4. It is published under
the conditions of the GNU General Public License, version 3.
@sp 2
This is Edition @value{EDITION} of @cite{@value{TITLE}}.
@end copying

@c Uncomment this for the release.  Leaving it off saves paper
@c during editing and review.
@c @setchapternewpage odd

@c Uncomment this if it's ever printed as a real book(let).
@c @shorttitlepage @value{SHORTTITLE}

@titlepage
@title @value{TITLE}
@subtitle @value{UPDATE-MONTH}
@author wlharvey4

@ifnotdocbook
@c Include the Distribution inside the titlepage environment so
@c that headings are turned off.  Headings on and off do not work.

@page
@vskip 0pt plus 1filll
Published by:
@sp 1
wlharvey4 @*
Address Line 1 @*
Address Line 2 @*
etc. @*
Email: @EMAIL{wlharvey4@@emac.com,wlharvey4 AT mac.com} @*
URL: @url{http://www.example.com/} @*

@insertcopying
@end ifnotdocbook
@end titlepage

@set DRAFT @i{DRAFT}

@iftex
@headings off
@evenheading @thispage @| @value{DRAFT} @| @strong{@value{SHORTTITLE}}
@oddheading  @strong{@thischapter} @| @value{DRAFT} @| @thispage
@end iftex

@ifnottex
@ifnotdocbook
@ifnotxml
@node Top
@top General Introduction
@c Preface node should come right after the Top
@c node, in `unnumbered' sections, then the introductory chapter.
@c Licensing nodes are appendices, they're not central to TexiWebJr.

This file documents Ruby 2.5, @url{https://www.ruby-lang.org}

@insertcopying
@end ifnotxml
@end ifnotdocbook
@end ifnottex

@menu
@detailmenu
@end detailmenu
@end menu

@c @summarycontents
@contents

@c Add these to the menu if they ever get included.
@c @node Foreword
@c @unnumbered Foreword

@node Preface
@unnumbered Preface

Text here.

@node Audience
@unnumberedsec Intended Audience

Text here.


@node Overview
@unnumberedsec What Is Covered

Text and chapter by chapter description here.

@node Conventions
@unnumberedsec Typographical Conventions

@c Copied mostly verbatim from the gawk manual.

@cindex Texinfo document formatting language
This @value{DOCUMENT} is written in an enhanced version of
@uref{http://www.gnu.org/software/texinfo/, Texinfo},
the GNU documentation formatting language.
A single Texinfo source file is used to produce both the printed and online
versions of a program's documentation.
@ifnotinfo
Because of this, the typographical conventions
are slightly different than in other books you may have read.
@end ifnotinfo

Examples you would type at the command-line are preceded by the common
shell primary and secondary prompts, @samp{$} and @samp{>}.  Input that
you type is shown @kbd{like this}.  Output from the command is preceded
by the glyph ``@print{}''.  This typically represents the command's
standard output.  Error messages, and other output on the command's
standard error, are preceded by the glyph ``@error{}''.  For example:

@example
$ @kbd{echo hi on stdout}
@print{} hi on stdout
$ @kbd{echo hello on stderr 1>&2}
@error{} hello on stderr
@end example

@ifnotinfo
In the text, command names appear in @code{this font}, while code segments
appear in the same font and quoted, @samp{like this}.  Options look
like this: @option{-f}.  Some things are emphasized @emph{like this},
and if a point needs to be made strongly, it is done @strong{like this}.
The first occurrence of a new term is usually its @dfn{definition} and
appears in the same font as the previous occurrence of ``definition''
in this sentence.  Finally, file names are indicated like this:
@file{/path/to/our/file}.
@end ifnotinfo

@node Acknowledgements
@unnumberedsec Acknowledgements

@node Introduction
@chapter Introduction

Ruby is @dots{}

A dynamic, open source programming language with a focus on simplicity
and productivity.  It has an elegant syntax that is natural to read and
easy to write.








@c *****************************************************************************

@node Documentation
@chapter Documentation
@cindex Documentation

Here you will find pointers to manuals, tutorials and references that will come
in handy when you feel like coding in Ruby.




@c -----------------------------------------------------------------------------

@node Installing Ruby
@section Installing Ruby

@subheading Installation Methods

There are several ways to install Ruby:

@itemize
@item
@b{Package Manager}: When you are on a UNIX-like operating system,
using your system’s package manager is the easiest way of getting
started. However, the packaged Ruby version usually is not the newest
one.
@item
@b{Installers}: can be used to install a specific or multiple Ruby
versions. There is also an installer for Windows.
@item
@b{Managers} help you to switch between multiple Ruby installations on
your system.
@item
@b{Source}: And finally, you can also build Ruby from source.
@end itemize

The following overview lists available installation methods for
different needs and platforms.


@c .....................................

@node Package Management Systems
@subsection Package Management Systems

If you cannot compile your own Ruby, and you do not want to use a
third-party tool, you can use your system’s package manager to install
Ruby.

Certain members in the Ruby community feel very strongly that you
should never use a package manager to install Ruby and that you should
use tools instead.  While the full list of pros and cons is outside of
the scope of this page, the most basic reason is that most package
managers have older versions of Ruby in their official
repositories.  If you would like to use the newest Ruby, make sure you
use the correct package name, or use the tools described further below
instead.

@c _____________________________________

@node Homebrew (OS X)
@subsubsection Homebrew (OS X)

@url{http://brew.sh/, Homebrew}

On macOS (High) Sierra and OS X El Capitan, Ruby 2.0 is included.

Many people on OS X use Homebrew as a package manager.  It is really
easy to get a newer version of Ruby using Homebrew:

@example
$ brew install ruby
@end example

This should install the latest Ruby version.


@c .....................................

@node Installers
@subsection Installers
@cindex installer, third party
@cindex version managers
@cindex versions,multiple
@cindex Rubies, switch between
@cindex RVM version manager

If the version of Ruby provided by your system or package manager is
out of date, a newer one can be installed using a third-party
installer.  Some of them also allow you to install multiple versions on
the same system; associated managers can help to switch between the
different Rubies.  If you are planning to use RVM as a version manager
you do not need a separate installer, it comes with its own.

@c _____________________________________

@node ruby-build
@subsubsection @command{ruby-build}
@cindex @command{ruby-build} plugin
@cindex @command{rbenv} version manager

@url{https://github.com/rbenv/ruby-build#readme, @command{ruby-build}}

@url{https://www.ruby-lang.org/en/documentation/installation/#rbenv,
@command{rbenv}}

@command{ruby-build} is a plugin for @command{rbenv} (@pxref{rbenv}
that allows you to compile and install different versions of Ruby into
arbitrary directories.  @command{ruby-build} can also be used as a
standalone program without @command{rbenv}.  It is available for OS X,
Linux, and other UNIX-like operating systems.

@c _____________________________________

@node ruby-install
@subsubsection @command{ruby-install}
@command{ruby-install} version manager
@command{chruby} version switcher

@url{https://github.com/postmodern/ruby-install#readme, @command{ruby-install}}

@url{https://www.ruby-lang.org/en/documentation/installation/#chruby,
@command{chruby}}

@command{ruby-install} allows you to compile and install different
versions of Ruby into arbitrary directories.  There is also a sibling,
@command{chruby} (@pxref{chruby}), which handles switching between
Ruby versions.  It is available for OS X, Linux, and other UNIX-like
operating systems.


@c .....................................

@node Managers
@subsection Managers

Many Rubyists use Ruby managers to manage multiple Rubies.  They confer
various advantages but are not officially supported.  Their respective
communities are very helpful, however.

@c _____________________________________

@node chruby
@subsubsection chruby
@cindex @command{chruby}
@cindex versions, switch between using @command{chruby}
@cindex manage Rubies using @command{chruby}

@command{chruby} allows you to switch between multiple Rubies.
@command{chruby} can manage Rubies installed by @command{ruby-install}
(@pxref{ruby-install}) or even built from source.

@c _____________________________________

@node rbenv
@subsubsection @command{rbenv}
@cindex @command{rbenv}
@cindex versions, multiple installations using @command{rbenv}

@url{https://github.com/rbenv/rbenv#readme, @command{rbenv}}

@url{https://www.ruby-lang.org/en/documentation/installation/#ruby-build,
@command{ruby-build}}

@command{rbenv} allows you to manage multiple installations of Ruby.
It does not support installing Ruby, but there is a popular plugin
named @command{ruby-build} (@pxref{ruby-build}) to install Ruby.  Both
tools are available for OS X, Linux, or other UNIX-like operating
systems.

@c _____________________________________

@node RVM (``Ruby Version Manager'')
@subsubsection RVM (``Ruby Version Manager'')
@cindex multiple installations, manage using RVM
@cindex gemsets, manage different using RVM

@url{http://rvm.io/, RVM}

RVM allows you to install and manage multiple installations of Ruby on
your system.  It can also manage different gemsets.  It is available for
OS X, Linux, or other UNIX-like operating systems.

@c _____________________________________

@node uru
@subsubsection @command{uru}
@cindex @command{uru}
@cindex multiple Rubies, command-line tool @command{uru}

@url{https://bitbucket.org/jonforums/uru, Uru}

Uru is a lightweight, multi-platform command line tool that helps you
to use multiple Rubies on OS X, Linux, or Windows systems.


@c .....................................

@node Building From Source
@subsection Building From Source
@cindex source, building

@url{https://www.ruby-lang.org/en/downloads/, Ruby 2.5.1}

@url{https://github.com/ruby/ruby, Ruby Github}

Of course, you can install Ruby from source.  Download and unpack a
tarball, then just do this:

@example
$ ./configure
$ make
$ sudo make install
@end example

By default, this will install Ruby into @file{/usr/local}.  To change, pass
the @option{--prefix=DIR} option to the @file{./configure} script.

Using the third-party tools or package managers might be a better
idea, though, because the installed Ruby won’t be managed by any
tools.

Installing from the source code is a great solution for when you are
comfortable enough with your platform and perhaps need specific settings for
your environment.  It’s also a good solution in the event that there are no
other premade packages for your platform.

@c _____________________________________

@node Releases Page
@subsubsection Releases Page
@cindex releases

@url{https://www.ruby-lang.org/en/downloads/releases/, Releases Page}

For more information about specific releases, particularly older
releases or previews, see the Releases page.

This page lists individual Ruby releases.

@subsubheading Ruby 2.5.1 Released

@url{https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.1.tar.gz,
ruby-2.1.5.tar.gz}

Posted by naruse on 28 Mar 2018

This release includes some bug fixes and some security fixes.

@itemize
@item
CVE-2017-17742: HTTP response splitting in WEBrick
@item
CVE-2018-6914: Unintentional file and directory creation with
directory traversal in tempfile and tmpdir
@item
CVE-2018-8777: DoS by large request in WEBrick
@item
CVE-2018-8778: Buffer under-read in String#unpack
@item
CVE-2018-8779: Unintentional socket creation by poisoned NUL byte in
UNIXServer and UNIXSocket
@item
CVE-2018-8780: Unintentional directory traversal by poisoned NUL byte
in Dir
@item
Multiple vulnerabilities in RubyGems
@end itemize

@c _____________________________________

@node Branches Page
@subsubsection Branches Page
@cindex branches page

@url{https://www.ruby-lang.org/en/downloads/branches/, Branches Page}

Information about the current maintenance status of the various Ruby branches
can be found on the Branches page.

This page lists the current maintenance status of the various Ruby branches.
This is a preliminary list of Ruby branches and their maintenance status. The
shown dates are inferred from the English versions of release posts or EOL
announcements.

The Ruby branches or release series are categorized below into the following
phases:

@itemize
@item
normal maintenance (bug fix): Branch receives general bug fixes and security
fixes.
@item
security maintenance (security fix): Only security fixes are backported to this
branch.
@item
eol (end-of-life): Branch is not supported by the ruby-core team any longer and
does not receive any fixes. No further patch release will be released.
@item
preview: Only previews or release candidates have been released for this branch
so far.
@end itemize

@subsubheading Ruby 2.6
@url{https://cache.ruby-lang.org/pub/ruby/2.6/ruby-2.6.0-preview2.tar.gz}

@noindent
ruby-2.6.0-preview2@*
status: preview@*
release date:@*

@subsubheading Ruby 2.5
@url{https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.1.tar.gz}

@noindent
status: normal maintenance@*
release date: 2017-12-25@*

@subsubheading Ruby 2.4
@url{https://cache.ruby-lang.org/pub/ruby/2.4/ruby-2.4.4.tar.gz}

@noindent
status: normal maintenance@*
release date: 2016-12-25@*

@subsubheading Ruby 2.3
@url{https://cache.ruby-lang.org/pub/ruby/2.3/ruby-2.3.7.tar.gz}

@noindent
status: security maintenance@*
release date: 2015-12-25@*
EOL date: scheduled for 2019-03-31@*

@subsubheading Ruby 2.2

status: eol@*
release date: 2014-12-25@*
EOL date: 2018-03-31@*

@c _____________________________________

@node Issue Tracking
@subsubsection Ruby Issue Tracking System
@cindex issue tracking

@url{https://bugs.ruby-lang.org, Bugs}

@subsubheading How to report a bug

@url{https://bugs.ruby-lang.org/projects/ruby/wiki/HowToReport, How To Report}

@subsubheading Ruby Trunk

@url{https://bugs.ruby-lang.org/projects/ruby-trunk, Ruby Trunk}

@url{https://bugs.ruby-lang.org/projects/ruby-trunk/issues?set_filter=1, All
Issues}




@c -----------------------------------------------------------------------------

@node Developing Ruby
@section Developing Ruby
@cindex developing Ruby

@url{https://www.ruby-lang.org/en/community/ruby-core/, Ruby Core}

Now is a fantastic time to follow Ruby’s development.  With the increased
attention Ruby has received in the past few years, there’s a growing need for
good talent to help enhance Ruby and document its parts.  So, where do you
start?

@subheading Ruby Core
@cindex Ruby core

The topics related to Ruby development covered here are:

@itemize
@item
@ref{subversion, Using Subversion to Track Ruby Development}
@item
@ref{MainRubyRepo, How to Use Git With the Main Ruby Repository}
@item
@ref{PatchByPatch, Improving Ruby, Patch by Patch}
@item
Rules for Core Developers
@end itemize

@anchor{subversion}
@subsubheading Using Subversion to Track Ruby Development
@cindex Subversion
@cindex track Ruby development
@cindex Ruby development, tracking

Getting the latest Ruby source code is a matter of an anonymous checkout from
the @url{http://subversion.apache.org/, Subversion} repository.  From your
command line:

@example
@kbd{$ svn co https://svn.ruby-lang.org/repos/ruby/trunk ruby}
@end example

The @file{ruby} directory will now contain the latest source code for the
development version of Ruby (@file{ruby-trunk}).  Currently patches applied to
the trunk are backported to the stable 2.5, 2.4, and 2.3 branches (see below).

If you’d like to follow patching of Ruby 2.5, you should use the ruby_2_5
branch when checking out:
@cindex patching of Ruby

@example
$ svn co https://svn.ruby-lang.org/repos/ruby/branches/ruby_2_5
@end example

This will check out the respective development tree into a @file{ruby_2_5}
directory. Developers working on the maintenance branches are expected to
migrate their changes to Ruby’s trunk, so often the branches are very similar,
with the exception of improvements made by Matz and Nobu to the language
itself.

If you prefer, you may browse
@url{https://svn.ruby-lang.org/cgi-bin/viewvc.cgi/, Ruby’s Subversion
repository via the web}.
@cindex Subversion repository
@cindex repository, Subversion

@anchor{MainRubyRepo}
@subsubheading How to Use Git With the Main Ruby Repository
@cindex GitHub, ruby repository
@cindex respository, GitHub

Those who prefer to use Git over Subversion can find instructions with the
@url{https://github.com/ruby/ruby, mirror on GitHub}, both for those with
commit access and @url{https://github.com/shyouhei/ruby/wiki/noncommitterhowto,
everybody else}.

@anchor{PatchByPatch}
@subsubheading Improving Ruby, Patch by Patch
@cindex issue tracker
@cindex mailing lists
@cindex Ruby Core mailing list

The core team maintains an @url{https://bugs.ruby-lang.org/, issue tracker} for
submitting patches and bug reports to Matz and the gang.  These reports also
get submitted to the
@url{https://www.ruby-lang.org/en/community/mailing-lists/, Ruby-Core mailing
list} for discussion, so you can be sure your request won’t go unnoticed.  You
can also send your patches straight to the mailing list.  Either way, you are
encouraged to take part in the discussion that ensues.

Please look over the
@url{https://www.ruby-lang.org/en/community/ruby-core/writing-patches/, Patch
Writer’s Guide} for some tips, straight from Matz, on how to get your patches
considered.
@cindex Patch Writer's Guide

@url{https://www.ruby-lang.org/en/community/ruby-core/, Steps for Building a
Patch}




@c -----------------------------------------------------------------------------

@node Getting Started
@section Getting Started


@c .....................................

@node Try Ruby!
@subsection Try Ruby!

@url{https://ruby.github.io/TryRuby/, Try Ruby!}

An interactive tutorial that lets you try out Ruby right in your browser.  This
15-minute tutorial is aimed at beginners who want to get a feeling of the
language.


@c .....................................

@node Official FAQ
@subsection Official FAQ

The official frequently asked questions.

@url{https://www.ruby-lang.org/en/documentation/faq/, FAQ}

This document contains Frequently Asked Questions about Ruby with
answers.

This FAQ is based on
@url{http://ruby-doc.org/docs/ruby-doc-bundle/FAQ/FAQ.html, The Ruby
Language FAQ} originally compiled by Shugo Maeda and translated into
English by Kentaro Goto.  Thanks to Zachary Scott and Marcus
Stollsteimer for incorporating the FAQ into the site and for a major
overhaul of the content.

@itemize
@item
General questions
@item
How does Ruby stack up against…?
@item
Installing Ruby
@item
Variables, constants, and arguments
@item
@ref{FAQ Iterators}
@item
@ref{FAQ Syntax}
@item
Methods
@item
Classes and modules
@item
Built-in libraries
@item
Extension library
@item
Other features
@end itemize

@c _____________________________________

@node FAQ Iterators
@subsubsection FAQ Iterators
@cindex iterators

@subheading What is an iterator?
@cindex @file{Proc} object, passed to iterator
@cindex block object, passed to iterator

An iterator is a method which accepts a block or a @file{Proc}
object.  In the source file, the block is placed immediately after the
invocation of the method.  Iterators are used to produce user-defined
control structures --- especially loops.

Let’s look at an example to see how this works.  Iterators are often
used to repeat the same action on each element of a collection, like
this:

@example
data = [1, 2, 3]
data.each do |i|
  puts i
end
@end example

The @code{each} method of the array @code{data} is passed the @code{do
@dots{} end} block, and executes it repeatedly.  On each call, the
block is passed successive elements of the array.
@cindex @code{each} method of iterator

You can define blocks with @code{@{ @dots{} @}} in place of @code{do
@dots{} end}.

@example
data = [1, 2, 3]
data.each @{ |i|
  puts i
@}
@end example

This code has the same meaning as the last example.  However, in some
cases, precedence issues cause @code{do @dots{} end} and @code{@{
@dots{} @}} to act differently.
@cindex precedence, iterators, different results
@cindex binding of @code{@{ @dots{} @}}

@example
foobar a, b do @dots{} end	# foobar is the iterator.
foobar a, b @{ @dots{} @}	# b is the iterator.
@end example

This is because @code{@{ @dots{} @}} binds more tightly to the
preceding expression than does a @code{do @dots{} end} block.  The
first example is equivalent to @samp{foobar(a, b) do @dots{} end},
while the second is @samp{foobar(a, b @{ @dots{} @})}.

@subheading How can I pass a block to an iterator?

You simply place the block after the iterator call.  You can also pass
a @file{Proc} object by prepending @kbd{&} to the variable or constant
name that refers to the @file{Proc}.

@subheading How is a block used in an iterator?
@cindex block, used in an iterator
@cindex iterator, block
@cindex @code{yield} control structor, or statement

@emph{This section or parts of it might be out-dated or in need of
confirmation.}

There are three ways to execute a block from an iterator method:

@enumerate
@item
the @code{yield} control structure;
@cindex @code{yield} control structure in iterator

The @code{yield} statement calls the block, optionally passing it one
or more arguments.

@example
def my_iterator
  yield 1, 2
end

my_iterator @{|a, b| puts a, b @}
@end example

@item
calling a @file{Proc} argument (made from a block) with @code{call};

If a method definition has a block argument (the last formal parameter
has an ampersand (@kbd{&}) prepended), it will receive the attached
block, converted to a @file{Proc} object. This may be called using
@code{prc.call(args)}.

@example
def my_iterator(&b)
  b.call(1, 2)
end

my_iterator @{|a, b| puts a, b @}
@end example

and

@item
using @code{Proc.new} followed by a @code{call}.
@cindex @code{Proc.new}, followed by @code{call}
@cindex @code{lambda} as a synonym of @file{Proc}

@code{Proc.new} (or the equivalent @code{proc} or @code{lambda}
calls), when used in an iterator definition, takes the block which is
given to the method as its argument and generates a procedure object
from it.  (@code{proc} and @code{lambda} are effectively synonyms.)

@emph{[Update needed: @code{lambda} behaves in a slightly different
way and produces a warning @samp{tried to create Proc object without a
block}.]}

@example
def my_iterator
  Proc.new.call(3, 4)
  proc.call(5, 6)
  lambda.call(7, 8)
end

my_iterator @{|a, b| puts a, b @}
@end example

Perhaps surprisingly, @code{Proc.new} and friends do not in any sense
consume the block attached to the method --- each call to
@code{Proc.new} generates a new procedure object out of the same
block.

You can tell if there is a block associated with a method by calling
@code{block_given?}.
@cindex @code{block_given?}

@end enumerate

@subheading What does Proc.new without a block do?

@code{Proc.new} without a block cannot generate a procedure object and
an error occurs.  In a method definition, however, @code{Proc.new}
without a block implies the existence of a block at the time the
method is called, and so no error will occur.

@subheading How can I run iterators in parallel?

See @url{http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/5252}

@c _____________________________________

@node FAQ Syntax
@subsubsection FAQ Syntax

List of FAQ items:

@ref{immediate value, What is the difference between an immediate
value and a reference?}

@ref{nil vs false, What is the difference between @code{nil} and
@code{false}?}

@ref{empty string, The Empty String}

@ref{symbol object, A Symbol Object}

@ref{value of symbol, How can I access the value of a symbol?}

@ref{loop, Is @code{loop} a control structure?}

@ref{post-test loop, Ruby doesn't have a post-test loop}

@ref{hash literal, Why can’t I pass a hash literal to a method @code{p @{@}}?}

@ref{pos val, I can’t get @code{def pos=(val)} to work!}

@ref{\1 and \\1, What is the difference between @code{\1} and
@code{\\1}?}

@ref{2 dots vs 3 dots, What is the difference between @code{..} and
@code{...}?}

@ref{or and, What is the difference between or and ||?}

@ref{function pointers, Does Ruby have function pointers?}

@ref{load vs require, What is the difference between load and
require?}

@ref{exception handling, Does Ruby have exception handling?}

@anchor{immediate value}
@subheading What is the difference between an immediate value and a reference?
@cindex immediate values

@code{Fixnum}, @code{true}, @code{nil}, and @code{false} are
implemented as @dfn{immediate values}.  With immediate values,
variables hold the objects themselves, rather than references to them.

Singleton methods cannot be defined for such objects.  Two
@file{Fixnums} of the same value always represent the same object
instance, so (for example) instance variables for the @file{Fixnum}
with the value 1 are shared between all the 1's in the system.  This
makes it impossible to define a singleton method for just one of
these.

@anchor{nil vs false}
@subheading What is the difference between @code{nil} and @code{false}?
@cindex @code{nil} and @code{false}, similariaties and differences
@cindex @code{false} and @code{nil}
@cindex boolean context
@cindex ``falsey'' values
@cindex ``truthy'' values

First the similarity: @code{nil} and @code{false} are the only two
objects that evaluate to @code{false} in a boolean context.  (In other
words: they are the only ``falsy'' values; all other objects are
``truthy''.)

However, @code{nil} and @code{false} are instances of different
classes (@file{NilClass} and @file{FalseClass}), and have different behavior
elsewhere.
@cindex @file{NilClass}
@cindex @file{FalseClass}

We recommend that @dfn{predicate methods} (those whose name ends with
a question mark) return @code{true} or @code{false}.  Other methods that need to
indicate failure should return @code{nil}.
@cindex predicate methods

@anchor{empty string}
@subheading The Empty String
@cindex empty string
@cindex conditional expression, @code{false} values

An empty string (@code{""}) returns @code{true} in a conditional
expression!  In Perl, it’s @code{false}.  It’s very simple: in Ruby,
only @code{nil} and @code{false} are @code{false} in conditional
contexts.

You can use @code{empty?}, compare the string to @code{""}, or compare
the string’s size or length to 0 to find out if a string is empty.

@anchor{symbol object}
@subheading A Symbol Object
@cindex Symbol object
@cindex @code{"name".to_sym}
@cindex @code{"name".intern}

What does @code{:name} mean?

A colon followed by a name generates a @dfn{Symbol object} which
corresponds one-to-one with the identifier.  During the duration of a
program's execution the same Symbol object will be created for a given
name or string.  Symbols can also be created with @code{"name".intern}
or @code{"name".to_sym}.

Symbol objects can represent identifiers for methods, variables, and
so on.  Some methods, like @code{define_method},
@code{method_missing}, or @code{trace_var}, require a symbol.  Other
methods, e.g. @code{attr_accessor}, @code{send}, or @code{autoload},
also accept a string.

Due to the fact that they are created only once, Symbols are often
used as hash keys.  String hash keys would create a new object for
every single use, thereby causing some memory overhead.  There is even
a special syntax for symbol hash keys:
@cindex symbols as hash keys

@example
person_1 = @{ :name => "John", :age => 42 @}
person_2 = @{ name: "Jane", age: 24 @}        # alternate syntax
@end example

Symbols can also be used as enumeration values or to assign unique
values to constants:
@cindex symbols as enumeration values
@cindex symbols, unique constants

@example
status = :open  # :closed, ...

NORTH = :NORTH
SOUTH = :SOUTH
@end example

@anchor{value of symbol}
@subheading How can I access the value of a symbol?
@cindex symbol, access value of
@cindex @code{symbol.to_s}
@cindex @code{"#symbol"}
@cindex @code{eval}

To get the value of the variable corresponding to a symbol, you can
use @code{symbol.to_s} or @code{"#@{symbol@}"} to get the name of the
variable, and then @code{eval} that in the scope of the symbol to get
the variable’s contents:

@example
a = "This is the content of `a'"
b = eval("#@{:a@}")
a.object_id == b.object_id  # => true
@end example

You can also use:

@example
b = binding.local_variable_get(:a)
@end example
@cindex @code{binding.local_variable_get(:symbol)}

If your symbol corresponds to the name of a method, you can use
@code{send}:
@cindex @code{send}

@example
class Demo
  def hello
    "Hello, world"
  end
end

demo = Demo.new
demo.send(:hello)
@end example

Or you can use @code{Object#method} to return a corresponding @file{Method}
object, which you may then call:

@example
m = demo.method(:hello)  # => #<Method: Demo#hello>
m.call                   # => "Hello, world"
@end example

@anchor{loop}
@subheading Is @code{loop} a control structure?
@cindex @code{loop}
@cindex @file{Kernel}

Although @code{loop} looks like a control structure, it is actually a
method defined in @file{Kernel}.  The block which follows introduces a
new scope for local variables.

@anchor{post-test loop}
@subheading Ruby doesn’t have a post-test loop
@cindex @code{do @dots{} @} while}

Ruby does not have a @code{do @{ @dots{} @} while} construct, so how
can I implement loops that test the condition at the end?

Clemens Hintze says: ``You can use a combination of Ruby’s @code{begin
@dots{} end} and the @code{while} or @code{until} statement modifiers
to achieve the same effect:

@example
i = 0
begin
  puts "i = #@{i@}"
  i += 1
end until i > 4
@end example

@anchor{hash literal}
@subheading Why can’t I pass a hash literal to a method: @code{p @{@}}?

The @code{@{@}} is parsed as a block, not a @file{Hash} constructor.
You can force the @code{@{@}} to be treated as an expression by making
the fact that it's a parameter explicit: @code{p(@{@})}.

@anchor{pos val}
@subheading I can’t get @code{def pos=(val)} to work!

I have the following code, but I cannot use the method @code{pos = 1}.

@example
def pos=(val)
  @@pos = val
  puts @@pos
end
@end example

Methods with @kbd{=} appended must be called with an explicit receiver
(without the receiver, you are just assigning to a local
variable).  Invoke it as @code{self.pos = 1}.

@anchor{\1 and \\1}
@subheading What is the difference between @code{\1} and @code{\\1}?

They have the same meaning.  In a single quoted string, only @code{\'}
and @code{\\} are transformed and other combinations remain unchanged.

However, in a double quoted string, @code{"\1"} is the byte
@code{\001} (an octal bit pattern), while @code{"\\1"} is the two
character string containing a backslash and the character @code{"1"}.

@anchor{2 dots vs 3 dots}
@subheading What is the difference between @code{..} and @code{...}?
@cindex @code{..} vs. @code{...}

@code{..}  includes the right hand side in the range, while @code{...}
does not:

@example
(5..8).to_a   # => [5, 6, 7, 8]
(5...8).to_a  # => [5, 6, 7]
@end example

@anchor{or and}
@subheading What is the difference between @code{or} and @code{||}?
@cindex precedence of @code{or}

@code{p(nil || "Hello")} prints @code{"Hello"}, while @code{p(nil or
"Hello")} gives a parse error.  Why?

@code{or} has a very low precedence; @code{p( (nil or "Hello") )} will
work.

The precedence of @code{or} is for instance also lower than that of @code{=},
whereas @code{ || } has a higher precedence:

@example
foo = nil || "Hello"  # parsed as: foo = (nil || "Hello")
foo  # => "Hello"

# but perhaps surprisingly:

foo = nil or "Hello"  # parsed as: (foo = nil) or "Hello"
foo  # => nil
@end example

@code{or} (and similarly @code{and}) is best used, not for combining
boolean expressions, but for control flow, like in:

@example
do_something  or raise "some error!"
@end example

where @code{do_something} returns @code{false} or @code{nil} when an
error occurs.

@anchor{function pointers}
@subheading Does Ruby have function pointers?
@cindex function pointers

A @file{Proc} object generated by @code{Proc.new}, @code{proc}, or
@code{lambda} can be referenced from a variable, so that variable
could be said to be a function pointer.  You can also get references to
methods within a particular object instance using @code{object.method}.

@anchor{load vs require}
@subheading What is the difference between load and require?
@cindex @command{load}
@cindex @command{require}

@command{load} will load and execute a Ruby program (@file{*.rb}).

@command{require} loads Ruby programs as well, but will also load
@dfn{binary Ruby extension modules} (shared libraries or DLLs).  In
addition, @command{require} ensures that a feature is never loaded
more than once.
@cindex binary Ruby extension modules
@cindex shared libraries
@cindex DLLs

@anchor{exception handling}
@subheading Does Ruby have exception handling?
@cindex exception handling

Ruby supports a flexible exception handling scheme:

@example
begin
  statements which may raise exceptions
rescue [exception class names]
  statements when an exception occurred
rescue [exception class names]
  statements when an exception occurred
ensure
  statements that will always run
end
@end example
@cindex @code{rescue} clause
@cindex @code{ensure} clause

If an exception occurs in the @code{begin} clause, the @code{rescue}
clause with the matching exception name is executed.  The
@code{ensure} clause is executed whether an exception occurred or not.
@code{rescue} and @code{ensure} clauses may be omitted.

If no exception class is designated for a @code{rescue} clause,
@file{StandardError} exception is implied, and exceptions which are in
a @code{is_a?} relation to @file{StandardError} are captured.

This expression returns the value of the @code{begin} clause.

The latest exception is accessed by the global variable @code{$!} (and
so its type can be determined using @code{$!.type}).

@c _____________________________________

@node FAQ Methods
@subsubsection FAQ Methods

@subheading How does Ruby choose which method to invoke?
@cindex method, invoking 

@subheading Are @code{+, -, *, ...} operators?
@cindex operators?

@subheading Where are @code{++} and @code{--} ?
@cindex @code{++} and @code{--}

@subheading What is a singleton method?
@cindex singleton method

@subheading All these objects are fine, but does Ruby have any simple functions?
@cindex simple functions?

@subheading So where do all these function-like methods come from?
@cindex function-like methods, where from?

@subheading Can I access an object’s instance variables?
@cindex instance variables, accessing

@subheading What’s the difference between @code{private} and @code{protected}?
@cindex @code{private} vs @code{protected}

@subheading How can I change the visibility of a method?
@cindex visibility, changing

@subheading Can an identifier beginning with a capital letter be a method name?
@cindex identifier with capital letter, method?

@subheading Calling @code{super} gives an @file{ArgumentError}.
@cindex @code{super} gives @file{ArgumentError}
@cindex @file{ArgumentError}, after calling @code{super}

@subheading How can I call the method of the same name two levels up?
@cindex calling method 2 levels up

@subheading How can I invoke an original built-in method after redefining it?
@cindex invoking original method after redefinition

@subheading What is a destructive method?
@cindex destructive method
@cindex method, destructive

@subheading Why can destructive methods be dangerous?
@cindex dangerous, destructive methods

@subheading Can I return multiple values from a method?
@cindex return mutliple values

@c _____________________________________

@node FAQ Classes and Modules
@subsubsection FAQ Classes and Modules

@subheading Can a class definition be repeated?
@cindex class definition, repeating

@subheading Are there class variables?
@cindex class variables?

@subheading What is a class instance variable?
@cindex class instance variable?

@subheading What is the difference between class variables and class instance variables?
@cindex class variables vs class instance variables

@subheading Does Ruby have class methods?
@cindex class methods?

@subheading What is a singleton class?
@cindex singleton class?

@subheading What is a module function?
@cindex module function?

@subheading What is the difference between a class and a module?
@cindex class vs module

@subheading Can you subclass modules?
@cindex modules, subclassing?

@subheading Give me an example of a mixin
@cindex mixin example

@subheading Why are there two ways of defining class methods?
@cindex class methods, defining, 2 ways

@subheading What is the difference between include and extend?
@cindex @code{include} vs @code{extend}

@subheading What does @code{self} mean?
@cindex @code{self}, meaning

@c _____________________________________

@node FAQ Built-In Libraries
@subsubsection FAQ Built-In Libraries

@subheading What does @code{instance_methods(false)} return?
@cindex @code{instance_methods(false)}

@subheading How do random number seeds work?
@cindex random number seeds

@subheading I read a file and changed it, but the file on disk has not changed.
@cindex files, reading vs modifying

@subheading How can I process a file and update its contents?
@cindex file, process and update contents

@subheading I wrote a file, copied it, but the end of the copy seems to be lost.
@cindex file, copy

@subheading How can I get the line number in the current input file?
@cindex file, line number
@cindex line number of input file

@subheading How can I use @command{less} to display my program’s output?
@cindex program output, display using @command{less}

@subheading What happens to a @file{File} object which is no longer referenced?
@cindex @file{File} object, no reference

@subheading I feel uneasy if I don’t close a file.
@cindex files, closing

@subheading How can I sort files by their modification time?
@cindex files, sorting by modification time

@subheading How can I count the frequency of words in a file?
@cindex files, counting words

@subheading How can I sort strings in alphabetical order?
@cindex strings, sort alphabetically

@subheading How can I expand tabs to spaces?
@cindex tabs, expand into spaces

@subheading How can I escape a backslash in a regular expression?
@cindex regular expression, escaping a backslash

@subheading What is the difference between @code{sub} and @code{sub!}?
@cindex @code{sub} vs @code{sub!}

@subheading Where does @code{\Z} match?
@cindex @code{\Z}

@subheading What is the difference between @code{thread} and @code{fork}?
@cindex @code{thread} vs @code{fork}
@cindex @code{fork} vs @code{thread}

@subheading How can I use @file{Marshal}?
@cindex @file{Marshal}

@subheading How can I use @code{trap}?
@cindex @code{trap}

@c _____________________________________

@node FAQ Extension Library
@subsubsection FAQ Extension Library

@subheading How can I use Ruby interactively?
@cindex interactively use Ruby

@subheading Is there a debugger for Ruby?
@cindex debugger for Ruby

@subheading How can I use a library written in C from Ruby?
@cindex C library, use

@subheading Can I use @file{Tcl/Tk} in Ruby?
@cindex @file{Tcl/Tk}, use

@subheading @file{Tk} won't work. Why?
@cindex @file{Tk}, won't work

@subheading Can I use @command{gtk+} or @command{xforms} interfaces in Ruby?
@cindex @command{gtk+}
@cindex @command{xforms}

@subheading How can I do date arithmetic?
@cindex arithmetic

@c _____________________________________

@node FAQ Other Features
@subsubsection FAQ Other Features

@subheading What does a ? b : c mean?
@cindex ternary operator

@subheading How can I count the number of lines in a file?
@cindex file, count lines in

@subheading What do @code{MatchData#begin} and @code{MatchData#end} return?
@cindex @code{MatchData#begin} and @code{MatchData#end}

@subheading How can I sum the elements in an array?
@cindex array, sum elements in

@subheading How can I use continuations?
@cindex continuations, using


@c .....................................

@node Ruby Koans
@subsection Ruby Koans

@url{http://rubykoans.com/, Ruby Koans}

The Koans walk you along the path to enlightenment in order to learn Ruby.  The
goal is to learn the Ruby language, syntax, structure, and some common
functions and libraries.  We also teach you culture.  


@c .....................................

@node Why’s (Poignant) Guide to Ruby
@subsection Why’s (Poignant) Guide to Ruby

@url{http://mislav.uniqpath.com/poignant-guide/, Why's Guide to Ruby}

An unconventional but interesting book that will teach you Ruby through
stories, wit, and comics.  Originally created by @cite{why the lucky stiff},
this guide remains a classic for Ruby learners.


@c .....................................

@node Ruby in Twenty Minutes
@subsection Ruby in Twenty Minutes

@url{https://www.ruby-lang.org/en/documentation/quickstart/, Ruby in Twenty
Minutes}

A nice tutorial covering the basics of Ruby. From start to finish it shouldn’t
take you more than twenty minutes.  It makes the assumption that you already
have Ruby installed.  (If you do not have Ruby on your computer install it
before you get started.)

@c _____________________________________

@node Interactive Ruby
@subsubsection Interactive Ruby
@cindex @command{irb}

Ruby comes with a program that will show the results of any Ruby statements you
feed it.  Playing with Ruby code in interactive sessions like this is a terrific
way to learn the language.

Open up @file{IRB} (which stands for Interactive Ruby).

@example
? irb
@print{} irb(main):001:0>

irb(main):001:0> "Hello World"
@result{} "Hello World"
@print{} irb(main):002:0>
@end example

The second line is just IRB’s way of telling us the result of the last
expression it evaluated.  To print:

@example
irb(main):002:0> puts "Hello World"
@print{} Hello World
@result{} nil
@print{} irb(main):003:0>
@end example

@command{puts} is the basic command to print something out in Ruby.  But then
what’s the @samp{=> nil} bit?  That’s the result of the expression.
@command{puts} always returns @code{nil}, which is Ruby’s
absolutely-positively-nothing value.

@c _____________________________________

@node Defining Methods
@subsubsection Defining Methods
@cindex methods, defining
@cindex @code{def}

Define a method:

@example
irb(main):010:0> def hi
irb(main):011:1> puts "Hello World!"
irb(main):012:1> end
=> :hi
@end example

The code @samp{def hi} starts the definition of the method.  The next line is
the body of the method.  Finally, the last line end tells Ruby we’re done
defining the method.  Ruby’s response @print{} @code{=> :hi} tells us that it
knows we're done defining the method.

Try running that method a few times:

@example
irb(main):013:0> hi
Hello World!
=> nil
irb(main):014:0> hi()
Hello World!
=> nil
@end example
@cindex method, invoking
@cindex parentheses, optional

If the method doesn't take parameters that's all you need.  You can add empty
parentheses if you’d like, but they’re not needed.

@subsubheading Define Method with a Parameter
@cindex method parameters
@cindex parameters, methods

What if we want to say hello to one person, and not the whole world? Just
redefine @code{hi} to take a name as a parameter.

@example
irb(main):015:0> def hi(name)
irb(main):016:1> puts "Hello #@{name@}!"
irb(main):017:1> end
=> :hi
irb(main):018:0> hi("Matz")
Hello Matz!
=> nil
@end example
@cindex insert code into a string

What's the @code{#@{name@}} bit?  That's Ruby's way of inserting something into
a string.  The bit between the braces is turned into a string (if it isn’t one
already) and then substituted into the outer string at that point.  You can also
use this to make sure that someone's name is properly capitalized:

@example
irb(main):019:0> def hi(name = "World")
irb(main):020:1> puts "Hello #@{name.capitalize@}!"
irb(main):021:1> end
=> :hi
irb(main):022:0> hi "chris"
Hello Chris!
=> nil
irb(main):023:0> hi
Hello World!
=> nil
@end example
@cindex parentheses, optional

A couple of other tricks to spot here.  One is that we're calling the method
without parentheses again.  If it's obvious what you’re doing, the parentheses
are optional.  The other trick is the default parameter World. What this is
saying is ``If the name isn't supplied, use the default name of "World"''.

@subheading Create a Class
@cindex class definition
@cindex @code{class} keyword

What if we want a real greeter around, one that remembers your name and
welcomes you and treats you always with respect.  You might want to use an
object for that.  Let’s create a “Greeter” class.

@example
irb(main):024:0> class Greeter
irb(main):025:1>   def initialize(name = "World")
irb(main):026:2>     @@name = name
irb(main):027:2>   end
irb(main):028:1>   def say_hi
irb(main):029:2>     puts "Hi #@{@@name@}!"
irb(main):030:2>   end
irb(main):031:1>   def say_bye
irb(main):032:2>     puts "Bye #@{@@name@}, come back soon."
irb(main):033:2>   end
irb(main):034:1> end
=> :say_bye
@end example
@cindex instance variable

The new keyword here is @code{class}.  This defines a new class called
@file{Greeter} and a bunch of methods for that class.  Also notice
@code{@@name}.  This is an instance variable, and is available to all the
methods of the class.  As you can see it’s used by @code{say_hi} and
@code{say_bye}.

@subheading Create an Object
@cindex object, create from class definition

Now let’s create a greeter object and use it:

@example
irb(main):035:0> greeter = Greeter.new("Pat")
=> #<Greeter:0x16cac @@name="Pat">
irb(main):036:0> greeter.say_hi
Hi Pat!
=> nil
irb(main):037:0> greeter.say_bye
Bye Pat, come back soon.
=> nil
@end example

@subheading Instance Variables
@cindex instance variables, encapsulation

Instance variables are hidden away inside the object.  They’re not terribly
hidden, you see them whenever you inspect the object, and there are other ways
of accessing them, but Ruby uses the good object-oriented approach of keeping
data sort-of hidden away.

So what methods do exist for Greeter objects?

@samp{Object#instance_methods}
@cindex @code{Object#instance_methods}

@example
irb(main):039:0> Greeter.instance_methods
=> [:say_hi, :say_bye, :instance_of?, :public_send,
    :instance_variable_get, :instance_variable_set,
    :instance_variable_defined?, :remove_instance_variable,
    :private_methods, :kind_of?, :instance_variables, :tap,
    :is_a?, :extend, :define_singleton_method, :to_enum,
    :enum_for, :<=>, :===, :=~, :!~, :eql?, :respond_to?,
    :freeze, :inspect, :display, :send, :object_id, :to_s,
    :method, :public_method, :singleton_method, :nil?, :hash,
    :class, :singleton_class, :clone, :dup, :itself, :taint,
    :tainted?, :untaint, :untrust, :trust, :untrusted?, :methods,
    :protected_methods, :frozen?, :public_methods, :singleton_methods,
    :!, :==, :!=, :__send__, :equal?, :instance_eval, :instance_exec, :__id__]
 @end example

We only defined two methods.  What’s going on here?  Well this is all of the
methods for Greeter objects, a complete list, including ones defined by
ancestor classes.  If we want to just list methods defined for Greeter we can
tell it to not include ancestors by passing it the parameter false, meaning we
don’t want methods defined by ancestors.

@samp{Object#instance_methods(false)}

@example
irb(main):040:0> Greeter.instance_methods(false)
=> [:say_hi, :say_bye]
@end example

So let’s see which methods our greeter object responds to:

@samp{Object#respond_to?}
@cindex @code{Object#respond_to?}

@example
irb(main):041:0> greeter.respond_to?("name")
=> false
irb(main):042:0> greeter.respond_to?("say_hi")
=> true
irb(main):043:0> greeter.respond_to?("to_s")
=> true
@end example

So, it knows @code{say_hi}, and @code{to_s} (meaning convert something to a
string, a method that's defined by default for every object), but it doesn't
know @code{name}.

@c _____________________________________

@node Altering Classes
@subsubsection Altering Classes

But what if you want to be able to view or change the name?  Ruby provides an
easy way of providing access to an object's variables.

@samp{attr_accessor :name}
@cindex @code{attr_accessor :name}

@example
irb(main):044:0> class Greeter
irb(main):045:1>   attr_accessor :name
irb(main):046:1> end
=> nil
@end example

In Ruby, you can open a class up again and modify it.  The changes will be
present in any new objects you create and even available in existing objects of
that class.  So, let’s create a new object and play with its @code{@@name}
property.
@cindex classes, modifying

@example
irb(main):047:0> greeter = Greeter.new("Andy")
=> #<Greeter:0x3c9b0 @@name="Andy">
irb(main):048:0> greeter.respond_to?("name")
=> true
irb(main):049:0> greeter.respond_to?("name=")
=> true
irb(main):050:0> greeter.say_hi
Hi Andy!
=> nil
irb(main):051:0> greeter.name="Betty"
=> "Betty"
irb(main):052:0> greeter
=> #<Greeter:0x3c9b0 @@name="Betty">
irb(main):053:0> greeter.name
=> "Betty"
irb(main):054:0> greeter.say_hi
Hi Betty!
=> nil
@end example

Using @code{attr_accessor} defined two new methods for us, @code{name} to get
the value, and @code{name=} to set it.
@cindex @code{attr_accessor}, methods defined

@c _____________________________________

@node Large Class Definition
@subsubsection Large Class Definition

What if we had some kind of MegaGreeter that could either greet the world, one
person, or a whole list of people?  Let’s write this one in a file instead of
directly in the interactive Ruby interpreter IRB.

@(ri20min.rb@)=
#!/usr/bin/env ruby

class MegaGreeter
  attr_accessor :names

  @<MegaGreeter---Initialize Method@>
  @<MegaGreeter---say_hi Method@>
  @<MegaGreeter---say_bye Method@>
end

if __FILE__ == $0
  @<MegaGreeter---Main Script@>
end

@

@subsubheading Initialize Method
@cindex @code{initialize} method

@<MegaGreeter---Initialize Method@>=
  # Create the object
  def initialize(names = "World")
    @names = names
  end
  
@

@subheading @code{say_hi} Method
@cindex respond to message, instance variable
@cindex @code{respond_to?} method

The @code{say_hi} method has become a bit more complicated.  It now looks at
the @code{@@names} instance variable to make decisions.  If it's @code{nil}, it
just prints out three dots.  No point greeting nobody, right?

If the @code{@@names} object responds to each, it is something that you can
iterate over, so iterate over it and greet each person in turn.  Finally, if
@code{@@names} is anything else, just let it get turned into a string
automatically and do the default greeting.

@<MegaGreeter---say_hi Method@>=
  # Say hi to everybody
  def say_hi
    if @names.nil?
      puts "..."
    elsif @names.respond_to?("each")
      # @names is a list of some kind, iterate!
      @names.each do |name|
        puts "Hello #{name}!"
      end
    else
      puts "Hello #{@names}!"
    end
  end
  
@

@subsubheading The Iterator
@cindex iterator
@cindex block
@cindex @code{yield}

Let’s look at that iterator in more depth:

@example
@@names.each do |name|
  puts "Hello #@{name@}!"
end
@end example

@code{each} is a method that accepts a block of code then runs that block of
code for every element in a list, and the bit between @code{do} and @code{end}
is just such a block.  A @dfn{block} is like an anonymous function or lambda.
The variable between pipe characters is the parameter for this block.

What happens here is that for every entry in a list, @code{name} is bound to
that list element, and then the expression puts @samp{"Hello #@{name@}!"} is
run with that name.

Internally, the @code{each} method will essentially call @code{yield}
@samp{"Albert"}, then @code{yield} @samp{"Brenda"} and then @code{yield}
@samp{"Charles"}, and so on.

@subsubheading The Real Power of Blocks

The real power of blocks is when dealing with things that are more complicated
than lists.  Beyond handling simple housekeeping details within the method, you
can also handle setup, teardown, and errors—all hidden away from the cares of
the user.

@subheading @code{say_bye} Method
@cindex @code{join} method, respond to

The @code{say_bye} method doesn't use @code{each}; instead it checks to see if
@code{@@names} @dfn{responds} to the @code{join} method, and if so, uses
it.  Otherwise, it just prints out the variable as a string.

@subsubheading Duck Typing
@cindex duck typing

This method of not caring about the actual type of a variable, just relying on
what methods it supports is known as @dfn{Duck Typing}, as in ``if it walks like
a duck and quacks like a duck@dots{}''.  The benefit of this is that it doesn't
unnecessarily restrict the types of variables that are supported.  If someone
comes up with a new kind of list class, as long as it implements the
@code{join} method with the same semantics as other lists, everything will work
as planned.

@<MegaGreeter---say_bye Method@>=
  # Say bye to everybody
  def say_bye
    if @names.nil?
      puts "..."
    elsif @names.respond_to?("join")
      # Join the list elements with commas
      puts "Goodbye #{@names.join(", ")}.  Come back soon!"
    else
      puts "Goodbye #{@names}.  Come back soon!"
    end
  end
  
@

@subheading MegaGreeter Main Script
@cindex @code{__FILE__} special variable
@cindex script code

There’s one final trick to notice, and that’s the line:

@example
if __FILE__ == $0
@end example

@var{__FILE__} is the magic variable that contains the name of the current
file.  $0 is the name of the file used to start the program.  This check says
``If this is the main file being used@dots{}''  This allows a file to be used
as a library, and not to execute code in that context, but if the file is being
used as an executable, then execute that code.

@<MegaGreeter---Main Script@>=
  mg = MegaGreeter.new
  mg.say_hi
  mg.say_bye

  # Change name to be "Zeke"
  mg.names = "Zeke"
  mg.say_hi
  mg.say_bye

  # Change the name to an array of names
  mg.names = ["Albert", "Brenda", "Charles",
              "Dave", "Engelbert"]
  mg.say_hi
  mg.say_bye

  # Change to nil
  mg.names = nil
  mg.say_hi
  mg.say_bye

@

@c _____________________________________

@node Run MegaGreeter
@subsubsection Run MegaGreeter

Run the program @file{ri20min.rb} as @samp{ruby ri20min.rb}.  The output should
be:

@example
Hello World!
Goodbye World.  Come back soon!
Hello Zeke!
Goodbye Zeke.  Come back soon!
Hello Albert!
Hello Brenda!
Hello Charles!
Hello Dave!
Hello Engelbert!
Goodbye Albert, Brenda, Charles, Dave, Engelbert.  Come back soon!
...
...
@end example


@c .....................................

@node Ruby from Other Languages
@subsection Ruby from Other Languages

@url{https://www.ruby-lang.org/en/documentation/ruby-from-other-languages/,
Ruby from Other Languages}

This document contains two major sections.  The first attempts to be a
rapid-fire summary of what you can expect to see when going from language X
to Ruby.  The second section tackles the major language features and how they
might compare to what you’re already familiar with.

@c _____________________________________

@node To Ruby From C and C++
@subsubsection To Ruby From C and C++

@subheading Everything Is Differerent

It's difficult to write a bulleted list describing how your code will be
different in Ruby from C or C++ because it's quite a large difference.  One
reason is that the Ruby runtime does so much for you.  Ruby seems about as far
as you can get from C's ``no hidden mechanism'' principle---the whole point of
Ruby is to make the human's job easier at the expense of making the runtime
shoulder more of the work.

@subsubheading Ruby is Quicker to Code But Slower to Execute

That said, for one thing, you can expect your Ruby code to execute much more
slowly than ``equivalent'' C or C++ code.  At the same time, your head will spin
at how rapidly you can get a Ruby program up and running, as well as at how
few lines of code it will take to write it.  Ruby is much much simpler than
C++.

@subheading Dynamically Typed
@cindex dynamicly typed
@cindex statically typed

Ruby is dynamically typed, rather than statically typed---the runtime does as
much as possible at run-time.  For example, you don't need to know what
modules your Ruby program will ``link to'' (that is, load and use) or what
methods it will call ahead of time.

@subheading Extension Modules
@cindex extension modules

Happily, it turns out that Ruby and C have a healthy symbiotic relationship.
Ruby supports so-called @dfn{extension modules}.  These are modules that you
can use from your Ruby programs (and which, from the outside, will look and
act just like any other Ruby module), but which are written in C.  In this
way, you can compartmentalize the performance-critical parts of your Ruby
software, and smelt those down to pure C.

And, of course, Ruby itself is written in C.

@subheading Similarities With C

@itemize
@item
You may program procedurally if you like (but it will still be
object-oriented behind the scenes).
@item
Most of the operators are the same (including the compound assignment and
also bitwise operators).  Though, Ruby doesn’t have @code{++} or @code{--}.
@item
Ruby has @var{__FILE__} and @var{__LINE__}.
@item
You can also have constants, though there’s no special const keyword.
@code{Const}-ness is enforced by a naming convention instead --- names
starting with a capital letter are for constants.
@item
Strings go in double-quotes and are mutable
@item
Just like man pages, you can read most docs in your terminal window ---
though using the @command{ri} command.
@item
You’ve got the same sort of command-line debugger available.
@end itemize

@subheading Similarities with C++

@itemize
@item
You’ve got mostly the same operators (even @code{::}).  @code{<<} is often
used for appending elements to a list.  One note though: with Ruby you never
use @code{->} --- it's always just @code{.}.
@item
@code{public}, @code{private}, and @code{protected} do similar jobs.
@item
Inheritance syntax is still only one character, but it's @code{<} instead of
@code{:}.
@item
You may put your code into ``modules'', similar to how @code{namespace} in C++ is
used.
@item
Exceptions work in a similar manner, though the keyword names have been
changed to protect the innocent.
@end itemize

@subheading Differences From C
@cindex strongly typed objects

@itemize
@item
You don’t need to compile your code.  You just run it directly.
@item
Objects are strongly typed (and variable names themselves have no type at
all).
@item
There’s no macros or preprocessor; no casts; no pointers (nor pointer
arithmetic); no typedefs, sizeof, or enums.
@item
There are no header files.  You just define your functions (usually referred
to as ``methods'') and classes in the main source code files.
@item
There’s no @code{#define}.  Just use constants instead.
@item
@cindex heap
All variables live on the heap.  Further, you don’t need to free them
yourself --- the garbage collector takes care of that.
@item
Arguments to methods (i.e. functions) are passed by value, where the values
are always object references.
@item
It's @samp{require 'foo'} instead of @samp{#include <foo>} or @samp{#include
"foo"}.
@item
You cannot drop down to assembly.
@item
There’s no semicolons ending lines.
@item
You go without parentheses for @code{if} and @code{while} condition
expressions.
@cindex parentheses, none for condition expressions
@item
Parentheses for method (i.e. function) calls are often optional.
@cindex parentheses, optional for method calls
@item
You don’t usually use braces --- just end multi-line constructs (like
@code{while} loops) with an @code{end} keyword.
@cindex braces, none
@item
The @code{do} keyword is for so-called @dfn{blocks}.  There’s no ``do
statement'' like in C.
@cindex @code{do} keyword
@item
The term @dfn{block} means something different.  It's for a block of code
that you associate with a method call so the method body can call out to the
block while it executes.
@cindex block
@item
There are no variable declarations.  You just assign to new names on-the-fly
when you need them.
@item
When tested for truth, only @code{false} and @code{nil} evaluate to a
@code{false} value.  Everything else is true (including @code{0}, @code{0.0},
and @code{"0"}).
@cindex truth values
@item
There is no @code{char} --- they are just 1-letter strings.
@item
Strings don’t end with a null byte.
@item
Array literals go in brackets instead of braces.
@cindex array literals in brackets
@item
Arrays just automatically get bigger when you stuff more elements into them.
@cindex arrays are dynamic and mutable
@item
If you add two arrays, you get back a new and bigger array (of course,
allocated on the heap) instead of doing pointer arithmetic.
@cindex arrays, adding
@item
More often than not, everything is an expression (that is, things like
@code{while} statements actually evaluate to an @code{rvalue}).
@end itemize

@subheading Differences from C++

@itemize
@item
There’s no explicit references.  That is, in Ruby, every variable is just an
automatically dereferenced name for some object.
@item
Objects are strongly but @emph{dynamically} typed.  The runtime discovers
@emph{at runtime} if that method call actually works.
@cindex objects, strongly and dynamically typed
@item
The @dfn{constructor} is called @code{initialize} instead of the class name.
@cindex constructor
@item
All methods are always virtual.
@cindex methods are virtual
@item
``Class'' (@code{static}) variable names always begin with @code{@@@@} (as in
@code{@@@@total_widgets}).
@item
You don’t directly access member variables --- all access to public member
variables (known in Ruby as @dfn{attributes}) is via methods.
@cindex attributes
@cindex member variables, access to
@item
It's @code{self} instead of @code{this}.
@cindex object reference is @code{self}
@cindex @code{self}, object reference
@item
Some methods end in a @code{?} or a @code{!}.  It's actually part of the
method name.
@item
There's no multiple inheritance per se.  Though Ruby has @dfn{mixins}
(i.e. you can ``inherit'' all instance methods of a module).
@cindex multiple inheritance
@cindex mixins
@item
There are some enforced case-conventions (ex. class names start with a
capital letter, variables start with a lowercase letter).
@cindex case conventions, enforced
@item
Parentheses for method calls are usually optional.
@item
You can re-open a class anytime and add more methods.
@item
There’s no need of C++ templates (since you can assign any kind of object to
a given variable, and types get figured out at runtime anyway).  No casting
either.
@cindex templates
@cindex cast
@item
Iteration is done a bit differently.  In Ruby, you don't use a separate
iterator object (like @code{vector<T>::const_iterator iter}).  Instead you use an
iterator method of the container object (like @code{each}) that takes a block of
code to which it passes successive elements.
@cindex iteration
@cindex iterator method
@cindex block for iterator
@item
There’s only two container types: @file{Array} and @file{Hash}.
@cindex @file{Array}
@cindex @file{Hash}
@cindex container types
@item
There’s no type conversions.  With Ruby though, you’ll probably find that they
aren’t necessary.
@cindex type conversions
@item
Multithreading is built-in, but as of Ruby 1.8 they are @dfn{green threads}
(implemented only within the interpreter) as opposed to native threads.
@cindex multithreading
@cindex green threads vs native threads
@cindex threads, native vs green
@item
A unit testing lib comes standard with Ruby.
@cindex unit testing lib
@end itemize

@c _____________________________________

@node To Ruby From Java
@subsubsection To Ruby From Java

@subheading Ruby is Less Verbose

Java is mature.  It's tested.  And it's fast (contrary to what the anti-Java
crowd may still claim).  It's also quite verbose.  Going from Java to Ruby,
expect your code size to shrink down considerably.  You can also expect it to
take less time to knock together quick prototypes.

@subheading Similarities with Java

@itemize
@item
Memory is managed for you via a garbage collector.
@cindex memory management
@cindex garbage collector
@item
Objects are strongly typed.
@cindex objects, strongly typed
@item
There are @code{public}, @code{private}, and @code{protected} methods.
@cindex visibility features
@item
There are embedded doc tools (Ruby's is called @file{RDoc}).  The docs
generated by @command{rdoc} look very similar to those generated by
@command{javadoc}.
@cindex @file{RDoc}
@cindex @command{rdoc}
@cindex documentation tool
@cindex @command{javadoc}
@end itemize

@subheading Differences From Java

@itemize
@item
You don’t need to compile your code. You just run it directly.
@item
There are several different popular third-party GUI toolkits.  Ruby users can
try @file{WxRuby}, @file{FXRuby}, @file{Ruby-GNOME2}, @file{Qt}, or the
bundled-in @file{Ruby Tk} for example.
@cindex GUI toolkits
@cindex @file{WxRuby}
@cindex @file{FXRuby}
@cindex @file{Ruby-GNOME2}
@cindex @file{Qt}
@cindex @file{Ruby Tk}
@item
You use the @code{end} keyword after defining things like classes, instead of
having to put braces around blocks of code.
@item
You have @code{require} instead of @file{import}.
@cindex @code{require}
@cindex @code{import}
@item
All member variables are private.  From the outside, you access everything
via methods.
@cindex access control
@item
Parentheses in method calls are usually optional and often omitted.
@cindex parentheses, optional in method calls
@item
Everything is an object, including numbers like @code{2} and @code{3.14159}.
@cindex objects, everything including numbers
@item
There’s no static type checking.
@cindex static checking, none
@item
Variable names are just labels.  They don’t have a type associated with them.
@item
There are no type declarations.  You just assign to new variable names
as-needed and they just ``spring up'' (i.e. @samp{a = [1,2,3]} rather than
@samp{int[] a = @{1,2,3@};}).
@cindex type declarations, none
@item
There’s no casting.  Just call the methods.  Your unit tests should tell you
before you even run the code if you’re going to see an exception.
@cindex casting, none
@item
It's @samp{foo = Foo.new("hi")} instead of @samp{Foo foo = new Foo("hi")}.
@item
The constructor is always named @code{initialize} instead of the name of the
class.
@cindex constructor
@cindex @code{initialize}, constructor
@item
You have ``mixins'' instead of interfaces.
@cindex mixins
@cindex interfaces, none, use mixins
@item
@acronym{YAML} tends to be favored over @acronym{XML}.
@cindex YAML vs XML
@cindex XML vs YAML
@item
It's @code{nil} instead of @code{null}.
@cindex @code{nil} vs @code{null}
@cindex @code{null} vs @code{nil}
@item
@code{==} and @code{equals()} are handled differently in Ruby.  Use @code{==}
when you want to test ``equivalence'' in Ruby (@code{equals()} in Java).  Use
@code{equal?()} when you want to know if two objects are ``the same''
(@code{==} in Java).
@cindex equivalence vs the same
@cindex @code{==} vs @code{equals()}
@end itemize

@c _____________________________________

@node To Ruby From Perl
@subsubsection To Ruby From Perl

Perl is awesome.  Perl's docs are awesome.  The Perl community is ---
awesome.  However, the language is fairly large and arguably complex.  For
those Perlers who long for a simpler time, a more orthogonal language, and
elegant OO features built-in from the beginning, Ruby may be for you.

@subheading Similarities with Perl

@itemize
@item
You’ve got a package management system, somewhat like CPAN (though it’s
called @url{http://guides.rubygems.org/,RubyGems}).
@item
Regexes are built right in.
@cindex regexes
@item
There's a fairly large number of commonly-used built-ins.
@item
Parentheses are often optional.
@item
Strings work basically the same.
@item
There’s a general delimited string and regex quoting syntax similar to
Perl’s.  It looks like @verb{|%q{this}|} (single-quoted), or
@verb{|%Q{this}|} (double-quoted), and @verb{|%w{this for a single-quoted
list of words}|}.  You @verb{|%Q|can||} @verb{|%Q(use)|} @verb{|%Q^other^|}
delimiters if you like.
@item
You’ve got double-quotish variable interpolation, though it @samp{"looks
#@{like@} this"} (and you can put any Ruby code you like inside that
@code{#@{@}}).
@item
Shell command expansion uses @code{`backticks`}.
@item
You’ve got embedded doc tools (Ruby’s is called @command{rdoc}).
@cindex @command{rdoc}
@cindex doc tools
@end itemize

@subheading Differences From Perl

@itemize
@item
You don’t have the context-dependent rules like with Perl.
@item
A variable isn't the same as the object to which it refers.  Instead, it's
always just a reference to an object.
@item
Although @code{$} and @code{@@} are used as the first character in variable
names sometimes, rather than indicating type, they indicate scope (@code{$}
for globals, @code{@@} for object instance, and @code{@@@@} for class
attributes).
@cindex sygils in Ruby
@item
Array literals go in brackets instead of parentheses.
@item
Composing lists of other lists does not flatten them into one big
list.  Instead you get an array of arrays.
@item
It's @code{def} instead of @code{sub}.
@item
There's no semicolons needed at the end of each line.  Incidentally, you end
things like function definitions, class definitions, and case statements with
the @code{end} keyword.
@item
Objects are strongly typed.  You’ll be manually calling @code{foo.to_i},
@code{foo.to_s}, etc., if you need to convert between types.
@item
There’s no @code{eq}, @code{ne}, @code{lt}, @code{gt}, @code{ge}, nor
@code{le}.
@item
There’s no diamond operator (@code{<>}).  You usually use
@code{IO.some_method} instead.
@item
The fat comma @code{=>} is only used for hash literals.
@item
There’s no @code{undef}.  In Ruby you have @code{nil}.  @code{nil} is an
object (like anything else in Ruby).  It's not the same as an undefined
variable.  It evaluates to @code{false} if you treat it like a boolean.
@item
When tested for truth, only @code{false} and @code{nil} evaluate to a
@code{false} value.  Everything else is @code{true} (including @code{0},
@code{0.0}, and @code{"0"}).
@end itemize

@c _____________________________________

@node To Ruby From PHP
@subsubsection To Ruby From PHP

PHP is in widespread use for web applications, but if you want to use Ruby on
Rails or just want a language that’s more tailored for general use, Ruby is
worth a look.

@subheading Similarities with PHP

@itemize
@item
Ruby is dynamically typed, like in PHP, so you don’t need to worry about
having to declare variables.
@item
There are classes, and you can control access to them like in PHP 5 (public,
protected and private).
@item
Some variables start with @code{$}, like in PHP (but not all).
@item
There's @code{eval}, too.
@item
You can use string interpolation.  Instead of doing @samp{"$foo is a $bar"},
you can do @samp{"#@{foo@} is a #@{bar@}"} --- like in PHP, this doesn’t apply
for single-quoted strings.
@item
There’s heredocs.
@item
Ruby has exceptions, like PHP 5.
@item
There’s a fairly large standard library.
@item
Arrays and hashes work like expected, if you exchange @code{array()} for
@code{@{} and @code{@}}: @code{array('a' => 'b')} becomes @code{@{'a' =>
'b'@}}.
@item
@code{true} and @code{false} behave like in PHP, but @code{null} is called
@code{nil}.
@end itemize

@subheading Differences From PHP

@itemize
@item
There’s strong typing.  You’ll need to call @code{to_s}, @code{to_i} etc. to
convert between strings, integers and so on, instead of relying on the
language to do it.
@item
Strings, numbers, arrays, hashes, etc. are objects.  Instead of calling
@code{abs(-1)} it’s @code{-1.abs}.
@item
Parentheses are optional in method calls, except to clarify which parameters
go to which method calls.
@item
The standard library and extensions are organized in modules and classes.
@item
Reflection is an inherent capability of objects; you don’t need to use
@file{Reflection} classes like in PHP 5.
@item
Variables are references.
@item
There’s no @file{abstract} classes or @file{interfaces}.
@item
Hashes and arrays are not interchangeable.
@item
Only @code{false} and @code{nil} are false: @code{0}, @code{array()} and
@code{""} are all true in conditionals.
@item
Almost everything is a method call, even @code{raise} (@code{throw} in PHP).
@end itemize

@c _____________________________________

@node To Ruby From Python
@subsubsection To Ruby From Python

Python is another very nice general purpose programming language.  Going from
Python to Ruby, you'll find that there's a little bit more syntax to learn
than with Python.

@subheading Similarities With Python

@itemize
@item
There’s an interactive prompt (called @command{irb}).
@cindex @command{irb}
@item
You can read docs on the command line (with the @command{ri} command instead
of @command{pydoc}).
@item
There are no special line terminators (except the usual newline).
@item
String literals can span multiple lines like Python's triple-quoted strings.
@item
Brackets are for lists, and braces are for dicts (which, in Ruby, are called
``hashes'').
@item
Arrays work the same (adding them makes one long array, but composing them
like this @samp{a3 = [ a1, a2 ]} gives you an array of arrays).
@item
Objects are strongly and dynamically typed.
@item
Everything is an object, and variables are just references to objects.
@item
Although the keywords are a bit different, exceptions work about the same.
@item
You’ve got embedded doc tools (Ruby’s is called @command{rdoc}).
@cindex @command{rdoc}
@cindex doc tools
@item
There is good support for functional programming with first-class functions,
anonymous functions, and closures.
@end itemize

@subheading Differences From Python

@itemize
@item
Strings are mutable.
@item
You can make constants (variables whose value you don’t intend to change).
@item
There are some enforced case-conventions (ex. class names start with a
capital letter, variables start with a lowercase letter).
@item
There's only one kind of list container (an @file{Array}), and it's mutable.
@item
Double-quoted strings allow escape sequences (like @code{\t}) and a special
``expression substitution'' syntax (which allows you to insert the results of
Ruby expressions directly into other strings without having to @samp{"add " +
"strings " + "together"}).  Single-quoted strings are like Python's @code{r"raw
strings"}.
@item
There are no ``new style'' and ``old style'' classes.  Just one kind.  (Python 3+
doesn’t have this issue, but it isn’t fully backward compatible with Python
2.)
@item
You never directly access attributes.  With Ruby, it’s all method calls.
@item
Parentheses for method calls are usually optional.
@item
There's @code{public}, @code{private}, and @code{protected} to enforce
access, instead of Python's @code{_voluntary_} underscore
@code{__convention__}.
@item
``mixins'' are used instead of multiple inheritance.
@item
You can add or modify the methods of built-in classes.  Both languages let you
open up and modify classes at any point, but Python prevents modification of
built-ins --- Ruby does not.
@item
You’ve got @code{true} and @code{false} instead of @code{True} and
@code{False} (and @code{nil} instead of @code{None}).
@item
When tested for truth, only @code{false} and @code{nil} evaluate to a
@code{false} value.  Everything else is @code{true} (including @code{0},
@code{0.0}, @code{""}, and @code{[]}).
@item
It's @code{elsif} instead of @code{elif}.
@item
It's @code{require} instead of @code{import}.  Otherwise though, usage is the
same.
@item
The usual-style comments on the line(s) above things (instead of docstrings
below them) are used for generating docs.
@item
There are a number of shortcuts that, although give you more to remember, you
quickly learn.  They tend to make Ruby fun and very productive.
@item
There’s no way to unset a variable once set (like Python's @code{del}
statement).  You can reset a variable to @code{nil}, allowing the old
contents to be garbage collected, but the variable will remain in the symbol
table as long as it is in scope.
@item
The @code{yield} keyword behaves differently.  In Python it will return
execution to the scope outside the function's invocation.  External code is
responsible for resuming the function.  In Ruby @code{yield} will execute
another function that has been passed as the final argument, then immediately
resume.
@item
Python supports just one kind of anonymous functions, lambdas, while Ruby
contains blocks, Procs, and lambdas.
@end itemize


@c .....................................

@node Important Language Features
@subsection Important Language Features

Here are some pointers and hints on major Ruby features you'll see while
learning Ruby.

@c _____________________________________

@node Pointers on Iteration
@subsubsection Pointers on Iteration
@cindex iteration

Two Ruby features that are a bit unlike what you may have seen before, and
which take some getting used to, are ``blocks'' and iterators.  Instead of
looping over an index (like with C, C++, or pre-1.5 Java), or looping over a
list (like Perl's @code{for (@@a) @{@dots{}@}}, or Python's @code{for i in aList:
@dots{}}), with Ruby you'll very often instead see:

@example
some_list.each do |this_item|
  # We're inside the block.
  # deal with this_item.
end
@end example

For more info on @code{each} and its friends
@cindex @code{each}
@cindex @code{collect}
@cindex @code{find}
@cindex @code{inject}
@cindex @code{sort}

@itemize
@item
@code{collect},
@item
@code{find},
@item
@code{inject},
@item
@code{sort},
@end itemize

etc., see @command{ri Enumerable} (and then @command{ri
Enumerable#some_method}).
@cindex @command{ri}

@c _____________________________________

@node Everything has a value
@subsubsection Everything has a value
@cindex value, everthing has one

There’s no difference between an expression and a statement.  Everything has a
value, even if that value is @code{nil}.  This is possible:

@example
x = 10
y = 11
z = if x < y
      true
    else
      false
    end
z # => true
@end example

@c _____________________________________

@node Symbols are not lightweight Strings
@subsubsection Symbols are not lightweight Strings
@cindex symbols

Many Ruby newbies struggle with understanding what Symbols are, and what they
can be used for.

@dfn{Symbols} can best be described as identities.  A symbol is all about who it is,
not what it is.  Fire up @command{irb} and see the difference:

@example
irb(main):001:0> :george.object_id == :george.object_id
=> true
irb(main):002:0> "george".object_id == "george".object_id
=> false
irb(main):003:0>
@end example

The @code{object_id} methods returns the identity of an Object.  If two
objects have the same @code{object_id}, they are the same (point to the same
Object in memory).
@cindex @code{object_id} methods

As you can see, once you have used a Symbol once, any Symbol with the same
characters references the same Object in memory.  For any given two Symbols
that represent the same characters, the @code{object_id}s match.
@cindex Symbol

Now take a look at the String (@code{“george”}).  The @code{object_id}s don't
match.  That means they're referencing two different objects in memory.
Whenever you use a new String, Ruby allocates memory for it.

If you're in doubt whether to use a Symbol or a String, consider what’s more
important: the identity of an object (i.e. a Hash key), or the contents (in
the example above, @code{“george”}).
@cindex Symbol or String
@cindex String or Symbol

@c _____________________________________

@node Everything is an Object
@subsubsection Everything is an Object

@example
``Everything is an object'' isn't just hyperbole.  Even classes and integers are
objects, and you can do the same things with them as with any other object:

# This is the same as
# class MyClass
#   attr_accessor :instance_var
# end
MyClass = Class.new do
  attr_accessor :instance_var
end
@end example

@c _____________________________________

@node Variable Constants
@subsubsection Variable Constants

Constants are not really constant.  If you modify an already initialized
constant, it will trigger a warning, but not halt your program.  That isn't to
say you should redefine constants, though.

@c _____________________________________

@node Naming conventions
@subsubsection Naming conventions
@cindex conventions, naming

Ruby enforces some naming conventions.  If an identifier starts with a
capital letter, it is a constant.  If it starts with a dollar sign
(@code{$}), it is a global variable.  If it starts with @code{@@}, it is an
instance variable. If it starts with @code{@@@@}, it is a class variable.
@cindex constant naming convention
@cindex global variable @code{$}
@cindex varible, global @code{$}
@cindex instance variable @code{@@}
@cindex variable, instance @code{@@}
@cindex class variable @code{@@@@}
@cindex variable, class @code{@@@@}

Method names, however, are allowed to start with capital letters.  This can
lead to confusion, as the example below shows:

@example
Constant = 10
def Constant
  11
end
@end example

Now @code{Constant} is 10, but @code{Constant()} is 11.

@c _____________________________________

@node Keyword arguments
@subsubsection Keyword arguments

Like in Python, since Ruby 2.0 methods can be defined using keyword
arguments:

@example
def deliver(from: "A", to: nil, via: "mail")
  "Sending from #@{from@} to #@{to@} via #@{via@}."
end

deliver(to: "B")
# => "Sending from A to B via mail."
deliver(via: "Pony Express", from: "B", to: "A")
# => "Sending from B to A via Pony Express."
@end example

@c _____________________________________

@node The universal truth
@subsubsection The universal truth

In Ruby, everything except @code{nil} and @code{false} is considered true.
In C, Python and many other languages, @code{0} and possibly other values,
such as empty lists, are considered false.  Take a look at the following
Python code (the example applies to other languages, too):

@example
# in Python
if 0:
  print("0 is true")
else:
  print("0 is false")
@end example

This will print @samp{“0 is false”}.  The equivalent Ruby:

@example
# in Ruby
if 0
  puts "0 is true"
else
  puts "0 is false"
end
@end example

Prints @samp{“0 is true”}.

@c _____________________________________

@node Access modifiers are Methods
@subsubsection Access modifiers are Methods
@cindex access modifiers @code{public}, @code{private}, @code{protected}
@cindex access modifier scope
@cindex scope, access modifiers

Access modifiers apply until the end of scope.

In the following Ruby code,

@example
class MyClass
  private
  def a_method; true; end
  def another_method; false; end
end
@end example

You might expect @code{another_method} to be public.  Not so.  The
@code{private} access modifier continues until the end of the scope, or until
another access modifier pops up, whichever comes first.  By default, methods
are public:

@example
class MyClass
  # Now a_method is public
  def a_method; true; end

  private

  # another_method is private
  def another_method; false; end
end
@end example

@itemize
@item
@code{public}, 
@item
@code{private} and
@item
@code{protected}
@end itemize

are really methods, so they can take parameters.  If you pass a Symbol to one
of them, that method’s visibility is altered.

@c _____________________________________

@node Method access
@subsubsection Method access

In Java, @code{public} means a method is accessible by
anyone. @code{protected} means the class's instances, instances of descendant
classes, and instances of classes in the same package can access it, but not
anyone else; and @code{private} means nobody besides the class's instances
can access the method.

Ruby differs slightly.  @code{public} is, naturally, public.  @code{private}
means the method(s) are accessible only when they can be called without an
explicit receiver.  Only @code{self} is allowed to be the receiver of a
private method call.

@code{protected} is the one to be on the lookout for.  A @code{protected}
method can be called from a class or descendant class instances, but also
with another instance as its receiver.  Here is an example (adapted from The
Ruby Language FAQ):

@example
class Test
  # public by default
  def identifier
    99
  end

  def ==(other)
    identifier == other.identifier
  end
end

t1 = Test.new  # => #<Test:0x34ab50>
t2 = Test.new  # => #<Test:0x342784>
t1 == t2       # => true

# now make `identifier' protected; it still works
# because protected allows `other' as receiver

class Test
  protected :identifier
end

t1 == t2  # => true

# now make `identifier' private

class Test
  private :identifier
end

t1 == t2
# NoMethodError: private method `identifier' called for #<Test:0x342784>
@end example

@c _____________________________________

@node Classes are open
@subsubsection Classes are open
@cindex classes, open

Ruby classes are open.  You can open them up, add to them, and change them at
any time.  Even core classes, like @file{Fixnum} or even @file{Object}, the
parent of all objects.  Ruby on Rails defines a bunch of methods for dealing
with time on @file{Fixnum}.  Watch:

@example
class Fixnum
  def hours
    self * 3600 # number of seconds in an hour
  end
  alias hour hours
end

# 14 hours from 00:00 January 1st
# (aka when you finally wake up ;)
Time.mktime(2006, 01, 01) + 14.hours # => Sun Jan 01 14:00:00
@end example

@c _____________________________________

@node Funny method names
@subsubsection Funny method names

In Ruby, methods are allowed to end with question marks or exclamation marks.
By convention, methods that answer questions end in question marks
(e.g. @code{Array#empty?}, which returns @code{true} if the receiver is
empty).  Potentially ``dangerous'' methods by convention end with exclamation
marks (e.g. methods that modify @code{self} or the arguments, @code{exit!},
etc.).  Not all methods that change their arguments end with exclamation
marks, though.  @code{Array#replace} replaces the contents of an array with the
contents of another array.  It doesn’t make much sense to have a method like
that that doesn't modify self.

@c _____________________________________

@node Singleton methods
@subsubsection Singleton methods
@cindex singleton methods

@dfn{Singleton methods} are per-object methods.  They are only available on the
Object you defined it on.

@example
class Car
  def inspect
    "Cheap car"
  end
end

porsche = Car.new
porsche.inspect # => Cheap car
def porsche.inspect
  "Expensive car"
end

porsche.inspect # => Expensive car

# Other objects are not affected
other_car = Car.new
other_car.inspect # => Cheap car
@end example

@c _____________________________________

@node Missing methods
@subsubsection Missing methods
@cindex @code{method_missing} method

Ruby doesn't give up if it can't find a method that responds to a particular
message.  It calls the @code{method_missing} method with the name of the
method it couldn't find and the arguments.  By default, @code{method_missing}
raises a @file{NameError} exception, but you can redefine it to better fit
your application, and many libraries do.  Here is an example:

@example
# id is the name of the method called, the * syntax collects
# all the arguments in an array named 'arguments'
def method_missing(id, *arguments)
  puts "Method #@{id@} was called, but not found. It has " +
       "these arguments: #@{arguments.join(", ")@}"
end

__ :a, :b, 10
# => Method __ was called, but not found. It has these
# arguments: a, b, 10
@end example

The code above just prints the details of the call, but you are free to
handle the message in any way that is appropriate.

@c _____________________________________

@node Message passing --- not function calls
@subsubsection Message passing, not function calls

A method call is really a ``message'' to another object:

@example
# This
1 + 2
# Is the same as this ...
1.+(2)
# Which is the same as this:
1.send "+", 2
@end example

@c _____________________________________

@node Blocks are Objects
@subsubsection Blocks are Objects
@cindex blocks
@cindex @code{yield}
@cindex @code{Proc}

Blocks (closures, really) are heavily used by the standard library.  To call
a block, you can either use @code{yield}, or make it a @code{Proc} by
appending a special argument to the argument list, like so:

@example
def block(&the_block)
  # Inside here, the_block is the block passed to the method
  the_block # return the block
end
adder = block @{ |a, b| a + b @}
# adder is now a Proc object
adder.class # => Proc
@end example

You can create blocks outside of method calls, too, by calling
@code{Proc.new} with a block or calling the @code{lambda} method.
@cindex @code{lambda} method

Similarly, methods are also Objects in the making:

@example
method(:puts).call "puts is an object!"
# => puts is an object!
@end example

@c _____________________________________

@node Operators are syntactic sugar
@subsubsection Operators are syntactic sugar

Most operators in Ruby are just syntactic sugar (with some precedence rules)
for method calls.  You can, for example, override @file{Fixnum}’s @code{+}
method:

@example
class Fixnum
  # You can, but please don't do this
  def +(other)
    self - other
  end
end
@end example

You don’t need C++'s @code{operator+}, etc.

You can even have array-style access if you define the @code{[]} and
@code{[]=} methods.  To define the unary @code{+} and @code{-} (think
@samp{+1} and @samp{-2}), you must define the @code{+@@} and @code{-@@}
methods, respectively.  The operators below are not syntactic sugar,
though.  They are not methods, and cannot be redefined:

@example
=, .., ..., not, &&, and, ||, or, ::
@end example

In addition, @samp{+=, *=} etc. are just abbreviations for @samp{var = var +
other_var}, @samp{var = var * other_var}, etc. and therefore cannot be
redefined.


@c .....................................

@node Learning Ruby
@subsection Learning Ruby

@url{http://rubylearning.com/, Learning Ruby}

A thorough collection of Ruby study notes for those who are new to the language
and in search of a solid introduction to Ruby’s concepts and constructs.


@c .....................................

@node Ruby Essentials
@subsection Ruby Essentials

@url{http://www.techotopia.com/index.php/Ruby_Essentials, Ruby Essentials}


@c .....................................

@node Learn to Program
@subsection Learn to Program

@url{http://pine.fm/LearnToProgram/, Learn to Program}

A wonderful little tutorial by Chris Pine for programming newbies.  If you don’t
know how to program, start here.


@c .....................................

@url{http://ruby.learncodethehardway.org/, Learn Ruby the Hard Way}








@c -----------------------------------------------------------------------------

@node Manuals
@section Manuals



@c .....................................

@node Ruby User's Guide
@subsection Ruby User's Guide

Translated from the original Japanese version written by Yukihiro Matsumoto
(the creator of Ruby), this version, by Goto Kentaro and Mark Slagell, is a
nice overview of many aspects of the Ruby language.

@url{http://www.rubyist.net/~slagell/ruby/, Ruby User's Guide}

@c _____________________________________

@node What Is Ruby?
@subsubsection What Is Ruby?

Ruby is ``an interpreted scripting language for quick and easy object-oriented
programming'' --- what does this mean?
@cindex Ruby, what it is

@table @i

@item interpreted scripting language:
@itemize
@item
ability to make operating system calls directly
@item
powerful string operations and regular expressions
@item
immediate feedback during development
@end itemize

@item quick and easy:
@itemize
@item
variable declarations are unnecessary
@item
variables are not typed
@item
syntax is simple and consistent
@item
memory management is automatic
@end itemize

@item object oriented programming:
@itemize
@item
everything is an object
@item
classes, methods, inheritance, etc.
@item
singleton methods
@item
``mixin'' functionality by module
@item
iterators and closures
@end itemize

@item also:
@itemize
@item
multiple precision integers
@item
convenient exception processing
@item
dynamic loading
@item
threading support
@end itemize

@end table

@c _____________________________________

@node Simple Examples
@subsubsection Simple Examples

@subheading Factorial in Ruby
@cindex factorial in Ruby
@pindex fact.rb

Let's write a function to compute factorials.  The mathematical definition of
@dfn{n factorial} is:

@display
n! = 1                (when n==0)
   = n * (n-1)!       (otherwise)
@end display

In ruby, this can be written as:

@(fact.rb@)=
# Program to find the factorial of a number
# Save this as fact.rb

def fact(n)
  if n == 0
    1
  else
    n * fact(n-1)
  end
end

puts fact(ARGV[0].to_i)

@

@subsubheading Command Line Arguments ---  In Array @var{ARGV}
@cindex command line arguments in @code{ARGV}
@cindex @code{to_i} method

@code{ARGV} is an array which contains the command line arguments, and
@code{to_i} converts a character string to an integer.@footnote{Ruby
does not convert strings into integers automatically like perl does.}

@subsubheading The @code{end} Statement

You may notice the repeated occurrence of @code{end}.  Ruby has been called
``Algol-like'' because of this.  (Actually, the syntax of ruby more closely
mimics that of a language named @url{https://www.eiffel.org/,Eiffel}.)

@subsubheading Takeaway --- @code{return} Statement Optional

You may also notice the lack of a @code{return} statement.

@quotation
[A @code{return} statement] is unneeded because @strong{a ruby function
returns the last thing that was evaluated in it}.  Use of a @code{return}
statement here is permissible but unnecessary.
@end quotation
@cindex Algol and Ruby
@cindex Eiffel and Ruby
@cindex @code{return} statement unnecessary

@subsubheading Running @file{fact.rb}

Ruby can deal with any integer which is allowed by your machine's memory.  So
400! can be calculated:

@example
% ruby fact.rb 1
1
% ruby fact.rb 5
120

% ruby fact.rb 40
815915283247897734345611269596115894272000000000

% ruby fact.rb 400
64034522846623895262347970319503005850702583026002959458684
44594280239716918683143627847864746326467629435057503585681
08482981628835174352289619886468029979373416541508381624264
61942352307046244325015114448670890662773914918117331955996
44070954967134529047702032243491121079759328079510154537266
72516278778900093497637657103263503315339653498683868313393
52024373788157786791506311858702618270169819740062983025308
59129834616227230455833952075961150530223608681043329725519
48526744322324386699484224042325998055516106359423769613992 
31917134063858996537970147827206606320217379472010321356624 
61380907794230459736069956759583609615871512991382228657857 
95493616176544804532220078258184008484364155912294542753848 
03558374518022675900061399560145595206127211192918105032491 
00800000000000000000000000000000000000000000000000000000000 
0000000000000000000000000000000000000000000
@end example

@subheading The Input/Evaluation Loop

When you invoke ruby with no arguments, it reads commands from standard input
and executes them after the end of input:

@example
% ruby
puts "hello world"
puts "good-bye world"
^D
hello world
good-bye world
@end example

@subsubheading Ruby Evaluation Program --- @file{eval.rb}
@cindex @file{eval.rb}

Ruby also comes with a program called @file{eval.rb} (@pxref{eval.rb})
that allows you to enter ruby code from the keyboard in an interactive
loop, showing you the results as you go.  It will be used extensively
through the rest of this guide.  You should use this enhanced
@url{http://www.rubyist.net/~slagell/ruby/eval.txt, @file{eval.rb}}
that adds visual indenting assistance, warning reports, and color
highlighting.

Here is a short @file{eval.rb} session:

@example
% ruby eval.rb
ruby> puts "Hello, world."
Hello, world.
   nil
ruby> exit
@end example

@samp{hello world} is produced by @code{puts}.  The next line, in this case
@code{nil}, reports on whatever was last evaluated;

@subsubheading No Distinction Between Statement and Expression
@cindex statement vs expression
@cindex expression vs statement

@quotation
Ruby does not distinguish between statements and expressions, so evaluating a
piece of code basically means the same thing as executing it.
@end quotation

Here, @code{nil} indicates that @code{puts} does not return a meaningful
value.  Note that we can leave this interpreter loop by saying
@command{exit}, although @key{C-D} still works too.

@c _____________________________________

@node Ruby User's Guide on Strings
@subsubsection On Strings
@cindex Strings

@subheading Quoting Strings
@cindex strings, quoting syntax and semantics

A string may be double-quoted (@samp{"..."}) or single-quoted (@samp{'...'}).

Double- and single-quoting have different effects in some cases.  A
double-quoted string allows character escapes by a leading backslash, and the
evaluation of embedded expressions using @code{#@{@}}.  A single-quoted string
does not do this interpreting; what you see is what you get.

@subheading String Methods
@cindex string @code{+} and @code{*}

You can concatenate strings with @code{+}, and repeat a string many times with
@code{*}.

Here are some things you can do with strings.

@table @i
@item Concatenation
@samp{word = "fo" + "o"} @result{} @samp{"foo"}
@item Repetition
@samp{word = word * 2} @result{} @samp{"foofoo"}
@item Extracting characters
(note that characters are integers in ruby)@*
@samp{word[0]} @result{} @samp{102} @samp{# 102 is ASCII code of `f'}@*
@samp{word[-1]} @result{} @samp{111} @samp{# 111 is ASCII code of `o'}
@item Extracting substrings
@example
ruby> herb = "parsley"
   "parsley"
ruby> herb[0,1]
   "p"
ruby> herb[-2,2]
   "ey"
ruby> herb[0..3]
   "pars"
ruby> herb[-5..-2]
   "rsle"
@end example
@item Testing for equality:
@samp{"foo" == "foo"} @result{} @samp{true}@*
@samp{"foo" == "bar"} @result{} @samp{false}
@end table

@c _____________________________________

@node Puzzle Program
@subsubsection Puzzle Program
@pindex guess.rb

@(guess.rb@)=
# save this as guess.rb
words = ['foobar', 'baz', 'quux']
secret = words[rand(3)]

print "guess? "
while guess = STDIN.gets
  guess.chop!
  if guess == secret
    puts "You win!"
    break
  else
    puts "Sorry, you lose."
  end
  print "guess? "
end
puts "The word was ", secret, "."
@

@subheading New Control Structure @code{while}
@cindex @code{while}

In this program, a new control structure, @code{while}, is used.  The
code between @code{while} and its corresponding @code{end} will
execute repeatedly as long as some specified condition remains true.
In this case, @samp{guess=STDIN.gets} is both an active statement
(collecting a line of user input and storing it as guess), and a
condition (if there is no input, guess, which repesents the value of
the whole @samp{guess=STDIN.gets} expression, has a @code{nil} value,
causing while to stop looping).

@subheading Standard Input Object --- @var{STDIN}
@cindex standard input object @var{stdin}
@cindex @var{stdin}
@cindex @var{stdin}.@code{gets}
@cindex read one line from standard input

@var{STDIN} is the standard input object.  Usually, @samp{guess=gets}
does the same thing as @samp{guess=STDIN.gets}.  In line 5 we read one
line from standard input by the method @var{STDIN}.@code{gets}.  If
@var{EOF} (end of file) occurs while getting the line, @code{gets}
returns @code{nil}.  So the code associated with this @code{while} will
repeat until it sees @key{^D} signifying the end of input.

@subheading @code{guess.chop!}
@cindex @code{guess.chop!}

@code{guess.chop!} in line 6 deletes the last character from
@code{guess}; in this case it will always be a @code{newline}
character, @code{gets} includes that character to reflect the user's
@key{return} keystroke, but we're not interested in it.

@subheading Printing Variables
@cindex @code{puts}

In line 15 we print the secret word.  We have written this as a
@code{puts} (@code{put s}tring) statement with two arguments, which
are printed one after the other; but it would have been equally
effective to do it with a single argument, writing secret as
@code{#@{secret@}} to make it clear that it is a variable to be
evaluated, not a literal word to be printed:

@example
puts "the word is #@{secret@}."
@end example

It builds a single string and presents it as a single argument to
@code{puts}.

@subheading @code{print} vs @code{puts}

Also, we are by now used to the idea of using @code{puts} for standard
script output, but this script uses @code{print} instead, in lines 4
and 13.  They are not quite the same thing.  @code{print} outputs
exactly what it is given; @code{puts} also ensures that the output
line ends.  Using @code{print} in lines 4 and 13 leaves the cursor
next to what was just printed, rather than moving it to the beginning
of the next line.  This creates a recognizable prompt for user
input.  In general, the four output calls below are equivalent:

@subheading Flushing Standard Output
@cindex flush standard output
@cindex buffering

Sometimes a text window is programmed to @emph{buffer} output for the
sake of speed, collecting individual characters and displaying them
only when it is given a @key{newline} character.  So if the guessing
game script misbehaves by not showing the prompt lines until after the
user supplies a guess, @emph{buffering} is the likely culprit.  To
make sure this doesn't happen, you can ``flush'' the output as soon as
you have printed the prompt.  It tells the standard output device (an
object named @var{STDOUT}), ``don't wait; display what you have in your
buffer right now.''  @samp{04 print "guess? "; STDOUT.flush}.  


@c _____________________________________

@node Ruby User's Guide on Regular Expressions
@subsubsection Regular Expressions
@cindex regular expressions

@example
ruby> def chab(s)   # "contains hex in angle brackets"
    |    (s =~ /<0(x|X)(\d|[a-f]|[A-F])+>/) != nil
    | end
  nil
ruby> chab "Not this one."
  false
ruby> chab "Maybe this? @{0x35@}"    # wrong kind of brackets
  false
ruby> chab "Or this? <0x38z7e>"    # bogus hex digit
  false
ruby> chab "Okay, this: <0xfc0004>."
  true
@end example

@subheading Program To Help Experiment With Regular Expressions

Here is a little program to help you experiment with regular
expressions.  Store it as @file{regx.rb} and run it by typing @kbd{ruby
regx.rb} at the command line.

The program requires input twice, once for a string and once for a
regular expression.  The string is tested against the regular
expression, then displayed with all the matching parts highlighted in
reverse video.

@pindex @file{regx.rb}
@(regx.rb@)=
# Requires an ANSI terminal!

st = "\033[7m"
en = "\033[m"

puts "Enter an empty string at any time to exit."

while true
  print "str> "; STDOUT.flush; str = gets.chop
  break if str.empty?
  print "pat> "; STDOUT.flush; pat = gets.chop
  break if pat.empty?
  re = Regexp.new(pat)
  puts str.gsub(re,"#{st}\\&#{en}")
end
@

@subheading Explication of @file{regx.rb}

@subsubheading The @code{break} Statement
@cindex @code{break} statement

In line 6, the condition for @code{while} is hardwired to @code{true},
so it forms what looks like an infinite loop.  However we put @code{break}
statements in the 8th and 10th lines to escape the loop.

@subsubheading @code{if} Modifiers
@cindex @code{if} modifier

@example
break if str.empty?
break if pat.empty?
@end example

These two @code{break}s are also an example of @dfn{if modifiers}.  An
@code{if} modifier executes the statement on its left hand side if and
only if the specified condition is satisfied.  This construction is
unusual in that it operates logically from right to left, but it is
provided because for many people it mimics a similar pattern in
natural speech.  It also has the advantage of brevity, as it needs no
@code{end} statement to tell the interpreter how much of the following
code is supposed to be conditional.  An @code{if} modifier is
conventionally used in situations where a statement and condition are
short enough to fit comfortably together on one script line.

Note the difference in the user interface compared to the
string-guessing script.  This one lets the user quit by hitting the
@key{Return} key on an empty line.  We are testing for emptiness of the
input string, not for its nonexistence.

@subsubheading Nondestructive @code{chops} vs Destructive @code{chops!}
@cindex @code{chop}
@cindex @code{chop!}
@cindex destructive method vs nondestructive method

In lines 7 and 9 we have a @dfn{non-destructive} @code{chop}; again,
we're getting rid of the unwanted newline character we always get from
@code{gets}.  Add the exclamation point, and we have a
@dfn{destructive} chop.  What's the difference? In ruby, we
conventionally attach @kbd{!} or @kbd{?} to the end of certain method
names.  The exclamation point (@kbd{!}, sometimes pronounced aloud as
``bang!'') indicates something potentially destructive, that is to
say, something that can change the value of what it touches.
@code{chop!} affects a string directly, but @code{chop} gives you a
chopped copy without damaging the original.

@subsubheading @code{chomp} And @code{chomp!}

You'll also sometimes see @code{chomp} and @code{chomp}! used.  These
are more selective: the end of a string gets bit off only if it
happens to be a newline.  So for example, @code{"XYZ".chomp!} does
nothing.  If you need a trick to remember the difference, think of a
person or animal tasting something before deciding to take a bite, as
opposed to an axe chopping indiscriminately.

@subsubheading Predicate Method Naming Convention
@cindex predicate method
@cindex predicate method naming convention

The other method naming convention appears in lines 8 and 10.  A
question mark (@kbd{?}, sometimes pronounced aloud as ``huh?'')
indicates a @dfn{predicate} method, one that can return either true or
false.

@subsubheading Regular Expressions At Work
@cindex regular expressions at work
@cindex @code{gsub} method

Line 11 creates a regular expression object out of the string supplied
by the user.  The real work is finally done in line 12, which uses
@code{gsub} to globally substitute each match of that expression with
itself, but surrounded by ansi markups; also the same line outputs the
results.

In line 12 we see @code{\\&}.  This is a little tricky.  Since the
replacement string is in double quotes, the pair of backslashes will
be interpreted as a single backslash; what @code{gsub} actually sees
will be @code{\&}, and that happens to be a special code that refers
to whatever matched the pattern in the first place.  So the new string,
when displayed, looks just like the old one, except that the parts
that matched the given pattern are highlighted in inverse video.

@subheading The @code{=~} Matching Operator
@cindex @code{=~} matching operator
@cindex matching operator

@code{=~} is a matching operator with respect to regular expressions;
it returns the position in a string where a match was found, or
@code{nil} if the pattern did not match.

@example
ruby> "abcdef" =~ /d/
   3
ruby> "aaaaaa" =~ /d/
   nil
@end example

@c _____________________________________

@node Ruby User's Guide On Arrays And Hashes
@subsubsection On Arrays And Hashes
@cindex arrays

@subheading Creating An Array
@cindex array, creating

You can create an array by listing some items within square brackets
(@code{[]}) and separating them with commas.  Ruby's arrays can accomodate
diverse object types.  @samp{ary = [1, 2, "3"]} @result{} @samp{[1, 2, "3"]}

@subheading Concatenating and Repeating Arrays
@cindex arrays, concatenating
@cindex arrays, repeating

Arrays can be concatenated or repeated just as strings can.  @samp{ary
+ ["foo", "bar"]} @result{} @samp{[1, 2, "3", "foo", "bar"]};
@samp{ary * 2} @result{} @samp{[1, 2, "3", 1, 2, "3"]}.

@subheading Referring To Elements of Arrays
@cindex array, referring to elements

We can use index numbers to refer to any part of a array.
@samp{ary[0]} @result{} @samp{1}; @samp{ary[0,2]} @result{} @samp{[1, 2]};
@samp{ary[0..1]} @result{} @samp{[1, 2]}.

@subheading Converted To And From Strings
@cindex array, converting to and from string
@cindex @code{join}
@cindex @code{split}

Arrays can be converted to and from strings, using @code{join} and
@code{split} respecitvely.  @samp{str = ary.join(":")} @result{} @samp{"1:2:3"}.
@samp{str.split(":")} @result{} @samp{["1", "2", "3"]}.

@subheading Hashes
@cindex hash
@cindex dictionary
@cindex associative array
@cindex key, for hash

An @dfn{associative array} has elements that are accessed not by
sequential index numbers, but by keys which can have any sort of
value.  Such an array is sometimes called a @dfn{hash} or
@dfn{dictionary}; in the ruby world, we prefer the term hash.  A hash
can be constructed by quoting pairs of items within curly braces
(@code{@{@}}).  You use a key to find something in a hash, much as you
use an index to find something in an array.

@example
ruby> h = @{1 => 2, "2" => "4"@}
   @{1=>2, "2"=>"4"@}
ruby> h[1]
   2
ruby> h["2"]
   "4"
ruby> h[5]
   nil
ruby> h[5] = 10    # appending an entry
   10
ruby> h
   @{5=>10, 1=>2, "2"=>"4"@}
ruby> h.delete 1   # deleting an entry by key
   2
ruby> h[1]
   nil
ruby> h
   @{5=>10, "2"=>"4"@}
@end example
   


@c .....................................

@node Programming Ruby
@subsection Programming Ruby

@subheading The Programmatic Programmer's Guide

@url{http://ruby-doc.com/docs/ProgrammingRuby/,Programming Ruby}

@subsubheading What This Book Is

This book is a tutorial and reference for the Ruby programming language.  Use
Ruby, and you'll write better code, be more productive, and enjoy programming
more.

@subsubheading What Ruby Is

Take a true object-oriented language, such as Smalltalk.  Drop the unfamiliar
syntax and move to more conventional, file-based source code.  Now add in a
good measure of the flexibility and convenience of languages such as Python
and Perl.

You end up with Ruby.

@subsubheading Ruby is OO

OO aficionados will find much to like in Ruby:  things such as pure object
orientation (everything's an object), metaclasses, closures, iterators, and
ubiquitous heterogeneous collections.  Smalltalk users will feel right at home
(and C++ and Java users will feel jealous).

@subsubheading Ruby is Perl and Python

At the same time, Perl and Python wizards will find many of their favorite
features:  full regular expression support, tight integration with the
underlying operating system, convenient shortcuts, and dynamic evaluation.

@subsubheading Principle of Lease Surprise

Ruby follows the Principle of Least Surprise --- things work the way you
would expect them to, with very few special cases or exceptions.

@subsubheading Ruby is a ``Transparent'' Language

We call Ruby a ``transparent'' language.  By that we mean that Ruby doesn't
obscure the solutions you write behind lots of syntax and the need to churn
out reams of support code just to get simple things done.  With Ruby you write
programs close to the problem domain.  Rather than constantly mapping your
ideas and designs down to the pedestrian level of most languages, with Ruby
you'll find you can express them directly and express them elegantly.  This
means you code faster.  It also means your programs stay readable and
maintainable.

@subsubheading Ruby is a ``Scripting'' Language

What exactly is a scripting language?  Frankly we don't know if it's a
distinction worth making.  In Ruby, you can access all the underlying
operating system features.  You can do the same stuff in Ruby that you can in
Perl or Python, and you can do it more cleanly.  But Ruby is fundamentally
different.  It is a true programming language, too, with strong theoretical
roots and an elegant, lightweight syntax.  You could hack together a mess of
``scripts'' with Ruby, but you probably won't.  Instead, you'll be more
inclined to engineer a solution, to produce a program that is easy to
understand, simple to maintain, and a piece of cake to extend and reuse in
the future.

@subsubheading Ruby is a General Purpose Programming Language

Although we have used Ruby for scripting jobs, most of the time we use it as
a general-purpose programming language.  We've used it to write GUI
applications and middle-tier server processes, and we're using it to format
large parts of this book.  Others have used it for managing server machines
and databases.  Ruby is serving Web pages, interfacing to databases and
generating dynamic content.  People are writing artificial intelligence and
machine learning programs in Ruby, and at least one person is using it to
investigate natural evolution.  Ruby's finding a home as a vehicle for
exploratory mathematics.  And people all over the world are using it as a way
of gluing together all their different applications.  It truly is a great
language for producing solutions in a wide variety of problem domains.

@subsubheading Should I Use Ruby?

However, Ruby is probably more applicable than you might think.  It is easy to
extend, both from within the language and by linking in third-party
libraries.  It is portable across a number of platforms.  It's relatively
lightweight and consumes only modest system resources.  And it's easy to
learn; we've known people who've put Ruby code into production systems within
a day of picking up drafts of this book.  We've used Ruby to implement parts
of an X11 window manager, a task that's normally considered severe C
coding.  Ruby excelled, and helped us write code in hours that would otherwise
have taken days.


@c -----------------------------------------------------------------------------

@node Reference Documentation
@section Reference Documentation








@c -----------------------------------------------------------------------------

@node Editors and IDEs
@section Editors and IDEs








@c -----------------------------------------------------------------------------

@node Further Reading
@section Further Reading








@c *****************************************************************************
@c APPENDICES
@c *****************************************************************************

@node Utility Programs
@appendix Utility Programs




@c -----------------------------------------------------------------------------

@node eval.rb
@appendixsec @file{eval.rb}
@pindex eval.rb

@url{http://www.rubyist.net/~slagell/ruby/eval.txt, @file{eval.rb}}

@(eval.rb@)=
#!/usr/local/bin/ruby

#######################################################
#
# Ruby interactive input/eval loop
# Written by matz           (matz@netlab.co.jp)
# Modified by Mark Slagell  (slagell@ruby-lang.org)
#    with suggestions for improvement from Dave Thomas
#                           (Dave@Thomases.com)
#
#######################################################
#
# NOTE - this file has been renamed with a .txt extension to
# allow you to view or download it without the rubyist.net
# web server trying to run it as a CGI script.  You will
# probably want to rename it back to eval.rb.
#
#######################################################

module EvalWrapper

  @<eval---EvalWrapper--Constants@>

  @<eval---EvalWrapper--Indentation Deltas@>

  # On exit, restore normal screen colors.
  END {  print Norm,"\n" }

  ##############################################################
  # Execution starts here.
  ##############################################################
 
  indent=0
  while true   # Top of main loop.

    @<eval---Main--Get Line@>
    @<eval---Main--Process Line@>

  end          # Bottom of main loop
  print "\n"

end # module
@


@c .....................................

@node eval Module Code
@appendixsubsec @file{eval.rb} Module Code

@<eval---EvalWrapper--Constants@>=

# Constants for ANSI screen interaction.  Adjust to your liking.

Norm   = "\033[0m"
PCol   = Norm           # Prompt color
Code   = "\033[1;32m"   # yellow 
Eval   = "\033[0;36m"   # cyan 
Prompt = PCol+"ruby> "+Norm
PrMore = PCol+"    | "+Norm
Ispace = "   "          # Adjust length of this for indentation.
Wipe   = "\033[A\033[K" # Move cursor up and erase line
@


@c .....................................

@node eval Indentation Deltas Code
@appendixsubsec @file{eval.rb} Indentation Deltas Code

@<eval---EvalWrapper--Indentation Deltas@>=
# Return a pair of indentation deltas. The first applies before
# the current line is printed, the second after.

def EvalWrapper.indentation( code )
  case code

  when /^\s*(class|module|def|if|case|while|for|begin)\b[^_]/
    [0,1]      # increase indentation because of keyword

  when /^\s*end\b[^_]/
    [-1,0]     # decrease because of end

  when /\{\s*(\|.*\|)?\s*$/
    [0,1]      # increase because of '{'

  when /^\s*\}/
    [-1,0]     # decrease because of '}'

  when /^\s*(rescue|ensure|elsif|else)\b[^_]/
    [-1,1]     # decrease for this line, then come back

  else
    [0,0]      # we see no reason to change anything

  end # case
end # def
@


@c .....................................

@node eval Main Get Line Code
@appendixsubsec @file{eval.rb} Main Get Line Code

@<eval---Main--Get Line@>=
# Print prompt, move cursor to tentative indentation level, and get
# a line of input from the user.

if( indent == 0 )
  expr = ''; print Prompt  # (expecting a fresh expression)

else
  print PrMore             # (appending to previous lines)

end

print Ispace * indent,Code
line = gets
print Norm
@

@c .....................................

@node eval Main Process Line Code
@appendixsubsec @file{eval.rb} Main Process Line Code

@<eval---Main--Process Line@>=
@<eval---Main--Process Line-If Not Line@>

@<eval---Main--Process Line-Is Line@>
@

@c _____________________________________

@node eval If Not Line Code
@appendixsubsubsec @file{eval.rb} If Not Line Code

@<eval---Main--Process Line-If Not Line@>=
if not line
  # end of input (^D) - if there is no expression, exit, else
  # reset cursor to the beginning of this line.

  if expr == '' then break else print "\r" end
@

@c _____________________________________

@node eval If Is Line Code
@appendixsubsubsec @file{eval.rb} If Is Line Code

@<eval---Main--Process Line-Is Line@>=
else

  # Append the input to whatever we had.
  expr << line

  @<eval---Main--Process Line-Is Line_Indentation@>

  @<eval---Main--Process Line-Is Line_Worth Evaluating?@>

end # if not line
@

@c #####################################

@subheading ### Indentation ###

@<eval---Main--Process Line-Is Line_Indentation@>=
# Determine changes in indentation, reposition this line if
# necessary, and adjust indentation for the next prompt.

begin
  ind1,ind2 = indentation( line )
  if( ind1 != 0 )
    indent += ind1
    print Wipe,PrMore,(Ispace*indent),Code,line,Norm
  end
  indent += ind2

rescue      # On error, restart the main loop.
  print Eval,"ERR: Nesting violation\n",Norm
  indent = 0
  redo

end # begin
@

@c #####################################

@subheading ### Something Worth Evaluating? ###

@<eval---Main--Process Line-Is Line_Worth Evaluating?@>=
# Okay, do we have something worth evaulating?

if (indent == 0) && (expr.chop =~ /[^; \t\n\r\f]+/)

  begin
    result = eval(expr, TOPLEVEL_BINDING).inspect
    if $!  # no exception, but $! non-nil, means a warning
      print Eval,$!,Norm,"\n"
      $!=nil
    end
    print Eval,"   ",result,Norm,"\n"

  rescue ScriptError,StandardError
    $! = 'exception raised' if not $!
    print Eval,"ERR: ",$!,Norm,"\n"
  end

  break if not line

end # if
@


@c -----------------------------------------------------------------------------

@node The Makefile
@appendix The Makefile
@pindex Makefile

@(Makefile@)=
@<Makefile---Variable Definitions@>
@<Makefile---Default Rule@>
@<Makefile---TWJR Rules@>
@<Makefile---Clean Rules@>
@

@node Makefile Variable Definitions
@appendixsec Makefile Variable Definitions

@<Makefile---Variable Definitions@>=
FILE := Ruby2_5
SHELL := /bin/bash

@

@node Makefile Default Rule
@appendixsec Default Rule

The @code{default} rule is to create a @acronym{PDF} document and all
@acronym{HTML} files.  This assumes that the @acronym{TEXI} file has been
generated and updated by hand first.  Therefore, the target @code{TWJR} will
run both @command{jrtangle} and @command{jrweave}, while the target
@code{WEAVE} or alternatively @code{TEXI} will run just @command{jrweave} on
the @file{.twjr} file.  Thereafter, you can update the @file{.texi} file and
run the @code{default}.

@<Makefile---Default Rule@>=
.PHONY : default TWJR TANGLE WEAVE TEXI PDF HTML
.PHONY : twjr tangle weave texi pdf html
default : PDF HTML

@

@node Makefile TWJR Rules
@appendixsec TWJR Rules

@<Makefile---TWJR Rules@>=
TWJR : twjr
twjr : tangle weave

TANGLE : tangle
tangle : $(FILE).twjr
	jrtangle $(FILE).twjr

WEAVE : weave
weave : TEXI
TEXI  : texi
texi  : $(FILE).texi

$(FILE).texi : $(FILE).twjr
	jrweave $(FILE).twjr > $(FILE).texi

PDF : pdf
pdf : $(FILE).pdf
$(FILE).pdf : $(FILE).texi
	pdftexi2dvi $(FILE).texi
	make distclean
	
HTML : html
html : $(FILE)/
$(FILE)/ : $(FILE).texi
	makeinfo --html $(FILE).texi

@

@node Makefile Clean Rules
@appendixsec Clean Rules

@<Makefile---Clean Rules@>=
.PHONY : clean distclean veryclean worldclean
clean :
	rm -f *~ \#*\#

distclean : clean
	rm -f *.{aux,log,toc,cp,cps,pg,pgs}

veryclean : clean
	for file in *; do [[ $$file =~ $(FILE)|Makefile ]] && : || rm -vrf $$file ; done;

worldclean : veryclean
	rm -fr $(FILE).{texi,info,pdf} $(FILE)/

@

@node Code Chunk Summaries
@appendix Code Chunk Summaries

This @value{APPENDIX} presents alphabetical lists of all the file definitions,
the code chunk definitions, and the code chunk references.

@node File Definitions
@appendixsec Source File Definitions

@print_file_defs

@node Code Chunk Definitions
@appendixsec Code Chunk Definitions

@print_code_defs

@node Code Chunk References
@appendixsec Code Chunk References

@print_code_refs

@node Bibliography
@unnumbered Bibliography

@node Concept Index
@unnumbered Index

@printindex cp

@page

@node Program Index
@unnumbered Program Index

@printindex pg

@bye

TODO:
